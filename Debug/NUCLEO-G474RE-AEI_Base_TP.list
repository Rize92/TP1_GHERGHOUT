
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  0800d1c8  0800d1c8  0001d1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da04  0800da04  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800da04  0800da04  0001da04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da0c  0800da0c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da0c  0800da0c  0001da0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800da14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001ec  0800dc00  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800dc00  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d541  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384d  00000000  00000000  0003d75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00040fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00042630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8ff  00000000  00000000  00043b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7c4  00000000  00000000  0006e427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011401e  00000000  00000000  00089beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019dc09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007208  00000000  00000000  0019dc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d1ac 	.word	0x0800d1ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800d1ac 	.word	0x0800d1ac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f009 f8e3 	bl	800a1a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fda:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fe4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_ADC1_Init+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001004:	2204      	movs	r2, #4
 8001006:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_ADC1_Init+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001010:	2201      	movs	r2, #1
 8001012:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001016:	2201      	movs	r2, #1
 8001018:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_ADC1_Init+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001024:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_ADC1_Init+0xec>)
 800102c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_ADC1_Init+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <MX_ADC1_Init+0xec>)
 800104a:	f001 fe63 	bl	8002d14 <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001054:	f000 fba0 	bl	8001798 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001064:	f003 f9e6 	bl	8004434 <HAL_ADCEx_MultiModeConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800106e:	f000 fb93 	bl	8001798 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_ADC1_Init+0xf0>)
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001076:	2306      	movs	r3, #6
 8001078:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107e:	237f      	movs	r3, #127	; 0x7f
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001082:	2304      	movs	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_ADC1_Init+0xec>)
 8001090:	f002 fb54 	bl	800373c <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800109a:	f000 fb7d 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000208 	.word	0x20000208
 80010ac:	08600004 	.word	0x08600004

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b09e      	sub	sp, #120	; 0x78
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2254      	movs	r2, #84	; 0x54
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f009 f865 	bl	800a1a0 <memset>
  if(adcHandle->Instance==ADC1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010de:	d167      	bne.n	80011b0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 fe9f 	bl	8005e34 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010fc:	f000 fb4c 	bl	8001798 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_ADC_MspInit+0x108>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001104:	4a2c      	ldr	r2, [pc, #176]	; (80011b8 <HAL_ADC_MspInit+0x108>)
 8001106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800110a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110c:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <HAL_ADC_MspInit+0x108>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_ADC_MspInit+0x108>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_ADC_MspInit+0x108>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <HAL_ADC_MspInit+0x108>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001130:	2302      	movs	r3, #2
 8001132:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001134:	2303      	movs	r3, #3
 8001136:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f003 fe8f 	bl	8004e68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 800114c:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <HAL_ADC_MspInit+0x110>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 8001152:	2205      	movs	r2, #5
 8001154:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 800116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 8001172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001176:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 800117a:	2220      	movs	r2, #32
 800117c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 8001186:	f003 fb3d 	bl	8004804 <HAL_DMA_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001190:	f000 fb02 	bl	8001798 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 8001198:	655a      	str	r2, [r3, #84]	; 0x54
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_ADC_MspInit+0x10c>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2012      	movs	r0, #18
 80011a6:	f003 fb05 	bl	80047b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011aa:	2012      	movs	r0, #18
 80011ac:	f003 fb1c 	bl	80047e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3778      	adds	r7, #120	; 0x78
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	20000274 	.word	0x20000274
 80011c0:	40020008 	.word	0x40020008

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_DMA_Init+0x50>)
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	4a11      	ldr	r2, [pc, #68]	; (8001214 <MX_DMA_Init+0x50>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6493      	str	r3, [r2, #72]	; 0x48
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_DMA_Init+0x50>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_DMA_Init+0x50>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <MX_DMA_Init+0x50>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6493      	str	r3, [r2, #72]	; 0x48
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_DMA_Init+0x50>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	200b      	movs	r0, #11
 8001200:	f003 fad8 	bl	80047b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001204:	200b      	movs	r0, #11
 8001206:	f003 faef 	bl	80047e8 <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a32      	ldr	r2, [pc, #200]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b30      	ldr	r3, [pc, #192]	; (80012fc <MX_GPIO_Init+0xe4>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <MX_GPIO_Init+0xe4>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_GPIO_Init+0xe4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2108      	movs	r1, #8
 800127a:	4821      	ldr	r0, [pc, #132]	; (8001300 <MX_GPIO_Init+0xe8>)
 800127c:	f003 ff76 	bl	800516c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2120      	movs	r1, #32
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f003 ff70 	bl	800516c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	4619      	mov	r1, r3
 80012a2:	4817      	ldr	r0, [pc, #92]	; (8001300 <MX_GPIO_Init+0xe8>)
 80012a4:	f003 fde0 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 80012a8:	2308      	movs	r3, #8
 80012aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	4619      	mov	r1, r3
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <MX_GPIO_Init+0xe8>)
 80012c0:	f003 fdd2 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012c4:	2320      	movs	r3, #32
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f003 fdc3 	bl	8004e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2028      	movs	r0, #40	; 0x28
 80012e8:	f003 fa64 	bl	80047b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ec:	2028      	movs	r0, #40	; 0x28
 80012ee:	f003 fa7b 	bl	80047e8 <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000800 	.word	0x48000800
 8001304:	00000000 	.word	0x00000000

08001308 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800130c:	f001 fa3f 	bl	800278e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001310:	f000 f9a0 	bl	8001654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001314:	f7ff ff80 	bl	8001218 <MX_GPIO_Init>
	MX_DMA_Init();
 8001318:	f7ff ff54 	bl	80011c4 <MX_DMA_Init>
	MX_TIM1_Init();
 800131c:	f000 fed4 	bl	80020c8 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001320:	f001 f960 	bl	80025e4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001324:	f7ff fe4a 	bl	8000fbc <MX_ADC1_Init>
	MX_TIM2_Init();
 8001328:	f000 ff8c 	bl	8002244 <MX_TIM2_Init>
	MX_TIM3_Init();
 800132c:	f000 ffd8 	bl	80022e0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001330:	f001 f82c 	bl	800238c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001334:	2201      	movs	r2, #1
 8001336:	49ac      	ldr	r1, [pc, #688]	; (80015e8 <main+0x2e0>)
 8001338:	48ac      	ldr	r0, [pc, #688]	; (80015ec <main+0x2e4>)
 800133a:	f006 ff73 	bl	8008224 <HAL_UART_Receive_IT>
	HAL_Delay(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f001 fa5c 	bl	80027fc <HAL_Delay>
	shellInit();
 8001344:	f000 fa4c 	bl	80017e0 <shellInit>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);			//Lancement des 2 PWm utilisé pour la commande avec leur complémentaire
 8001348:	2100      	movs	r1, #0
 800134a:	48a9      	ldr	r0, [pc, #676]	; (80015f0 <main+0x2e8>)
 800134c:	f005 f962 	bl	8006614 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8001350:	2100      	movs	r1, #0
 8001352:	48a7      	ldr	r0, [pc, #668]	; (80015f0 <main+0x2e8>)
 8001354:	f006 fc0a 	bl	8007b6c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001358:	2104      	movs	r1, #4
 800135a:	48a5      	ldr	r0, [pc, #660]	; (80015f0 <main+0x2e8>)
 800135c:	f005 f95a 	bl	8006614 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8001360:	2104      	movs	r1, #4
 8001362:	48a3      	ldr	r0, [pc, #652]	; (80015f0 <main+0x2e8>)
 8001364:	f006 fc02 	bl	8007b6c <HAL_TIMEx_PWMN_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);   // activation du TIM3  en mode encodeur
 8001368:	213c      	movs	r1, #60	; 0x3c
 800136a:	48a2      	ldr	r0, [pc, #648]	; (80015f4 <main+0x2ec>)
 800136c:	f005 fb0a 	bl	8006984 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001370:	48a1      	ldr	r0, [pc, #644]	; (80015f8 <main+0x2f0>)
 8001372:	f005 f875 	bl	8006460 <HAL_TIM_Base_Start_IT>


	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8001376:	217f      	movs	r1, #127	; 0x7f
 8001378:	48a0      	ldr	r0, [pc, #640]	; (80015fc <main+0x2f4>)
 800137a:	f002 ffc7 	bl	800430c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUF_SIZE);
 800137e:	220a      	movs	r2, #10
 8001380:	499f      	ldr	r1, [pc, #636]	; (8001600 <main+0x2f8>)
 8001382:	489e      	ldr	r0, [pc, #632]	; (80015fc <main+0x2f4>)
 8001384:	f001 fe88 	bl	8003098 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8001388:	489e      	ldr	r0, [pc, #632]	; (8001604 <main+0x2fc>)
 800138a:	f004 fff9 	bl	8006380 <HAL_TIM_Base_Start>


	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 800138e:	4b9e      	ldr	r3, [pc, #632]	; (8001608 <main+0x300>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <main+0xa6>
			if(shellGetChar()){
 8001396:	f000 fa5b 	bl	8001850 <shellGetChar>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <main+0xa0>
				shellExec();
 80013a0:	f000 faca 	bl	8001938 <shellExec>
				shellPrompt();
 80013a4:	f000 fa34 	bl	8001810 <shellPrompt>
			}
			uartRxReceived = 0;
 80013a8:	4b97      	ldr	r3, [pc, #604]	; (8001608 <main+0x300>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]

		}
		if(FLAG==1){
 80013ae:	4b97      	ldr	r3, [pc, #604]	; (800160c <main+0x304>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d1eb      	bne.n	800138e <main+0x86>
			value=0;
 80013b6:	4b96      	ldr	r3, [pc, #600]	; (8001610 <main+0x308>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
			for(idx=0;idx<ADC_BUF_SIZE;idx++){
 80013be:	4b95      	ldr	r3, [pc, #596]	; (8001614 <main+0x30c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e017      	b.n	80013f6 <main+0xee>
				value=value+ADC_buffer[idx];
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <main+0x30c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <main+0x2f8>)
 80013ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	4b8d      	ldr	r3, [pc, #564]	; (8001610 <main+0x308>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	4b8a      	ldr	r3, [pc, #552]	; (8001610 <main+0x308>)
 80013e6:	edc3 7a00 	vstr	s15, [r3]
			for(idx=0;idx<ADC_BUF_SIZE;idx++){
 80013ea:	4b8a      	ldr	r3, [pc, #552]	; (8001614 <main+0x30c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b88      	ldr	r3, [pc, #544]	; (8001614 <main+0x30c>)
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	4b87      	ldr	r3, [pc, #540]	; (8001614 <main+0x30c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	d9e3      	bls.n	80013c6 <main+0xbe>
			}
			value= value/10;    		//on calcul la moyene des valeurs enregistré par le DMA dans le buffer
 80013fe:	4b84      	ldr	r3, [pc, #528]	; (8001610 <main+0x308>)
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140c:	4b80      	ldr	r3, [pc, #512]	; (8001610 <main+0x308>)
 800140e:	edc3 7a00 	vstr	s15, [r3]
			value= (value*3.3)/4096;	//résolution de 12 bits
 8001412:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <main+0x308>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8ce 	bl	80005b8 <__aeabi_f2d>
 800141c:	a36e      	add	r3, pc, #440	; (adr r3, 80015d8 <main+0x2d0>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f921 	bl	8000668 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b79      	ldr	r3, [pc, #484]	; (8001618 <main+0x310>)
 8001434:	f7ff fa42 	bl	80008bc <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbea 	bl	8000c18 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4a72      	ldr	r2, [pc, #456]	; (8001610 <main+0x308>)
 8001448:	6013      	str	r3, [r2, #0]
			value= (value-2.255)*12;	// rapport entre tension courant et un offset de 0A pour 2.5V (il y avais un offset suplémentaire sur notre carte )
 800144a:	4b71      	ldr	r3, [pc, #452]	; (8001610 <main+0x308>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f8b2 	bl	80005b8 <__aeabi_f2d>
 8001454:	a362      	add	r3, pc, #392	; (adr r3, 80015e0 <main+0x2d8>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7fe ff4d 	bl	80002f8 <__aeabi_dsub>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b6c      	ldr	r3, [pc, #432]	; (800161c <main+0x314>)
 800146c:	f7ff f8fc 	bl	8000668 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbce 	bl	8000c18 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4a64      	ldr	r2, [pc, #400]	; (8001610 <main+0x308>)
 8001480:	6013      	str	r3, [r2, #0]

			if(flagA==1){
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <main+0x318>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	f040 809f 	bne.w	80015ca <main+0x2c2>

				eps_prev=eps;  //stockage de l'ancienne valeur de l'erreur
 800148c:	4b65      	ldr	r3, [pc, #404]	; (8001624 <main+0x31c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a65      	ldr	r2, [pc, #404]	; (8001628 <main+0x320>)
 8001492:	6013      	str	r3, [r2, #0]
				eps=ireq-value;//calcul de l'erreur
 8001494:	4b65      	ldr	r3, [pc, #404]	; (800162c <main+0x324>)
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	4b5d      	ldr	r3, [pc, #372]	; (8001610 <main+0x308>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a4:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <main+0x31c>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]
				alpha1=eps*kp;
 80014aa:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <main+0x31c>)
 80014ac:	ed93 7a00 	vldr	s14, [r3]
 80014b0:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <main+0x328>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <main+0x32c>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]
				alpha2=alpha2prev+(ki*Te/2)*(eps+eps_prev);
 80014c0:	4b5d      	ldr	r3, [pc, #372]	; (8001638 <main+0x330>)
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	4b5d      	ldr	r3, [pc, #372]	; (800163c <main+0x334>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014d8:	4b52      	ldr	r3, [pc, #328]	; (8001624 <main+0x31c>)
 80014da:	edd3 6a00 	vldr	s13, [r3]
 80014de:	4b52      	ldr	r3, [pc, #328]	; (8001628 <main+0x320>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ec:	4b54      	ldr	r3, [pc, #336]	; (8001640 <main+0x338>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <main+0x33c>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]

				if(alpha2>1){ 	//anti windup
 80014fc:	4b51      	ldr	r3, [pc, #324]	; (8001644 <main+0x33c>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	dd03      	ble.n	8001518 <main+0x210>
					alpha2=1;
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <main+0x33c>)
 8001512:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001516:	601a      	str	r2, [r3, #0]
				}
				if(alpha2<0){
 8001518:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <main+0x33c>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	d503      	bpl.n	8001530 <main+0x228>
					alpha2=0;
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <main+0x33c>)
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
				}

				alpha2prev=alpha2;
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <main+0x33c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a42      	ldr	r2, [pc, #264]	; (8001640 <main+0x338>)
 8001536:	6013      	str	r3, [r2, #0]
				alf=alpha1+alpha2;
 8001538:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <main+0x32c>)
 800153a:	ed93 7a00 	vldr	s14, [r3]
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <main+0x33c>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <main+0x340>)
 800154a:	edc3 7a00 	vstr	s15, [r3]
				if(alf>1){
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <main+0x340>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	dd03      	ble.n	800156a <main+0x262>
					alf=1;
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <main+0x340>)
 8001564:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001568:	601a      	str	r2, [r3, #0]
				}
				if(alf<0){
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <main+0x340>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	d503      	bpl.n	8001582 <main+0x27a>
					alf=0;
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <main+0x340>)
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
				}

				alf=(int)(alf*5313);
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <main+0x340>)
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800164c <main+0x344>
 800158c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <main+0x340>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
				TIM1->CCR1=alf;				// PWM avec le alpha calculé par le correcteur
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <main+0x340>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <main+0x348>)
 80015a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015aa:	ee17 2a90 	vmov	r2, s15
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2=5313-alf;		//
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <main+0x340>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800164c <main+0x344>
 80015ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <main+0x348>)
 80015c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c4:	ee17 2a90 	vmov	r2, s15
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
			}

			FLAG=0;				// on remet le flag du DMA a zero
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <main+0x304>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 80015d0:	e6dd      	b.n	800138e <main+0x86>
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	66666666 	.word	0x66666666
 80015dc:	400a6666 	.word	0x400a6666
 80015e0:	70a3d70a 	.word	0x70a3d70a
 80015e4:	40020a3d 	.word	0x40020a3d
 80015e8:	20000504 	.word	0x20000504
 80015ec:	2000054c 	.word	0x2000054c
 80015f0:	200003d0 	.word	0x200003d0
 80015f4:	20000468 	.word	0x20000468
 80015f8:	200004b4 	.word	0x200004b4
 80015fc:	20000208 	.word	0x20000208
 8001600:	200002d4 	.word	0x200002d4
 8001604:	2000041c 	.word	0x2000041c
 8001608:	20000500 	.word	0x20000500
 800160c:	200002e8 	.word	0x200002e8
 8001610:	200002f0 	.word	0x200002f0
 8001614:	200002e9 	.word	0x200002e9
 8001618:	40b00000 	.word	0x40b00000
 800161c:	40280000 	.word	0x40280000
 8001620:	2000030c 	.word	0x2000030c
 8001624:	200002f8 	.word	0x200002f8
 8001628:	200002fc 	.word	0x200002fc
 800162c:	200002f4 	.word	0x200002f4
 8001630:	20000004 	.word	0x20000004
 8001634:	20000304 	.word	0x20000304
 8001638:	20000008 	.word	0x20000008
 800163c:	2000000c 	.word	0x2000000c
 8001640:	20000000 	.word	0x20000000
 8001644:	20000300 	.word	0x20000300
 8001648:	20000308 	.word	0x20000308
 800164c:	45a60800 	.word	0x45a60800
 8001650:	40012c00 	.word	0x40012c00

08001654 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	2238      	movs	r2, #56	; 0x38
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f008 fd9c 	bl	800a1a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001676:	2000      	movs	r0, #0
 8001678:	f003 fdc2 	bl	8005200 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800167c:	2301      	movs	r3, #1
 800167e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001684:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001686:	2302      	movs	r3, #2
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168a:	2303      	movs	r3, #3
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800168e:	2306      	movs	r3, #6
 8001690:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001692:	2355      	movs	r3, #85	; 0x55
 8001694:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001696:	2302      	movs	r3, #2
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800169a:	2302      	movs	r3, #2
 800169c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fe5e 	bl	8005368 <HAL_RCC_OscConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x62>
	{
		Error_Handler();
 80016b2:	f000 f871 	bl	8001798 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	230f      	movs	r3, #15
 80016b8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ba:	2303      	movs	r3, #3
 80016bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2104      	movs	r1, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f962 	bl	8005998 <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80016da:	f000 f85d 	bl	8001798 <Error_Handler>
	}
}
 80016de:	bf00      	nop
 80016e0:	3750      	adds	r7, #80	; 0x50
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
	int i;
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2108      	movs	r1, #8
 80016f6:	480a      	ldr	r0, [pc, #40]	; (8001720 <HAL_GPIO_EXTI_Callback+0x38>)
 80016f8:	f003 fd38 	bl	800516c <HAL_GPIO_WritePin>
	for(i=0;i<33;i++){}
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e002      	b.n	8001708 <HAL_GPIO_EXTI_Callback+0x20>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b20      	cmp	r3, #32
 800170c:	ddf9      	ble.n	8001702 <HAL_GPIO_EXTI_Callback+0x1a>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2108      	movs	r1, #8
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <HAL_GPIO_EXTI_Callback+0x38>)
 8001714:	f003 fd2a 	bl	800516c <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	48000800 	.word	0x48000800

08001724 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	FLAG=1;			// flag qui indique que le buffer est plein
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <HAL_ADC_ConvCpltCallback+0x1c>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200002e8 	.word	0x200002e8

08001744 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001756:	f001 f833 	bl	80027c0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM4) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d10c      	bne.n	800177e <HAL_TIM_PeriodElapsedCallback+0x3a>
		vitesse=TIM3->CNT;		// on recupere le nombre de front montant et descendant recu par la PWM de la roue codeuse
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001772:	edc3 7a00 	vstr	s15, [r3]
		TIM3->CNT=32768;		// puit on remet le compte a la moitié de la valeur max du compteur
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001778:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

	}
	/* USER CODE END Callback 1 */
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40001000 	.word	0x40001000
 800178c:	40000800 	.word	0x40000800
 8001790:	40000400 	.word	0x40000400
 8001794:	200002ec 	.word	0x200002ec

08001798 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>

080017a2 <motorPowerOn>:

/**
  * @brief  Switch on the motor driver
  * @retval None
  */
void motorPowerOn(void){
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80017a6:	2120      	movs	r1, #32
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ac:	f003 fcf6 	bl	800519c <HAL_GPIO_TogglePin>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80017b8:	2120      	movs	r1, #32
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017be:	f003 fced 	bl	800519c <HAL_GPIO_TogglePin>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80017ce:	2120      	movs	r1, #32
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f003 fce2 	bl	800519c <HAL_GPIO_TogglePin>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <shellInit>:

/**
 * @brief  Send a stating message
 * @retval None
 */
void shellInit(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	226c      	movs	r2, #108	; 0x6c
 80017ea:	4906      	ldr	r1, [pc, #24]	; (8001804 <shellInit+0x24>)
 80017ec:	4806      	ldr	r0, [pc, #24]	; (8001808 <shellInit+0x28>)
 80017ee:	f006 fc82 	bl	80080f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	221a      	movs	r2, #26
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <shellInit+0x2c>)
 80017fa:	4803      	ldr	r0, [pc, #12]	; (8001808 <shellInit+0x28>)
 80017fc:	f006 fc7b 	bl	80080f6 <HAL_UART_Transmit>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	0800d290 	.word	0x0800d290
 8001808:	2000054c 	.word	0x2000054c
 800180c:	0800d274 	.word	0x0800d274

08001810 <shellPrompt>:

/**
 * @brief  Send the prompt
 * @retval None
 */
void shellPrompt(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	221a      	movs	r2, #26
 800181a:	4903      	ldr	r1, [pc, #12]	; (8001828 <shellPrompt+0x18>)
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <shellPrompt+0x1c>)
 800181e:	f006 fc6a 	bl	80080f6 <HAL_UART_Transmit>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	0800d274 	.word	0x0800d274
 800182c:	2000054c 	.word	0x2000054c

08001830 <shellCmdNotFound>:

/**
 * @brief  Send the default message if the command is not found
 * @retval None
 */
void shellCmdNotFound(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	2214      	movs	r2, #20
 800183a:	4903      	ldr	r1, [pc, #12]	; (8001848 <shellCmdNotFound+0x18>)
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <shellCmdNotFound+0x1c>)
 800183e:	f006 fc5a 	bl	80080f6 <HAL_UART_Transmit>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	0800d570 	.word	0x0800d570
 800184c:	2000054c 	.word	0x2000054c

08001850 <shellGetChar>:

/**
 * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
 * @retval 1 if a new command is available, 0 if not.
 */
uint8_t shellGetChar(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <shellGetChar+0xc8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b0d      	cmp	r3, #13
 8001860:	d002      	beq.n	8001868 <shellGetChar+0x18>
 8001862:	2b7f      	cmp	r3, #127	; 0x7f
 8001864:	d02f      	beq.n	80018c6 <shellGetChar+0x76>
 8001866:	e040      	b.n	80018ea <shellGetChar+0x9a>
	// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	2203      	movs	r2, #3
 800186e:	492b      	ldr	r1, [pc, #172]	; (800191c <shellGetChar+0xcc>)
 8001870:	482b      	ldr	r0, [pc, #172]	; (8001920 <shellGetChar+0xd0>)
 8001872:	f006 fc40 	bl	80080f6 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <shellGetChar+0xd4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <shellGetChar+0xd8>)
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <shellGetChar+0xdc>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8001888:	4929      	ldr	r1, [pc, #164]	; (8001930 <shellGetChar+0xe0>)
 800188a:	4827      	ldr	r0, [pc, #156]	; (8001928 <shellGetChar+0xd8>)
 800188c:	f009 f94e 	bl	800ab2c <strtok>
 8001890:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8001892:	e00f      	b.n	80018b4 <shellGetChar+0x64>
			argv[argc++] = token;
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <shellGetChar+0xdc>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	b2d1      	uxtb	r1, r2
 800189c:	4a23      	ldr	r2, [pc, #140]	; (800192c <shellGetChar+0xdc>)
 800189e:	7011      	strb	r1, [r2, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4a24      	ldr	r2, [pc, #144]	; (8001934 <shellGetChar+0xe4>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 80018aa:	4921      	ldr	r1, [pc, #132]	; (8001930 <shellGetChar+0xe0>)
 80018ac:	2000      	movs	r0, #0
 80018ae:	f009 f93d 	bl	800ab2c <strtok>
 80018b2:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ec      	bne.n	8001894 <shellGetChar+0x44>
		}

		idxCmd = 0;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <shellGetChar+0xd4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	71fb      	strb	r3, [r7, #7]
		break;
 80018c4:	e023      	b.n	800190e <shellGetChar+0xbe>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <shellGetChar+0xd4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	1e5a      	subs	r2, r3, #1
 80018cc:	b2d1      	uxtb	r1, r2
 80018ce:	4a15      	ldr	r2, [pc, #84]	; (8001924 <shellGetChar+0xd4>)
 80018d0:	7011      	strb	r1, [r2, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <shellGetChar+0xd8>)
 80018d6:	2100      	movs	r1, #0
 80018d8:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	2201      	movs	r2, #1
 80018e0:	490d      	ldr	r1, [pc, #52]	; (8001918 <shellGetChar+0xc8>)
 80018e2:	480f      	ldr	r0, [pc, #60]	; (8001920 <shellGetChar+0xd0>)
 80018e4:	f006 fc07 	bl	80080f6 <HAL_UART_Transmit>
		break;
 80018e8:	e011      	b.n	800190e <shellGetChar+0xbe>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <shellGetChar+0xd4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <shellGetChar+0xd4>)
 80018f4:	7011      	strb	r1, [r2, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <shellGetChar+0xc8>)
 80018fa:	7819      	ldrb	r1, [r3, #0]
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <shellGetChar+0xd8>)
 80018fe:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	2201      	movs	r2, #1
 8001906:	4904      	ldr	r1, [pc, #16]	; (8001918 <shellGetChar+0xc8>)
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <shellGetChar+0xd0>)
 800190a:	f006 fbf4 	bl	80080f6 <HAL_UART_Transmit>
	}

	return newCmdReady;
 800190e:	79fb      	ldrb	r3, [r7, #7]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000504 	.word	0x20000504
 800191c:	0800d2fc 	.word	0x0800d2fc
 8001920:	2000054c 	.word	0x2000054c
 8001924:	20000354 	.word	0x20000354
 8001928:	20000314 	.word	0x20000314
 800192c:	2000037c 	.word	0x2000037c
 8001930:	0800d1c8 	.word	0x0800d1c8
 8001934:	20000358 	.word	0x20000358

08001938 <shellExec>:

/**
 * @brief  Call function depends of the value of argc and argv
 * @retval None
 */
void shellExec(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 800193e:	4b99      	ldr	r3, [pc, #612]	; (8001ba4 <shellExec+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4999      	ldr	r1, [pc, #612]	; (8001ba8 <shellExec+0x270>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc6b 	bl	8000220 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d16f      	bne.n	8001a30 <shellExec+0xf8>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8001950:	4b94      	ldr	r3, [pc, #592]	; (8001ba4 <shellExec+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4995      	ldr	r1, [pc, #596]	; (8001bac <shellExec+0x274>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fc62 	bl	8000220 <strcmp>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d137      	bne.n	80019d2 <shellExec+0x9a>
 8001962:	4b90      	ldr	r3, [pc, #576]	; (8001ba4 <shellExec+0x26c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4992      	ldr	r1, [pc, #584]	; (8001bb0 <shellExec+0x278>)
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fc59 	bl	8000220 <strcmp>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <shellExec+0x4e>
 8001974:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <shellExec+0x26c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	498e      	ldr	r1, [pc, #568]	; (8001bb4 <shellExec+0x27c>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fc50 	bl	8000220 <strcmp>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d125      	bne.n	80019d2 <shellExec+0x9a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8001986:	4b87      	ldr	r3, [pc, #540]	; (8001ba4 <shellExec+0x26c>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4618      	mov	r0, r3
 800198c:	f008 fbda 	bl	800a144 <atoi>
 8001990:	4603      	mov	r3, r0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	2120      	movs	r1, #32
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f003 fbe6 	bl	800516c <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80019a0:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <shellExec+0x26c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f008 fbcd 	bl	800a144 <atoi>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a82      	ldr	r2, [pc, #520]	; (8001bb8 <shellExec+0x280>)
 80019ae:	2140      	movs	r1, #64	; 0x40
 80019b0:	4882      	ldr	r0, [pc, #520]	; (8001bbc <shellExec+0x284>)
 80019b2:	f009 f867 	bl	800aa84 <sniprintf>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b81      	ldr	r3, [pc, #516]	; (8001bc0 <shellExec+0x288>)
 80019bc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 80019be:	4b80      	ldr	r3, [pc, #512]	; (8001bc0 <shellExec+0x288>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	497c      	ldr	r1, [pc, #496]	; (8001bbc <shellExec+0x284>)
 80019ca:	487e      	ldr	r0, [pc, #504]	; (8001bc4 <shellExec+0x28c>)
 80019cc:	f006 fb93 	bl	80080f6 <HAL_UART_Transmit>
 80019d0:	e186      	b.n	8001ce0 <shellExec+0x3a8>
		}
		else if(strcmp(argv[1],"speed")==0){
 80019d2:	4b74      	ldr	r3, [pc, #464]	; (8001ba4 <shellExec+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	497c      	ldr	r1, [pc, #496]	; (8001bc8 <shellExec+0x290>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fc21 	bl	8000220 <strcmp>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d122      	bne.n	8001a2a <shellExec+0xf2>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <shellExec+0x26c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f008 fbab 	bl	800a144 <atoi>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d110      	bne.n	8001a16 <shellExec+0xde>
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <shellExec+0x26c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	496d      	ldr	r1, [pc, #436]	; (8001bb0 <shellExec+0x278>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fc10 	bl	8000220 <strcmp>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <shellExec+0xde>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	2230      	movs	r2, #48	; 0x30
 8001a0c:	496f      	ldr	r1, [pc, #444]	; (8001bcc <shellExec+0x294>)
 8001a0e:	486d      	ldr	r0, [pc, #436]	; (8001bc4 <shellExec+0x28c>)
 8001a10:	f006 fb71 	bl	80080f6 <HAL_UART_Transmit>
 8001a14:	e164      	b.n	8001ce0 <shellExec+0x3a8>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8001a16:	4b63      	ldr	r3, [pc, #396]	; (8001ba4 <shellExec+0x26c>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f008 fb92 	bl	800a144 <atoi>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fecf 	bl	80017c6 <motorSetSpeed>


	else{
		shellCmdNotFound();
	}
}
 8001a28:	e15a      	b.n	8001ce0 <shellExec+0x3a8>
			shellCmdNotFound();
 8001a2a:	f7ff ff01 	bl	8001830 <shellCmdNotFound>
}
 8001a2e:	e157      	b.n	8001ce0 <shellExec+0x3a8>
	else if(strcmp(argv[0],"help")==0)
 8001a30:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <shellExec+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4966      	ldr	r1, [pc, #408]	; (8001bd0 <shellExec+0x298>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fbf2 	bl	8000220 <strcmp>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <shellExec+0x11c>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001a4a:	4962      	ldr	r1, [pc, #392]	; (8001bd4 <shellExec+0x29c>)
 8001a4c:	485d      	ldr	r0, [pc, #372]	; (8001bc4 <shellExec+0x28c>)
 8001a4e:	f006 fb52 	bl	80080f6 <HAL_UART_Transmit>
}
 8001a52:	e145      	b.n	8001ce0 <shellExec+0x3a8>
	else if(strcmp(argv[0],"pinout")==0)
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <shellExec+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	495f      	ldr	r1, [pc, #380]	; (8001bd8 <shellExec+0x2a0>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fbe0 	bl	8000220 <strcmp>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <shellExec+0x140>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001a6e:	495b      	ldr	r1, [pc, #364]	; (8001bdc <shellExec+0x2a4>)
 8001a70:	4854      	ldr	r0, [pc, #336]	; (8001bc4 <shellExec+0x28c>)
 8001a72:	f006 fb40 	bl	80080f6 <HAL_UART_Transmit>
}
 8001a76:	e133      	b.n	8001ce0 <shellExec+0x3a8>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <shellExec+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4958      	ldr	r1, [pc, #352]	; (8001be0 <shellExec+0x2a8>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fbce 	bl	8000220 <strcmp>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d112      	bne.n	8001ab0 <shellExec+0x178>
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <shellExec+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4955      	ldr	r1, [pc, #340]	; (8001be4 <shellExec+0x2ac>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fbc5 	bl	8000220 <strcmp>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <shellExec+0x178>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	221a      	movs	r2, #26
 8001aa2:	4951      	ldr	r1, [pc, #324]	; (8001be8 <shellExec+0x2b0>)
 8001aa4:	4847      	ldr	r0, [pc, #284]	; (8001bc4 <shellExec+0x28c>)
 8001aa6:	f006 fb26 	bl	80080f6 <HAL_UART_Transmit>
		motorPowerOn();
 8001aaa:	f7ff fe7a 	bl	80017a2 <motorPowerOn>
 8001aae:	e117      	b.n	8001ce0 <shellExec+0x3a8>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <shellExec+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	494a      	ldr	r1, [pc, #296]	; (8001be0 <shellExec+0x2a8>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fbb2 	bl	8000220 <strcmp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d112      	bne.n	8001ae8 <shellExec+0x1b0>
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <shellExec+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4949      	ldr	r1, [pc, #292]	; (8001bec <shellExec+0x2b4>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fba9 	bl	8000220 <strcmp>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <shellExec+0x1b0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	221b      	movs	r2, #27
 8001ada:	4945      	ldr	r1, [pc, #276]	; (8001bf0 <shellExec+0x2b8>)
 8001adc:	4839      	ldr	r0, [pc, #228]	; (8001bc4 <shellExec+0x28c>)
 8001ade:	f006 fb0a 	bl	80080f6 <HAL_UART_Transmit>
		motorPowerOff();
 8001ae2:	f7ff fe67 	bl	80017b4 <motorPowerOff>
 8001ae6:	e0fb      	b.n	8001ce0 <shellExec+0x3a8>
	else if((strcmp(argv[0],"alpha")==0))
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <shellExec+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4941      	ldr	r1, [pc, #260]	; (8001bf4 <shellExec+0x2bc>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fb96 	bl	8000220 <strcmp>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11b      	bne.n	8001b32 <shellExec+0x1fa>
		int alph=atoi(argv[1]);   // stockage du rapport cyclique voulu dans alph
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <shellExec+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f008 fb20 	bl	800a144 <atoi>
 8001b04:	6038      	str	r0, [r7, #0]
		alph=alph*5313/100;       // on divise par 100 car le alpha est recu en pourcentage
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f241 42c1 	movw	r2, #5313	; 0x14c1
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	4a39      	ldr	r2, [pc, #228]	; (8001bf8 <shellExec+0x2c0>)
 8001b12:	fb82 1203 	smull	r1, r2, r2, r3
 8001b16:	1152      	asrs	r2, r2, #5
 8001b18:	17db      	asrs	r3, r3, #31
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	603b      	str	r3, [r7, #0]
		TIM1->CCR1=alph;
 8001b1e:	4a37      	ldr	r2, [pc, #220]	; (8001bfc <shellExec+0x2c4>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=5313-alph;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <shellExec+0x2c4>)
 8001b2e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b30:	e0d6      	b.n	8001ce0 <shellExec+0x3a8>
	else if((strcmp(argv[0],"start")==0))
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <shellExec+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4932      	ldr	r1, [pc, #200]	; (8001c00 <shellExec+0x2c8>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fb71 	bl	8000220 <strcmp>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d113      	bne.n	8001b6c <shellExec+0x234>
		HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);//activation du GPIO
 8001b44:	2201      	movs	r2, #1
 8001b46:	2108      	movs	r1, #8
 8001b48:	482e      	ldr	r0, [pc, #184]	; (8001c04 <shellExec+0x2cc>)
 8001b4a:	f003 fb0f 	bl	800516c <HAL_GPIO_WritePin>
		for(i=0;i<33;i++){} // boucle vide qui dure un peut plus de 2µs utiliser
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	e002      	b.n	8001b5a <shellExec+0x222>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3301      	adds	r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	ddf9      	ble.n	8001b54 <shellExec+0x21c>
		HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);//desactiavtion du GPIO apres les 2µs
 8001b60:	2200      	movs	r2, #0
 8001b62:	2108      	movs	r1, #8
 8001b64:	4827      	ldr	r0, [pc, #156]	; (8001c04 <shellExec+0x2cc>)
 8001b66:	f003 fb01 	bl	800516c <HAL_GPIO_WritePin>
}
 8001b6a:	e0b9      	b.n	8001ce0 <shellExec+0x3a8>
	else if((strcmp(argv[0],"mesure")==0))
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <shellExec+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4925      	ldr	r1, [pc, #148]	; (8001c08 <shellExec+0x2d0>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fb54 	bl	8000220 <strcmp>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d14a      	bne.n	8001c14 <shellExec+0x2dc>
		sprintf(uartTxBuffer,"courant: %.2f A \r\n",value);
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <shellExec+0x2d4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd18 	bl	80005b8 <__aeabi_f2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4920      	ldr	r1, [pc, #128]	; (8001c10 <shellExec+0x2d8>)
 8001b8e:	480b      	ldr	r0, [pc, #44]	; (8001bbc <shellExec+0x284>)
 8001b90:	f008 ffac 	bl	800aaec <siprintf>
		HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);//affichage du courant
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	4908      	ldr	r1, [pc, #32]	; (8001bbc <shellExec+0x284>)
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <shellExec+0x28c>)
 8001b9e:	f006 faaa 	bl	80080f6 <HAL_UART_Transmit>
}
 8001ba2:	e09d      	b.n	8001ce0 <shellExec+0x3a8>
 8001ba4:	20000358 	.word	0x20000358
 8001ba8:	0800d1cc 	.word	0x0800d1cc
 8001bac:	0800d1d0 	.word	0x0800d1d0
 8001bb0:	0800d1d4 	.word	0x0800d1d4
 8001bb4:	0800d1d8 	.word	0x0800d1d8
 8001bb8:	0800d1dc 	.word	0x0800d1dc
 8001bbc:	20000508 	.word	0x20000508
 8001bc0:	20000548 	.word	0x20000548
 8001bc4:	2000054c 	.word	0x2000054c
 8001bc8:	0800d1f8 	.word	0x0800d1f8
 8001bcc:	0800d540 	.word	0x0800d540
 8001bd0:	0800d200 	.word	0x0800d200
 8001bd4:	0800d300 	.word	0x0800d300
 8001bd8:	0800d208 	.word	0x0800d208
 8001bdc:	0800d404 	.word	0x0800d404
 8001be0:	0800d210 	.word	0x0800d210
 8001be4:	0800d218 	.word	0x0800d218
 8001be8:	0800d508 	.word	0x0800d508
 8001bec:	0800d21c 	.word	0x0800d21c
 8001bf0:	0800d524 	.word	0x0800d524
 8001bf4:	0800d220 	.word	0x0800d220
 8001bf8:	51eb851f 	.word	0x51eb851f
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	0800d228 	.word	0x0800d228
 8001c04:	48000800 	.word	0x48000800
 8001c08:	0800d230 	.word	0x0800d230
 8001c0c:	200002f0 	.word	0x200002f0
 8001c10:	0800d238 	.word	0x0800d238
	else if((strcmp(argv[0],"vitesse")==0))
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <shellExec+0x3b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4936      	ldr	r1, [pc, #216]	; (8001cf4 <shellExec+0x3bc>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fb00 	bl	8000220 <strcmp>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d140      	bne.n	8001ca8 <shellExec+0x370>
		vitesse=(vitesse-32768)/4096; 		// convertion du nombre de front montant et descendant venant de la roue codeuse en vitesse
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <shellExec+0x3c0>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001cfc <shellExec+0x3c4>
 8001c30:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c34:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001d00 <shellExec+0x3c8>
 8001c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <shellExec+0x3c0>)
 8001c3e:	edc3 7a00 	vstr	s15, [r3]
		vitesse=vitesse/0.1*60;
 8001c42:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <shellExec+0x3c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fcb6 	bl	80005b8 <__aeabi_f2d>
 8001c4c:	a326      	add	r3, pc, #152	; (adr r3, 8001ce8 <shellExec+0x3b0>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fe33 	bl	80008bc <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <shellExec+0x3cc>)
 8001c64:	f7fe fd00 	bl	8000668 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe ffd2 	bl	8000c18 <__aeabi_d2f>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <shellExec+0x3c0>)
 8001c78:	6013      	str	r3, [r2, #0]
		vit=vitesse;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <shellExec+0x3c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <shellExec+0x3d0>)
 8001c80:	6013      	str	r3, [r2, #0]
		sprintf(uartTxBuffer,"vitesse: %.2f tr/min \r\n",vitesse);
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <shellExec+0x3c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc96 	bl	80005b8 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	491e      	ldr	r1, [pc, #120]	; (8001d0c <shellExec+0x3d4>)
 8001c92:	481f      	ldr	r0, [pc, #124]	; (8001d10 <shellExec+0x3d8>)
 8001c94:	f008 ff2a 	bl	800aaec <siprintf>
		HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);//affichage de la tension
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	491c      	ldr	r1, [pc, #112]	; (8001d10 <shellExec+0x3d8>)
 8001ca0:	481c      	ldr	r0, [pc, #112]	; (8001d14 <shellExec+0x3dc>)
 8001ca2:	f006 fa28 	bl	80080f6 <HAL_UART_Transmit>
}
 8001ca6:	e01b      	b.n	8001ce0 <shellExec+0x3a8>
	else if((strcmp(argv[0],"asserv")==0))
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <shellExec+0x3b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	491a      	ldr	r1, [pc, #104]	; (8001d18 <shellExec+0x3e0>)
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fab6 	bl	8000220 <strcmp>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <shellExec+0x3a2>
		flagA=1;				//flag utiliser pour le lancement de l'asservissement
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <shellExec+0x3e4>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
		ireq=atoi(argv[1]);		//stockage de la consigne de courant dans ireq
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <shellExec+0x3b8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f008 fa3d 	bl	800a144 <atoi>
 8001cca:	ee07 0a90 	vmov	s15, r0
 8001cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <shellExec+0x3e8>)
 8001cd4:	edc3 7a00 	vstr	s15, [r3]
}
 8001cd8:	e002      	b.n	8001ce0 <shellExec+0x3a8>
		shellCmdNotFound();
 8001cda:	f7ff fda9 	bl	8001830 <shellCmdNotFound>
}
 8001cde:	e7ff      	b.n	8001ce0 <shellExec+0x3a8>
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	9999999a 	.word	0x9999999a
 8001cec:	3fb99999 	.word	0x3fb99999
 8001cf0:	20000358 	.word	0x20000358
 8001cf4:	0800d24c 	.word	0x0800d24c
 8001cf8:	200002ec 	.word	0x200002ec
 8001cfc:	47000000 	.word	0x47000000
 8001d00:	45800000 	.word	0x45800000
 8001d04:	404e0000 	.word	0x404e0000
 8001d08:	20000310 	.word	0x20000310
 8001d0c:	0800d254 	.word	0x0800d254
 8001d10:	20000508 	.word	0x20000508
 8001d14:	2000054c 	.word	0x2000054c
 8001d18:	0800d26c 	.word	0x0800d26c
 8001d1c:	2000030c 	.word	0x2000030c
 8001d20:	200002f4 	.word	0x200002f4

08001d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_MspInit+0x44>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_MspInit+0x44>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6613      	str	r3, [r2, #96]	; 0x60
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_MspInit+0x44>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_MspInit+0x44>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_MspInit+0x44>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_MspInit+0x44>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d5a:	f003 faf5 	bl	8005348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_InitTick+0xcc>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <HAL_InitTick+0xcc>)
 8001d88:	f043 0310 	orr.w	r3, r3, #16
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_InitTick+0xcc>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 ffcd 	bl	8005d44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001daa:	f003 ff9f 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 8001dae:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <HAL_InitTick+0xd0>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	0c9b      	lsrs	r3, r3, #18
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_InitTick+0xd4>)
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_InitTick+0xd8>)
 8001dc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_InitTick+0xd4>)
 8001dc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_InitTick+0xd4>)
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_InitTick+0xd4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_InitTick+0xd4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001dde:	4818      	ldr	r0, [pc, #96]	; (8001e40 <HAL_InitTick+0xd4>)
 8001de0:	f004 fa76 	bl	80062d0 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11b      	bne.n	8001e2a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001df2:	4813      	ldr	r0, [pc, #76]	; (8001e40 <HAL_InitTick+0xd4>)
 8001df4:	f004 fb34 	bl	8006460 <HAL_TIM_Base_Start_IT>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d111      	bne.n	8001e2a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e06:	2036      	movs	r0, #54	; 0x36
 8001e08:	f002 fcee 	bl	80047e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	d808      	bhi.n	8001e24 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e12:	2200      	movs	r2, #0
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	2036      	movs	r0, #54	; 0x36
 8001e18:	f002 fccc 	bl	80047b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_InitTick+0xdc>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e002      	b.n	8001e2a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3730      	adds	r7, #48	; 0x30
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	20000380 	.word	0x20000380
 8001e44:	40001000 	.word	0x40001000
 8001e48:	20000014 	.word	0x20000014

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <NMI_Handler+0x4>

08001e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <MemManage_Handler+0x4>

08001e5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <DMA1_Channel1_IRQHandler+0x10>)
 8001eaa:	f002 fe8e 	bl	8004bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000274 	.word	0x20000274

08001eb8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <ADC1_2_IRQHandler+0x10>)
 8001ebe:	f001 f9bf 	bl	8003240 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000208 	.word	0x20000208

08001ecc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM4_IRQHandler+0x10>)
 8001ed2:	f004 fde5 	bl	8006aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200004b4 	.word	0x200004b4

08001ee0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <USART2_IRQHandler+0x10>)
 8001ee6:	f006 f9f3 	bl	80082d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000054c 	.word	0x2000054c

08001ef4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001ef8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001efc:	f003 f968 	bl	80051d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <TIM6_DAC_IRQHandler+0x10>)
 8001f0a:	f004 fdc9 	bl	8006aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000380 	.word	0x20000380

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_kill>:

int _kill(int pid, int sig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f32:	f008 f90b 	bl	800a14c <__errno>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2216      	movs	r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_exit>:

void _exit (int status)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffe7 	bl	8001f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f5a:	e7fe      	b.n	8001f5a <_exit+0x12>

08001f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00a      	b.n	8001f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f6e:	f3af 8000 	nop.w
 8001f72:	4601      	mov	r1, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf0      	blt.n	8001f6e <_read+0x12>
	}

return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e009      	b.n	8001fbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf1      	blt.n	8001fa8 <_write+0x12>
	}
	return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_close>:

int _close(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_isatty>:

int _isatty(int file)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	return 1;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f008 f870 	bl	800a14c <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20020000 	.word	0x20020000
 8002098:	00000400 	.word	0x00000400
 800209c:	200003cc 	.word	0x200003cc
 80020a0:	200005f0 	.word	0x200005f0

080020a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b09c      	sub	sp, #112	; 0x70
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	615a      	str	r2, [r3, #20]
 80020fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2234      	movs	r2, #52	; 0x34
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f008 f84c 	bl	800a1a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002108:	4b4c      	ldr	r3, [pc, #304]	; (800223c <MX_TIM1_Init+0x174>)
 800210a:	4a4d      	ldr	r2, [pc, #308]	; (8002240 <MX_TIM1_Init+0x178>)
 800210c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800210e:	4b4b      	ldr	r3, [pc, #300]	; (800223c <MX_TIM1_Init+0x174>)
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002114:	4b49      	ldr	r3, [pc, #292]	; (800223c <MX_TIM1_Init+0x174>)
 8002116:	2220      	movs	r2, #32
 8002118:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5313;
 800211a:	4b48      	ldr	r3, [pc, #288]	; (800223c <MX_TIM1_Init+0x174>)
 800211c:	f241 42c1 	movw	r2, #5313	; 0x14c1
 8002120:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <MX_TIM1_Init+0x174>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002128:	4b44      	ldr	r3, [pc, #272]	; (800223c <MX_TIM1_Init+0x174>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <MX_TIM1_Init+0x174>)
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002134:	4841      	ldr	r0, [pc, #260]	; (800223c <MX_TIM1_Init+0x174>)
 8002136:	f004 f8cb 	bl	80062d0 <HAL_TIM_Base_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002140:	f7ff fb2a 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800214a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800214e:	4619      	mov	r1, r3
 8002150:	483a      	ldr	r0, [pc, #232]	; (800223c <MX_TIM1_Init+0x174>)
 8002152:	f004 ff39 	bl	8006fc8 <HAL_TIM_ConfigClockSource>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800215c:	f7ff fb1c 	bl	8001798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002160:	4836      	ldr	r0, [pc, #216]	; (800223c <MX_TIM1_Init+0x174>)
 8002162:	f004 f9f5 	bl	8006550 <HAL_TIM_PWM_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800216c:	f7ff fb14 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002170:	2320      	movs	r3, #32
 8002172:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800217c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002180:	4619      	mov	r1, r3
 8002182:	482e      	ldr	r0, [pc, #184]	; (800223c <MX_TIM1_Init+0x174>)
 8002184:	f005 fdb4 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800218e:	f7ff fb03 	bl	8001798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002192:	2360      	movs	r3, #96	; 0x60
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8002196:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219c:	2300      	movs	r3, #0
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021a0:	2300      	movs	r3, #0
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b4:	2200      	movs	r2, #0
 80021b6:	4619      	mov	r1, r3
 80021b8:	4820      	ldr	r0, [pc, #128]	; (800223c <MX_TIM1_Init+0x174>)
 80021ba:	f004 fdf1 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80021c4:	f7ff fae8 	bl	8001798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021cc:	2204      	movs	r2, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	481a      	ldr	r0, [pc, #104]	; (800223c <MX_TIM1_Init+0x174>)
 80021d2:	f004 fde5 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80021dc:	f7ff fadc 	bl	8001798 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 80021ec:	23cd      	movs	r3, #205	; 0xcd
 80021ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	4619      	mov	r1, r3
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <MX_TIM1_Init+0x174>)
 800221e:	f005 fdfd 	bl	8007e1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8002228:	f7ff fab6 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <MX_TIM1_Init+0x174>)
 800222e:	f000 f98b 	bl	8002548 <HAL_TIM_MspPostInit>

}
 8002232:	bf00      	nop
 8002234:	3770      	adds	r7, #112	; 0x70
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200003d0 	.word	0x200003d0
 8002240:	40012c00 	.word	0x40012c00

08002244 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224a:	f107 0310 	add.w	r3, r7, #16
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <MX_TIM2_Init+0x98>)
 8002264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002268:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MX_TIM2_Init+0x98>)
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_TIM2_Init+0x98>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1062;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <MX_TIM2_Init+0x98>)
 8002278:	f240 4226 	movw	r2, #1062	; 0x426
 800227c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_TIM2_Init+0x98>)
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_TIM2_Init+0x98>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800228a:	4814      	ldr	r0, [pc, #80]	; (80022dc <MX_TIM2_Init+0x98>)
 800228c:	f004 f820 	bl	80062d0 <HAL_TIM_Base_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002296:	f7ff fa7f 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	480d      	ldr	r0, [pc, #52]	; (80022dc <MX_TIM2_Init+0x98>)
 80022a8:	f004 fe8e 	bl	8006fc8 <HAL_TIM_ConfigClockSource>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80022b2:	f7ff fa71 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022b6:	2320      	movs	r3, #32
 80022b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_TIM2_Init+0x98>)
 80022c4:	f005 fd14 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80022ce:	f7ff fa63 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000041c 	.word	0x2000041c

080022e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	2224      	movs	r2, #36	; 0x24
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f007 ff56 	bl	800a1a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f4:	463b      	mov	r3, r7
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002300:	4a21      	ldr	r2, [pc, #132]	; (8002388 <MX_TIM3_Init+0xa8>)
 8002302:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <MX_TIM3_Init+0xa4>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002316:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <MX_TIM3_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002324:	2303      	movs	r3, #3
 8002326:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800232c:	2301      	movs	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <MX_TIM3_Init+0xa4>)
 8002350:	f004 fa72 	bl	8006838 <HAL_TIM_Encoder_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800235a:	f7ff fa1d 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <MX_TIM3_Init+0xa4>)
 800236c:	f005 fcc0 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002376:	f7ff fa0f 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3730      	adds	r7, #48	; 0x30
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000468 	.word	0x20000468
 8002388:	40000400 	.word	0x40000400

0800238c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <MX_TIM4_Init+0x98>)
 80023ac:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <MX_TIM4_Init+0x9c>)
 80023ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1700-1;
 80023b0:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <MX_TIM4_Init+0x98>)
 80023b2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80023b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_TIM4_Init+0x98>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <MX_TIM4_Init+0x98>)
 80023c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80023c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <MX_TIM4_Init+0x98>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <MX_TIM4_Init+0x98>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023d2:	4814      	ldr	r0, [pc, #80]	; (8002424 <MX_TIM4_Init+0x98>)
 80023d4:	f003 ff7c 	bl	80062d0 <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80023de:	f7ff f9db 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4619      	mov	r1, r3
 80023ee:	480d      	ldr	r0, [pc, #52]	; (8002424 <MX_TIM4_Init+0x98>)
 80023f0:	f004 fdea 	bl	8006fc8 <HAL_TIM_ConfigClockSource>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80023fa:	f7ff f9cd 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4806      	ldr	r0, [pc, #24]	; (8002424 <MX_TIM4_Init+0x98>)
 800240c:	f005 fc70 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002416:	f7ff f9bf 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200004b4 	.word	0x200004b4
 8002428:	40000800 	.word	0x40000800

0800242c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_TIM_Base_MspInit+0x8c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d10c      	bne.n	8002458 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 8002444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002448:	6613      	str	r3, [r2, #96]	; 0x60
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 800244c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002456:	e02a      	b.n	80024ae <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d10c      	bne.n	800247c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
}
 800247a:	e018      	b.n	80024ae <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_TIM_Base_MspInit+0x94>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d113      	bne.n	80024ae <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_TIM_Base_MspInit+0x90>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	201e      	movs	r0, #30
 80024a4:	f002 f986 	bl	80047b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024a8:	201e      	movs	r0, #30
 80024aa:	f002 f99d 	bl	80047e8 <HAL_NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40000800 	.word	0x40000800

080024c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_TIM_Encoder_MspInit+0x7c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d128      	bne.n	8002538 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_TIM_Encoder_MspInit+0x80>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_TIM_Encoder_MspInit+0x80>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6593      	str	r3, [r2, #88]	; 0x58
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_TIM_Encoder_MspInit+0x80>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_TIM_Encoder_MspInit+0x80>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_TIM_Encoder_MspInit+0x80>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_TIM_Encoder_MspInit+0x80>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002516:	2350      	movs	r3, #80	; 0x50
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002526:	2302      	movs	r3, #2
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f002 fc98 	bl	8004e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40000400 	.word	0x40000400
 8002544:	40021000 	.word	0x40021000

08002548 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <HAL_TIM_MspPostInit+0x68>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11d      	bne.n	80025a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_TIM_MspPostInit+0x6c>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <HAL_TIM_MspPostInit+0x6c>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_TIM_MspPostInit+0x6c>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8002582:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002586:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002594:	2306      	movs	r3, #6
 8002596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4619      	mov	r1, r3
 800259e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a2:	f002 fc61 	bl	8004e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_UART_RxCpltCallback+0x20>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80025c6:	2201      	movs	r2, #1
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_UART_RxCpltCallback+0x24>)
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <HAL_UART_RxCpltCallback+0x28>)
 80025cc:	f005 fe2a 	bl	8008224 <HAL_UART_Receive_IT>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000500 	.word	0x20000500
 80025dc:	20000504 	.word	0x20000504
 80025e0:	2000054c 	.word	0x2000054c

080025e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <MX_USART2_UART_Init+0x90>)
 80025ea:	4a23      	ldr	r2, [pc, #140]	; (8002678 <MX_USART2_UART_Init+0x94>)
 80025ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <MX_USART2_UART_Init+0x90>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <MX_USART2_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <MX_USART2_UART_Init+0x90>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <MX_USART2_UART_Init+0x90>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <MX_USART2_UART_Init+0x90>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002628:	2200      	movs	r2, #0
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800262c:	4811      	ldr	r0, [pc, #68]	; (8002674 <MX_USART2_UART_Init+0x90>)
 800262e:	f005 fd12 	bl	8008056 <HAL_UART_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002638:	f7ff f8ae 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800263c:	2100      	movs	r1, #0
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002640:	f007 fcb5 	bl	8009fae <HAL_UARTEx_SetTxFifoThreshold>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800264a:	f7ff f8a5 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800264e:	2100      	movs	r1, #0
 8002650:	4808      	ldr	r0, [pc, #32]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002652:	f007 fcea 	bl	800a02a <HAL_UARTEx_SetRxFifoThreshold>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800265c:	f7ff f89c 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <MX_USART2_UART_Init+0x90>)
 8002662:	f007 fc6b 	bl	8009f3c <HAL_UARTEx_DisableFifoMode>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800266c:	f7ff f894 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000054c 	.word	0x2000054c
 8002678:	40004400 	.word	0x40004400

0800267c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b09e      	sub	sp, #120	; 0x78
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	2254      	movs	r2, #84	; 0x54
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f007 fd7f 	bl	800a1a0 <memset>
  if(uartHandle->Instance==USART2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_UART_MspInit+0xb8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d13e      	bne.n	800272a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026ac:	2302      	movs	r3, #2
 80026ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	f107 0310 	add.w	r3, r7, #16
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fbbb 	bl	8005e34 <HAL_RCCEx_PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026c4:	f7ff f868 	bl	8001798 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_UART_MspInit+0xbc>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_UART_MspInit+0xbc>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	6593      	str	r3, [r2, #88]	; 0x58
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0xbc>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_UART_MspInit+0xbc>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_UART_MspInit+0xbc>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_UART_MspInit+0xbc>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026f8:	230c      	movs	r3, #12
 80026fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002708:	2307      	movs	r3, #7
 800270a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002710:	4619      	mov	r1, r3
 8002712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002716:	f002 fba7 	bl	8004e68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	2026      	movs	r0, #38	; 0x26
 8002720:	f002 f848 	bl	80047b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002724:	2026      	movs	r0, #38	; 0x26
 8002726:	f002 f85f 	bl	80047e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800272a:	bf00      	nop
 800272c:	3778      	adds	r7, #120	; 0x78
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40004400 	.word	0x40004400
 8002738:	40021000 	.word	0x40021000

0800273c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800273e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002740:	480d      	ldr	r0, [pc, #52]	; (8002778 <LoopForever+0x6>)
  ldr r1, =_edata
 8002742:	490e      	ldr	r1, [pc, #56]	; (800277c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <LoopForever+0xe>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002748:	e002      	b.n	8002750 <LoopCopyDataInit>

0800274a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800274c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274e:	3304      	adds	r3, #4

08002750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002754:	d3f9      	bcc.n	800274a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002758:	4c0b      	ldr	r4, [pc, #44]	; (8002788 <LoopForever+0x16>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800275c:	e001      	b.n	8002762 <LoopFillZerobss>

0800275e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002760:	3204      	adds	r2, #4

08002762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002764:	d3fb      	bcc.n	800275e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002766:	f7ff fc9d 	bl	80020a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276a:	f007 fcf5 	bl	800a158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800276e:	f7fe fdcb 	bl	8001308 <main>

08002772 <LoopForever>:

LoopForever:
    b LoopForever
 8002772:	e7fe      	b.n	8002772 <LoopForever>
  ldr   r0, =_estack
 8002774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800277c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002780:	0800da14 	.word	0x0800da14
  ldr r2, =_sbss
 8002784:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002788:	200005f0 	.word	0x200005f0

0800278c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC3_IRQHandler>

0800278e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002798:	2003      	movs	r0, #3
 800279a:	f002 f800 	bl	800479e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800279e:	200f      	movs	r0, #15
 80027a0:	f7ff fae4 	bl	8001d6c <HAL_InitTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	e001      	b.n	80027b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027b0:	f7ff fab8 	bl	8001d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027b4:	79fb      	ldrb	r3, [r7, #7]

}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_IncTick+0x1c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_IncTick+0x20>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	4a03      	ldr	r2, [pc, #12]	; (80027dc <HAL_IncTick+0x1c>)
 80027d0:	6013      	str	r3, [r2, #0]
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	200005dc 	.word	0x200005dc
 80027e0:	20000018 	.word	0x20000018

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200005dc 	.word	0x200005dc

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff ffee 	bl	80027e4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d004      	beq.n	8002820 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_Delay+0x40>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002820:	bf00      	nop
 8002822:	f7ff ffdf 	bl	80027e4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	429a      	cmp	r2, r3
 8002830:	d8f7      	bhi.n	8002822 <HAL_Delay+0x26>
  {
  }
}
 8002832:	bf00      	nop
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000018 	.word	0x20000018

08002840 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	609a      	str	r2, [r3, #8]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	609a      	str	r2, [r3, #8]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3360      	adds	r3, #96	; 0x60
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <LL_ADC_SetOffset+0x44>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028e0:	bf00      	nop
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	03fff000 	.word	0x03fff000

080028f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3360      	adds	r3, #96	; 0x60
 80028fe:	461a      	mov	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3360      	adds	r3, #96	; 0x60
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	431a      	orrs	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3360      	adds	r3, #96	; 0x60
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	615a      	str	r2, [r3, #20]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3330      	adds	r3, #48	; 0x30
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	4413      	add	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	211f      	movs	r1, #31
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	f003 011f 	and.w	r1, r3, #31
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	431a      	orrs	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3314      	adds	r3, #20
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	0e5b      	lsrs	r3, r3, #25
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	4413      	add	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	0d1b      	lsrs	r3, r3, #20
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2107      	movs	r1, #7
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	401a      	ands	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	0d1b      	lsrs	r3, r3, #20
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	431a      	orrs	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10a      	bne.n	8002b0a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002b08:	e00a      	b.n	8002b20 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b16:	43db      	mvns	r3, r3
 8002b18:	401a      	ands	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	407f0000 	.word	0x407f0000

08002b30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6093      	str	r3, [r2, #8]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba0:	d101      	bne.n	8002ba6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf0:	d101      	bne.n	8002bf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c40:	f043 0202 	orr.w	r2, r3, #2
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <LL_ADC_IsEnabled+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_ADC_IsEnabled+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d101      	bne.n	8002c92 <LL_ADC_IsDisableOngoing+0x18>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_ADC_IsDisableOngoing+0x1a>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d101      	bne.n	8002ce0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d101      	bne.n	8002d06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1af      	b.n	800308e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe f9b7 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff19 	bl	8002b8c <LL_ADC_IsDeepPowerDownEnabled>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feff 	bl	8002b68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff34 	bl	8002bdc <LL_ADC_IsInternalRegulatorEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff18 	bl	8002bb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d84:	4b9f      	ldr	r3, [pc, #636]	; (8003004 <HAL_ADC_Init+0x2f0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	4a9f      	ldr	r2, [pc, #636]	; (8003008 <HAL_ADC_Init+0x2f4>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d98:	e002      	b.n	8002da0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f9      	bne.n	8002d9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff16 	bl	8002bdc <LL_ADC_IsInternalRegulatorEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff76 	bl	8002cc8 <LL_ADC_REG_IsConversionOngoing>
 8002ddc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8148 	bne.w	800307c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 8144 	bne.w	800307c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dfc:	f043 0202 	orr.w	r2, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff23 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d141      	bne.n	8002e98 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_Init+0x114>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7a      	ldr	r2, [pc, #488]	; (800300c <HAL_ADC_Init+0x2f8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d10f      	bne.n	8002e48 <HAL_ADC_Init+0x134>
 8002e28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e2c:	f7ff ff12 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e30:	4604      	mov	r4, r0
 8002e32:	4876      	ldr	r0, [pc, #472]	; (800300c <HAL_ADC_Init+0x2f8>)
 8002e34:	f7ff ff0e 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4323      	orrs	r3, r4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e012      	b.n	8002e6e <HAL_ADC_Init+0x15a>
 8002e48:	4871      	ldr	r0, [pc, #452]	; (8003010 <HAL_ADC_Init+0x2fc>)
 8002e4a:	f7ff ff03 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4870      	ldr	r0, [pc, #448]	; (8003014 <HAL_ADC_Init+0x300>)
 8002e52:	f7ff feff 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	431c      	orrs	r4, r3
 8002e5a:	486f      	ldr	r0, [pc, #444]	; (8003018 <HAL_ADC_Init+0x304>)
 8002e5c:	f7ff fefa 	bl	8002c54 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4323      	orrs	r3, r4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e7a:	d004      	beq.n	8002e86 <HAL_ADC_Init+0x172>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a62      	ldr	r2, [pc, #392]	; (800300c <HAL_ADC_Init+0x2f8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Init+0x176>
 8002e86:	4a65      	ldr	r2, [pc, #404]	; (800301c <HAL_ADC_Init+0x308>)
 8002e88:	e000      	b.n	8002e8c <HAL_ADC_Init+0x178>
 8002e8a:	4a65      	ldr	r2, [pc, #404]	; (8003020 <HAL_ADC_Init+0x30c>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7ff fcd4 	bl	8002840 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7f5b      	ldrb	r3, [r3, #29]
 8002e9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ea8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	045b      	lsls	r3, r3, #17
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_ADC_Init+0x310>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fed2 	bl	8002cc8 <LL_ADC_REG_IsConversionOngoing>
 8002f24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fedf 	bl	8002cee <LL_ADC_INJ_IsConversionOngoing>
 8002f30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d17f      	bne.n	8003038 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d17c      	bne.n	8003038 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6911      	ldr	r1, [r2, #16]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002f9e:	e013      	b.n	8002fc8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d12a      	bne.n	8003028 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e019      	b.n	8003038 <HAL_ADC_Init+0x324>
 8003004:	20000010 	.word	0x20000010
 8003008:	053e2d63 	.word	0x053e2d63
 800300c:	50000100 	.word	0x50000100
 8003010:	50000400 	.word	0x50000400
 8003014:	50000500 	.word	0x50000500
 8003018:	50000600 	.word	0x50000600
 800301c:	50000300 	.word	0x50000300
 8003020:	50000700 	.word	0x50000700
 8003024:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10c      	bne.n	800305a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f023 010f 	bic.w	r1, r3, #15
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
 8003058:	e007      	b.n	800306a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 020f 	bic.w	r2, r2, #15
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	65da      	str	r2, [r3, #92]	; 0x5c
 800307a:	e007      	b.n	800308c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800308c:	7ffb      	ldrb	r3, [r7, #31]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}
 8003096:	bf00      	nop

08003098 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ac:	d004      	beq.n	80030b8 <HAL_ADC_Start_DMA+0x20>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5a      	ldr	r2, [pc, #360]	; (800321c <HAL_ADC_Start_DMA+0x184>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_Start_DMA+0x24>
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_ADC_Start_DMA+0x188>)
 80030ba:	e000      	b.n	80030be <HAL_ADC_Start_DMA+0x26>
 80030bc:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_ADC_Start_DMA+0x18c>)
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fd36 	bl	8002b30 <LL_ADC_GetMultimode>
 80030c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fdfc 	bl	8002cc8 <LL_ADC_REG_IsConversionOngoing>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 809b 	bne.w	800320e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Start_DMA+0x4e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e096      	b.n	8003214 <HAL_ADC_Start_DMA+0x17c>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a4d      	ldr	r2, [pc, #308]	; (8003228 <HAL_ADC_Start_DMA+0x190>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d008      	beq.n	800310a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d002      	beq.n	800310a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b09      	cmp	r3, #9
 8003108:	d17a      	bne.n	8003200 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 ff56 	bl	8003fbc <ADC_Enable>
 8003110:	4603      	mov	r3, r0
 8003112:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d16d      	bne.n	80031f6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a3a      	ldr	r2, [pc, #232]	; (800321c <HAL_ADC_Start_DMA+0x184>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_ADC_Start_DMA+0xb4>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_ADC_Start_DMA+0x194>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d002      	beq.n	8003148 <HAL_ADC_Start_DMA+0xb0>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	e003      	b.n	8003150 <HAL_ADC_Start_DMA+0xb8>
 8003148:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_ADC_Start_DMA+0x198>)
 800314a:	e001      	b.n	8003150 <HAL_ADC_Start_DMA+0xb8>
 800314c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4293      	cmp	r3, r2
 8003156:	d002      	beq.n	800315e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317a:	f023 0206 	bic.w	r2, r3, #6
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	661a      	str	r2, [r3, #96]	; 0x60
 8003182:	e002      	b.n	800318a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	4a29      	ldr	r2, [pc, #164]	; (8003234 <HAL_ADC_Start_DMA+0x19c>)
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	4a28      	ldr	r2, [pc, #160]	; (8003238 <HAL_ADC_Start_DMA+0x1a0>)
 8003198:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_ADC_Start_DMA+0x1a4>)
 80031a0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	221c      	movs	r2, #28
 80031a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0210 	orr.w	r2, r2, #16
 80031c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3340      	adds	r3, #64	; 0x40
 80031dc:	4619      	mov	r1, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f001 fbb7 	bl	8004954 <HAL_DMA_Start_IT>
 80031e6:	4603      	mov	r3, r0
 80031e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd56 	bl	8002ca0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031f4:	e00d      	b.n	8003212 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80031fe:	e008      	b.n	8003212 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800320c:	e001      	b.n	8003212 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003212:	7dfb      	ldrb	r3, [r7, #23]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	50000100 	.word	0x50000100
 8003220:	50000300 	.word	0x50000300
 8003224:	50000700 	.word	0x50000700
 8003228:	50000600 	.word	0x50000600
 800322c:	50000500 	.word	0x50000500
 8003230:	50000400 	.word	0x50000400
 8003234:	0800413f 	.word	0x0800413f
 8003238:	08004217 	.word	0x08004217
 800323c:	08004233 	.word	0x08004233

08003240 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003264:	d004      	beq.n	8003270 <HAL_ADC_IRQHandler+0x30>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a8e      	ldr	r2, [pc, #568]	; (80034a4 <HAL_ADC_IRQHandler+0x264>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_ADC_IRQHandler+0x34>
 8003270:	4b8d      	ldr	r3, [pc, #564]	; (80034a8 <HAL_ADC_IRQHandler+0x268>)
 8003272:	e000      	b.n	8003276 <HAL_ADC_IRQHandler+0x36>
 8003274:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <HAL_ADC_IRQHandler+0x26c>)
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fc5a 	bl	8002b30 <LL_ADC_GetMultimode>
 800327c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d017      	beq.n	80032b8 <HAL_ADC_IRQHandler+0x78>
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f001 f8b8 	bl	8004420 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2202      	movs	r2, #2
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_ADC_IRQHandler+0x8c>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8094 	beq.w	8003400 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 808e 	beq.w	8003400 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fb6f 	bl	80029e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d072      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a64      	ldr	r2, [pc, #400]	; (80034a4 <HAL_ADC_IRQHandler+0x264>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_ADC_IRQHandler+0xea>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a65      	ldr	r2, [pc, #404]	; (80034b0 <HAL_ADC_IRQHandler+0x270>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d002      	beq.n	8003326 <HAL_ADC_IRQHandler+0xe6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	e003      	b.n	800332e <HAL_ADC_IRQHandler+0xee>
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_ADC_IRQHandler+0x274>)
 8003328:	e001      	b.n	800332e <HAL_ADC_IRQHandler+0xee>
 800332a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	4293      	cmp	r3, r2
 8003334:	d008      	beq.n	8003348 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d002      	beq.n	8003348 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b09      	cmp	r3, #9
 8003346:	d104      	bne.n	8003352 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	623b      	str	r3, [r7, #32]
 8003350:	e014      	b.n	800337c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a53      	ldr	r2, [pc, #332]	; (80034a4 <HAL_ADC_IRQHandler+0x264>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_ADC_IRQHandler+0x130>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a53      	ldr	r2, [pc, #332]	; (80034b0 <HAL_ADC_IRQHandler+0x270>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d002      	beq.n	800336c <HAL_ADC_IRQHandler+0x12c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	e003      	b.n	8003374 <HAL_ADC_IRQHandler+0x134>
 800336c:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <HAL_ADC_IRQHandler+0x274>)
 800336e:	e001      	b.n	8003374 <HAL_ADC_IRQHandler+0x134>
 8003370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003374:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d135      	bne.n	80033f2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b08      	cmp	r3, #8
 8003392:	d12e      	bne.n	80033f2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fc95 	bl	8002cc8 <LL_ADC_REG_IsConversionOngoing>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d11a      	bne.n	80033da <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 020c 	bic.w	r2, r2, #12
 80033b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d112      	bne.n	80033f2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033d8:	e00b      	b.n	80033f2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f043 0210 	orr.w	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe f996 	bl	8001724 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	220c      	movs	r2, #12
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <HAL_ADC_IRQHandler+0x1d4>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80b3 	beq.w	8003586 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80ad 	beq.w	8003586 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fb0a 	bl	8002a62 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800344e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fac5 	bl	80029e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800345a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_ADC_IRQHandler+0x264>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_ADC_IRQHandler+0x23a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_ADC_IRQHandler+0x270>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d002      	beq.n	8003476 <HAL_ADC_IRQHandler+0x236>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	e003      	b.n	800347e <HAL_ADC_IRQHandler+0x23e>
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_ADC_IRQHandler+0x274>)
 8003478:	e001      	b.n	800347e <HAL_ADC_IRQHandler+0x23e>
 800347a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	4293      	cmp	r3, r2
 8003484:	d008      	beq.n	8003498 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b06      	cmp	r3, #6
 8003490:	d002      	beq.n	8003498 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b07      	cmp	r3, #7
 8003496:	d10f      	bne.n	80034b8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	e01f      	b.n	80034e2 <HAL_ADC_IRQHandler+0x2a2>
 80034a2:	bf00      	nop
 80034a4:	50000100 	.word	0x50000100
 80034a8:	50000300 	.word	0x50000300
 80034ac:	50000700 	.word	0x50000700
 80034b0:	50000500 	.word	0x50000500
 80034b4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a8b      	ldr	r2, [pc, #556]	; (80036ec <HAL_ADC_IRQHandler+0x4ac>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_ADC_IRQHandler+0x296>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a8a      	ldr	r2, [pc, #552]	; (80036f0 <HAL_ADC_IRQHandler+0x4b0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d002      	beq.n	80034d2 <HAL_ADC_IRQHandler+0x292>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	e003      	b.n	80034da <HAL_ADC_IRQHandler+0x29a>
 80034d2:	4b88      	ldr	r3, [pc, #544]	; (80036f4 <HAL_ADC_IRQHandler+0x4b4>)
 80034d4:	e001      	b.n	80034da <HAL_ADC_IRQHandler+0x29a>
 80034d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034da:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d047      	beq.n	8003578 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_ADC_IRQHandler+0x2c2>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03f      	beq.n	8003578 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d13a      	bne.n	8003578 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d133      	bne.n	8003578 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d12e      	bne.n	8003578 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fbe5 	bl	8002cee <LL_ADC_INJ_IsConversionOngoing>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11a      	bne.n	8003560 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003538:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d112      	bne.n	8003578 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c
 800355e:	e00b      	b.n	8003578 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	f043 0201 	orr.w	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 ff29 	bl	80043d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2260      	movs	r2, #96	; 0x60
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d011      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x374>
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f8b4 	bl	8003714 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d012      	beq.n	80035e4 <HAL_ADC_IRQHandler+0x3a4>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 ff0f 	bl	80043f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_ADC_IRQHandler+0x3d4>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 ff01 	bl	800440c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003612:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	d043      	beq.n	80036a6 <HAL_ADC_IRQHandler+0x466>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03e      	beq.n	80036a6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003630:	2301      	movs	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	e021      	b.n	800367a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003644:	d004      	beq.n	8003650 <HAL_ADC_IRQHandler+0x410>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a28      	ldr	r2, [pc, #160]	; (80036ec <HAL_ADC_IRQHandler+0x4ac>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_ADC_IRQHandler+0x414>
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <HAL_ADC_IRQHandler+0x4b8>)
 8003652:	e000      	b.n	8003656 <HAL_ADC_IRQHandler+0x416>
 8003654:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_ADC_IRQHandler+0x4bc>)
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fa78 	bl	8002b4c <LL_ADC_GetMultiDMATransfer>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003662:	2301      	movs	r3, #1
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	e008      	b.n	800367a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003676:	2301      	movs	r3, #1
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10e      	bne.n	800369e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	f043 0202 	orr.w	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f845 	bl	8003728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2210      	movs	r2, #16
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d018      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x4a2>
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d013      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	f043 0208 	orr.w	r2, r3, #8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036da:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fe81 	bl	80043e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80036e2:	bf00      	nop
 80036e4:	3728      	adds	r7, #40	; 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	50000100 	.word	0x50000100
 80036f0:	50000500 	.word	0x50000500
 80036f4:	50000400 	.word	0x50000400
 80036f8:	50000300 	.word	0x50000300
 80036fc:	50000700 	.word	0x50000700

08003700 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b0b6      	sub	sp, #216	; 0xd8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x24>
 800375a:	2302      	movs	r3, #2
 800375c:	f000 bc13 	b.w	8003f86 <HAL_ADC_ConfigChannel+0x84a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff faab 	bl	8002cc8 <LL_ADC_REG_IsConversionOngoing>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	f040 83f3 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f7ff f93f 	bl	8002a0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fa99 	bl	8002cc8 <LL_ADC_REG_IsConversionOngoing>
 8003796:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff faa5 	bl	8002cee <LL_ADC_INJ_IsConversionOngoing>
 80037a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 81d9 	bne.w	8003b64 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 81d4 	bne.w	8003b64 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c4:	d10f      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7ff f959 	bl	8002a88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f8ed 	bl	80029be <LL_ADC_SetSamplingTimeCommonConfig>
 80037e4:	e00e      	b.n	8003804 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7ff f948 	bl	8002a88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f8dd 	bl	80029be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	08db      	lsrs	r3, r3, #3
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d022      	beq.n	800386c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6919      	ldr	r1, [r3, #16]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003836:	f7ff f837 	bl	80028a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6919      	ldr	r1, [r3, #16]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	461a      	mov	r2, r3
 8003848:	f7ff f883 	bl	8002952 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6919      	ldr	r1, [r3, #16]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	7f1b      	ldrb	r3, [r3, #28]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d102      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x126>
 800385c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003860:	e000      	b.n	8003864 <HAL_ADC_ConfigChannel+0x128>
 8003862:	2300      	movs	r3, #0
 8003864:	461a      	mov	r2, r3
 8003866:	f7ff f88f 	bl	8002988 <LL_ADC_SetOffsetSaturation>
 800386a:	e17b      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff f83c 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003878:	4603      	mov	r3, r0
 800387a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x15c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f831 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	0e9b      	lsrs	r3, r3, #26
 8003892:	f003 021f 	and.w	r2, r3, #31
 8003896:	e01e      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x19a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f826 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80038c6:	2320      	movs	r3, #32
 80038c8:	e004      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80038ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x1b2>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0e9b      	lsrs	r3, r3, #26
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	e018      	b.n	8003920 <HAL_ADC_ConfigChannel+0x1e4>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800390a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003912:	2320      	movs	r3, #32
 8003914:	e004      	b.n	8003920 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003920:	429a      	cmp	r2, r3
 8003922:	d106      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2200      	movs	r2, #0
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fff5 	bl	800291c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe ffd9 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 800393e:	4603      	mov	r3, r0
 8003940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <HAL_ADC_ConfigChannel+0x222>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe ffce 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003954:	4603      	mov	r3, r0
 8003956:	0e9b      	lsrs	r3, r3, #26
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	e01e      	b.n	800399c <HAL_ADC_ConfigChannel+0x260>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe ffc3 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800397c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800398c:	2320      	movs	r3, #32
 800398e:	e004      	b.n	800399a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x278>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	0e9b      	lsrs	r3, r3, #26
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	e018      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x2aa>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80039d8:	2320      	movs	r3, #32
 80039da:	e004      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80039dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d106      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe ff92 	bl	800291c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe ff76 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x2e8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2102      	movs	r1, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe ff6b 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	0e9b      	lsrs	r3, r3, #26
 8003a1e:	f003 021f 	and.w	r2, r3, #31
 8003a22:	e01e      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x326>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2102      	movs	r1, #2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe ff60 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a52:	2320      	movs	r3, #32
 8003a54:	e004      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a5a:	fab3 f383 	clz	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x33e>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	0e9b      	lsrs	r3, r3, #26
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	e016      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x36c>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	e004      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d106      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe ff31 	bl	800291c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2103      	movs	r1, #3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe ff15 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x3aa>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ff0a 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003adc:	4603      	mov	r3, r0
 8003ade:	0e9b      	lsrs	r3, r3, #26
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	e017      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x3da>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2103      	movs	r1, #3
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe feff 	bl	80028f0 <LL_ADC_GetOffsetChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b00:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x3f2>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	0e9b      	lsrs	r3, r3, #26
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	e011      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x416>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e003      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d106      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fedc 	bl	800291c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff f873 	bl	8002c54 <LL_ADC_IsEnabled>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f040 813d 	bne.w	8003df0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f7fe ffac 	bl	8002ae0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4aa2      	ldr	r2, [pc, #648]	; (8003e18 <HAL_ADC_ConfigChannel+0x6dc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	f040 812e 	bne.w	8003df0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x480>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	3301      	adds	r3, #1
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	bf94      	ite	ls
 8003bb4:	2301      	movls	r3, #1
 8003bb6:	2300      	movhi	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e019      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x4b4>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	e003      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	2b09      	cmp	r3, #9
 8003be8:	bf94      	ite	ls
 8003bea:	2301      	movls	r3, #1
 8003bec:	2300      	movhi	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d079      	beq.n	8003ce8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x4d4>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0e9b      	lsrs	r3, r3, #26
 8003c06:	3301      	adds	r3, #1
 8003c08:	069b      	lsls	r3, r3, #26
 8003c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c0e:	e015      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x500>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c28:	2320      	movs	r3, #32
 8003c2a:	e003      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	069b      	lsls	r3, r3, #26
 8003c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x520>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	3301      	adds	r3, #1
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	e017      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x550>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c64:	fa93 f3a3 	rbit	r3, r3
 8003c68:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003c74:	2320      	movs	r3, #32
 8003c76:	e003      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2101      	movs	r1, #1
 8003c88:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8c:	ea42 0103 	orr.w	r1, r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x576>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0e9b      	lsrs	r3, r3, #26
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	4613      	mov	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4413      	add	r3, r2
 8003cae:	051b      	lsls	r3, r3, #20
 8003cb0:	e018      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x5a8>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e003      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	e07e      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x5c8>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	0e9b      	lsrs	r3, r3, #26
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	069b      	lsls	r3, r3, #26
 8003cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d02:	e015      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x5f4>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	e003      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	069b      	lsls	r3, r3, #26
 8003d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x614>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	0e9b      	lsrs	r3, r3, #26
 8003d42:	3301      	adds	r3, #1
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2101      	movs	r1, #1
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	e017      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x644>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d68:	2320      	movs	r3, #32
 8003d6a:	e003      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3301      	adds	r3, #1
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	ea42 0103 	orr.w	r1, r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10d      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x670>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0e9b      	lsrs	r3, r3, #26
 8003d96:	3301      	adds	r3, #1
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	3b1e      	subs	r3, #30
 8003da4:	051b      	lsls	r3, r3, #20
 8003da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003daa:	e01b      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x6a8>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	613b      	str	r3, [r7, #16]
  return result;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003dc4:	2320      	movs	r3, #32
 8003dc6:	e003      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b1e      	subs	r3, #30
 8003dde:	051b      	lsls	r3, r3, #20
 8003de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de4:	430b      	orrs	r3, r1
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	6892      	ldr	r2, [r2, #8]
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7fe fe4c 	bl	8002a88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <HAL_ADC_ConfigChannel+0x6e0>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80be 	beq.w	8003f7a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e06:	d004      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x6d6>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_ADC_ConfigChannel+0x6e4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10a      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x6ec>
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e14:	e009      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x6ee>
 8003e16:	bf00      	nop
 8003e18:	407f0000 	.word	0x407f0000
 8003e1c:	80080000 	.word	0x80080000
 8003e20:	50000100 	.word	0x50000100
 8003e24:	50000300 	.word	0x50000300
 8003e28:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_ADC_ConfigChannel+0x854>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fd2e 	bl	800288c <LL_ADC_GetCommonPathInternalCh>
 8003e30:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a56      	ldr	r2, [pc, #344]	; (8003f94 <HAL_ADC_ConfigChannel+0x858>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_ADC_ConfigChannel+0x70c>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a55      	ldr	r2, [pc, #340]	; (8003f98 <HAL_ADC_ConfigChannel+0x85c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d13a      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d134      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5c:	d005      	beq.n	8003e6a <HAL_ADC_ConfigChannel+0x72e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a4e      	ldr	r2, [pc, #312]	; (8003f9c <HAL_ADC_ConfigChannel+0x860>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	f040 8085 	bne.w	8003f74 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e72:	d004      	beq.n	8003e7e <HAL_ADC_ConfigChannel+0x742>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a49      	ldr	r2, [pc, #292]	; (8003fa0 <HAL_ADC_ConfigChannel+0x864>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x746>
 8003e7e:	4a49      	ldr	r2, [pc, #292]	; (8003fa4 <HAL_ADC_ConfigChannel+0x868>)
 8003e80:	e000      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x748>
 8003e82:	4a43      	ldr	r2, [pc, #268]	; (8003f90 <HAL_ADC_ConfigChannel+0x854>)
 8003e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fe fce9 	bl	8002866 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e94:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <HAL_ADC_ConfigChannel+0x86c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	4a44      	ldr	r2, [pc, #272]	; (8003fac <HAL_ADC_ConfigChannel+0x870>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	099b      	lsrs	r3, r3, #6
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eae:	e002      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f9      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ebc:	e05a      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <HAL_ADC_ConfigChannel+0x874>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d125      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x7d8>
 8003ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d11f      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <HAL_ADC_ConfigChannel+0x864>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d104      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x7ac>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <HAL_ADC_ConfigChannel+0x878>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d047      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef0:	d004      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x7c0>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <HAL_ADC_ConfigChannel+0x864>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x7c4>
 8003efc:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <HAL_ADC_ConfigChannel+0x868>)
 8003efe:	e000      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x7c6>
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_ADC_ConfigChannel+0x854>)
 8003f02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7fe fcaa 	bl	8002866 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f12:	e031      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <HAL_ADC_ConfigChannel+0x87c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d12d      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d127      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_ADC_ConfigChannel+0x864>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3c:	d004      	beq.n	8003f48 <HAL_ADC_ConfigChannel+0x80c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_ADC_ConfigChannel+0x864>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x810>
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <HAL_ADC_ConfigChannel+0x868>)
 8003f4a:	e000      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x812>
 8003f4c:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <HAL_ADC_ConfigChannel+0x854>)
 8003f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fe fc84 	bl	8002866 <LL_ADC_SetCommonPathInternalCh>
 8003f5e:	e00c      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f72:	e002      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	37d8      	adds	r7, #216	; 0xd8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	50000700 	.word	0x50000700
 8003f94:	c3210000 	.word	0xc3210000
 8003f98:	90c00010 	.word	0x90c00010
 8003f9c:	50000600 	.word	0x50000600
 8003fa0:	50000100 	.word	0x50000100
 8003fa4:	50000300 	.word	0x50000300
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	053e2d63 	.word	0x053e2d63
 8003fb0:	c7520000 	.word	0xc7520000
 8003fb4:	50000500 	.word	0x50000500
 8003fb8:	cb840000 	.word	0xcb840000

08003fbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fe43 	bl	8002c54 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d14d      	bne.n	8004070 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b28      	ldr	r3, [pc, #160]	; (800407c <ADC_Enable+0xc0>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe6:	f043 0210 	orr.w	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e039      	b.n	8004072 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fdfe 	bl	8002c04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004008:	f7fe fbec 	bl	80027e4 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800400e:	e028      	b.n	8004062 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fe1d 	bl	8002c54 <LL_ADC_IsEnabled>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe fded 	bl	8002c04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800402a:	f7fe fbdb 	bl	80027e4 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d914      	bls.n	8004062 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d00d      	beq.n	8004062 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	f043 0210 	orr.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e007      	b.n	8004072 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d1cf      	bne.n	8004010 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	8000003f 	.word	0x8000003f

08004080 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe fdf4 	bl	8002c7a <LL_ADC_IsDisableOngoing>
 8004092:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe fddb 	bl	8002c54 <LL_ADC_IsEnabled>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d047      	beq.n	8004134 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d144      	bne.n	8004134 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030d 	and.w	r3, r3, #13
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10c      	bne.n	80040d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe fdb5 	bl	8002c2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2203      	movs	r2, #3
 80040c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040ca:	f7fe fb8b 	bl	80027e4 <HAL_GetTick>
 80040ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040d0:	e029      	b.n	8004126 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	f043 0210 	orr.w	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e023      	b.n	8004136 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040ee:	f7fe fb79 	bl	80027e4 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d914      	bls.n	8004126 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	f043 0210 	orr.w	r2, r3, #16
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e007      	b.n	8004136 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1dc      	bne.n	80040ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004154:	2b00      	cmp	r3, #0
 8004156:	d14b      	bne.n	80041f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d021      	beq.n	80041b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fc34 	bl	80029e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d032      	beq.n	80041e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d12b      	bne.n	80041e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11f      	bne.n	80041e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041b4:	e018      	b.n	80041e8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d111      	bne.n	80041e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7fd fa9b 	bl	8001724 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ee:	e00e      	b.n	800420e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff fa93 	bl	8003728 <HAL_ADC_ErrorCallback>
}
 8004202:	e004      	b.n	800420e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fa6b 	bl	8003700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	f043 0204 	orr.w	r2, r3, #4
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff fa65 	bl	8003728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <LL_ADC_IsEnabled>:
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <LL_ADC_IsEnabled+0x18>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <LL_ADC_IsEnabled+0x1a>
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_StartCalibration>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800429e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_ADC_IsCalibrationOnGoing>:
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d2:	d101      	bne.n	80042d8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d101      	bne.n	80042fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_ADCEx_Calibration_Start+0x1c>
 8004324:	2302      	movs	r3, #2
 8004326:	e04d      	b.n	80043c4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fea5 	bl	8004080 <ADC_Disable>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d136      	bne.n	80043ae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004348:	f023 0302 	bic.w	r3, r3, #2
 800434c:	f043 0202 	orr.w	r2, r3, #2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff96 	bl	800428c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004360:	e014      	b.n	800438c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3301      	adds	r3, #1
 8004366:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_ADCEx_Calibration_Start+0xc0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d90d      	bls.n	800438c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004374:	f023 0312 	bic.w	r3, r3, #18
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e01b      	b.n	80043c4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff94 	bl	80042be <LL_ADC_IsCalibrationOnGoing>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e2      	bne.n	8004362 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	f023 0303 	bic.w	r3, r3, #3
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80043ac:	e005      	b.n	80043ba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	f043 0210 	orr.w	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	0004de01 	.word	0x0004de01

080043d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b0a1      	sub	sp, #132	; 0x84
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800444e:	2302      	movs	r3, #2
 8004450:	e0e7      	b.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800445a:	2300      	movs	r3, #0
 800445c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800445e:	2300      	movs	r3, #0
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800446a:	d102      	bne.n	8004472 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800446c:	4b6f      	ldr	r3, [pc, #444]	; (800462c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	e009      	b.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6e      	ldr	r2, [pc, #440]	; (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d102      	bne.n	8004482 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800447c:	4b6d      	ldr	r3, [pc, #436]	; (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	e001      	b.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0be      	b.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff ff1d 	bl	80042e6 <LL_ADC_REG_IsConversionOngoing>
 80044ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff ff17 	bl	80042e6 <LL_ADC_REG_IsConversionOngoing>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 80a0 	bne.w	8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 809c 	bne.w	8004600 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d0:	d004      	beq.n	80044dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a55      	ldr	r2, [pc, #340]	; (800462c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044dc:	4b56      	ldr	r3, [pc, #344]	; (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80044de:	e000      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044e0:	4b56      	ldr	r3, [pc, #344]	; (800463c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80044e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d04b      	beq.n	8004584 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044fe:	035b      	lsls	r3, r3, #13
 8004500:	430b      	orrs	r3, r1
 8004502:	431a      	orrs	r2, r3
 8004504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004506:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004510:	d004      	beq.n	800451c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a45      	ldr	r2, [pc, #276]	; (800462c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10f      	bne.n	800453c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800451c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004520:	f7ff fea1 	bl	8004266 <LL_ADC_IsEnabled>
 8004524:	4604      	mov	r4, r0
 8004526:	4841      	ldr	r0, [pc, #260]	; (800462c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004528:	f7ff fe9d 	bl	8004266 <LL_ADC_IsEnabled>
 800452c:	4603      	mov	r3, r0
 800452e:	4323      	orrs	r3, r4
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e012      	b.n	8004562 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800453c:	483c      	ldr	r0, [pc, #240]	; (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800453e:	f7ff fe92 	bl	8004266 <LL_ADC_IsEnabled>
 8004542:	4604      	mov	r4, r0
 8004544:	483b      	ldr	r0, [pc, #236]	; (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004546:	f7ff fe8e 	bl	8004266 <LL_ADC_IsEnabled>
 800454a:	4603      	mov	r3, r0
 800454c:	431c      	orrs	r4, r3
 800454e:	483c      	ldr	r0, [pc, #240]	; (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004550:	f7ff fe89 	bl	8004266 <LL_ADC_IsEnabled>
 8004554:	4603      	mov	r3, r0
 8004556:	4323      	orrs	r3, r4
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d056      	beq.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800456e:	f023 030f 	bic.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	6811      	ldr	r1, [r2, #0]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	430a      	orrs	r2, r1
 800457c:	431a      	orrs	r2, r3
 800457e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004580:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004582:	e047      	b.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800458e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004598:	d004      	beq.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10f      	bne.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80045a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045a8:	f7ff fe5d 	bl	8004266 <LL_ADC_IsEnabled>
 80045ac:	4604      	mov	r4, r0
 80045ae:	481f      	ldr	r0, [pc, #124]	; (800462c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045b0:	f7ff fe59 	bl	8004266 <LL_ADC_IsEnabled>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4323      	orrs	r3, r4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e012      	b.n	80045ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045c4:	481a      	ldr	r0, [pc, #104]	; (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045c6:	f7ff fe4e 	bl	8004266 <LL_ADC_IsEnabled>
 80045ca:	4604      	mov	r4, r0
 80045cc:	4819      	ldr	r0, [pc, #100]	; (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045ce:	f7ff fe4a 	bl	8004266 <LL_ADC_IsEnabled>
 80045d2:	4603      	mov	r3, r0
 80045d4:	431c      	orrs	r4, r3
 80045d6:	481a      	ldr	r0, [pc, #104]	; (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045d8:	f7ff fe45 	bl	8004266 <LL_ADC_IsEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	4323      	orrs	r3, r4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045f6:	f023 030f 	bic.w	r3, r3, #15
 80045fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045fe:	e009      	b.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004612:	e000      	b.n	8004616 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004614:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800461e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004622:	4618      	mov	r0, r3
 8004624:	3784      	adds	r7, #132	; 0x84
 8004626:	46bd      	mov	sp, r7
 8004628:	bd90      	pop	{r4, r7, pc}
 800462a:	bf00      	nop
 800462c:	50000100 	.word	0x50000100
 8004630:	50000400 	.word	0x50000400
 8004634:	50000500 	.word	0x50000500
 8004638:	50000300 	.word	0x50000300
 800463c:	50000700 	.word	0x50000700
 8004640:	50000600 	.word	0x50000600

08004644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <__NVIC_SetPriorityGrouping+0x44>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004660:	4013      	ands	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800466c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004676:	4a04      	ldr	r2, [pc, #16]	; (8004688 <__NVIC_SetPriorityGrouping+0x44>)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	60d3      	str	r3, [r2, #12]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004690:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	f003 0307 	and.w	r3, r3, #7
}
 800469a:	4618      	mov	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	db0b      	blt.n	80046d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	f003 021f 	and.w	r2, r3, #31
 80046c0:	4907      	ldr	r1, [pc, #28]	; (80046e0 <__NVIC_EnableIRQ+0x38>)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2001      	movs	r0, #1
 80046ca:	fa00 f202 	lsl.w	r2, r0, r2
 80046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	e000e100 	.word	0xe000e100

080046e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	db0a      	blt.n	800470e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	490c      	ldr	r1, [pc, #48]	; (8004730 <__NVIC_SetPriority+0x4c>)
 80046fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004702:	0112      	lsls	r2, r2, #4
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	440b      	add	r3, r1
 8004708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800470c:	e00a      	b.n	8004724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4908      	ldr	r1, [pc, #32]	; (8004734 <__NVIC_SetPriority+0x50>)
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	3b04      	subs	r3, #4
 800471c:	0112      	lsls	r2, r2, #4
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	440b      	add	r3, r1
 8004722:	761a      	strb	r2, [r3, #24]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	e000e100 	.word	0xe000e100
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f1c3 0307 	rsb	r3, r3, #7
 8004752:	2b04      	cmp	r3, #4
 8004754:	bf28      	it	cs
 8004756:	2304      	movcs	r3, #4
 8004758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3304      	adds	r3, #4
 800475e:	2b06      	cmp	r3, #6
 8004760:	d902      	bls.n	8004768 <NVIC_EncodePriority+0x30>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3b03      	subs	r3, #3
 8004766:	e000      	b.n	800476a <NVIC_EncodePriority+0x32>
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476c:	f04f 32ff 	mov.w	r2, #4294967295
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	401a      	ands	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004780:	f04f 31ff 	mov.w	r1, #4294967295
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	43d9      	mvns	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	4313      	orrs	r3, r2
         );
}
 8004792:	4618      	mov	r0, r3
 8004794:	3724      	adds	r7, #36	; 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ff4c 	bl	8004644 <__NVIC_SetPriorityGrouping>
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047c2:	f7ff ff63 	bl	800468c <__NVIC_GetPriorityGrouping>
 80047c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f7ff ffb3 	bl	8004738 <NVIC_EncodePriority>
 80047d2:	4602      	mov	r2, r0
 80047d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ff82 	bl	80046e4 <__NVIC_SetPriority>
}
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff ff56 	bl	80046a8 <__NVIC_EnableIRQ>
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e08d      	b.n	8004932 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	4b47      	ldr	r3, [pc, #284]	; (800493c <HAL_DMA_Init+0x138>)
 800481e:	429a      	cmp	r2, r3
 8004820:	d80f      	bhi.n	8004842 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	4b45      	ldr	r3, [pc, #276]	; (8004940 <HAL_DMA_Init+0x13c>)
 800482a:	4413      	add	r3, r2
 800482c:	4a45      	ldr	r2, [pc, #276]	; (8004944 <HAL_DMA_Init+0x140>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	009a      	lsls	r2, r3, #2
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a42      	ldr	r2, [pc, #264]	; (8004948 <HAL_DMA_Init+0x144>)
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
 8004840:	e00e      	b.n	8004860 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	4b40      	ldr	r3, [pc, #256]	; (800494c <HAL_DMA_Init+0x148>)
 800484a:	4413      	add	r3, r2
 800484c:	4a3d      	ldr	r2, [pc, #244]	; (8004944 <HAL_DMA_Init+0x140>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	009a      	lsls	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a3c      	ldr	r2, [pc, #240]	; (8004950 <HAL_DMA_Init+0x14c>)
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa76 	bl	8004da4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c0:	d102      	bne.n	80048c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d010      	beq.n	8004908 <HAL_DMA_Init+0x104>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d80c      	bhi.n	8004908 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa96 	bl	8004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	e008      	b.n	800491a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40020407 	.word	0x40020407
 8004940:	bffdfff8 	.word	0xbffdfff8
 8004944:	cccccccd 	.word	0xcccccccd
 8004948:	40020000 	.word	0x40020000
 800494c:	bffdfbf8 	.word	0xbffdfbf8
 8004950:	40020400 	.word	0x40020400

08004954 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_DMA_Start_IT+0x20>
 8004970:	2302      	movs	r3, #2
 8004972:	e066      	b.n	8004a42 <HAL_DMA_Start_IT+0xee>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d155      	bne.n	8004a34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f9bb 	bl	8004d28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 020e 	orr.w	r2, r2, #14
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e00f      	b.n	80049ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0204 	bic.w	r2, r2, #4
 80049da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 020a 	orr.w	r2, r2, #10
 80049ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e005      	b.n	8004a40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d005      	beq.n	8004a6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2204      	movs	r2, #4
 8004a66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e037      	b.n	8004ade <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 020e 	bic.w	r2, r2, #14
 8004a7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f003 021f 	and.w	r2, r3, #31
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ad2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004adc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d00d      	beq.n	8004b30 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2204      	movs	r2, #4
 8004b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
 8004b2e:	e047      	b.n	8004bc0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 020e 	bic.w	r2, r2, #14
 8004b3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	f003 021f 	and.w	r2, r3, #31
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4798      	blx	r3
    }
  }
  return status;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2204      	movs	r2, #4
 8004bec:	409a      	lsls	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d026      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x7a>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d021      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	f003 021f 	and.w	r2, r3, #31
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d071      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c42:	e06c      	b.n	8004d1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02e      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d029      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 020a 	bic.w	r2, r2, #10
 8004c7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2102      	movs	r1, #2
 8004c96:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d038      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004cb4:	e033      	b.n	8004d1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d02a      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d025      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 020e 	bic.w	r2, r2, #14
 8004ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	f003 021f 	and.w	r2, r3, #31
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
}
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f003 021f 	and.w	r2, r3, #31
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2101      	movs	r1, #1
 8004d60:	fa01 f202 	lsl.w	r2, r1, r2
 8004d64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d108      	bne.n	8004d88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d86:	e007      	b.n	8004d98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	60da      	str	r2, [r3, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d802      	bhi.n	8004dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e001      	b.n	8004dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004dc0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	3b08      	subs	r3, #8
 8004dce:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	009a      	lsls	r2, r3, #2
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004dee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2201      	movs	r2, #1
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40020407 	.word	0x40020407
 8004e10:	40020800 	.word	0x40020800
 8004e14:	40020820 	.word	0x40020820
 8004e18:	cccccccd 	.word	0xcccccccd
 8004e1c:	40020880 	.word	0x40020880

08004e20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e42:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	1000823f 	.word	0x1000823f
 8004e64:	40020940 	.word	0x40020940

08004e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e76:	e15a      	b.n	800512e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	fa01 f303 	lsl.w	r3, r1, r3
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 814c 	beq.w	8005128 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d005      	beq.n	8004ea8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d130      	bne.n	8004f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ede:	2201      	movs	r2, #1
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4013      	ands	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 0201 	and.w	r2, r3, #1
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d017      	beq.n	8004f46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	2203      	movs	r2, #3
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43db      	mvns	r3, r3
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d123      	bne.n	8004f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	08da      	lsrs	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3208      	adds	r2, #8
 8004f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	220f      	movs	r2, #15
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	08da      	lsrs	r2, r3, #3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3208      	adds	r2, #8
 8004f94:	6939      	ldr	r1, [r7, #16]
 8004f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0203 	and.w	r2, r3, #3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80a6 	beq.w	8005128 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fdc:	4b5b      	ldr	r3, [pc, #364]	; (800514c <HAL_GPIO_Init+0x2e4>)
 8004fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe0:	4a5a      	ldr	r2, [pc, #360]	; (800514c <HAL_GPIO_Init+0x2e4>)
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6613      	str	r3, [r2, #96]	; 0x60
 8004fe8:	4b58      	ldr	r3, [pc, #352]	; (800514c <HAL_GPIO_Init+0x2e4>)
 8004fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ff4:	4a56      	ldr	r2, [pc, #344]	; (8005150 <HAL_GPIO_Init+0x2e8>)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	089b      	lsrs	r3, r3, #2
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	220f      	movs	r2, #15
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4013      	ands	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800501e:	d01f      	beq.n	8005060 <HAL_GPIO_Init+0x1f8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a4c      	ldr	r2, [pc, #304]	; (8005154 <HAL_GPIO_Init+0x2ec>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d019      	beq.n	800505c <HAL_GPIO_Init+0x1f4>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a4b      	ldr	r2, [pc, #300]	; (8005158 <HAL_GPIO_Init+0x2f0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <HAL_GPIO_Init+0x1f0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a4a      	ldr	r2, [pc, #296]	; (800515c <HAL_GPIO_Init+0x2f4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00d      	beq.n	8005054 <HAL_GPIO_Init+0x1ec>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a49      	ldr	r2, [pc, #292]	; (8005160 <HAL_GPIO_Init+0x2f8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <HAL_GPIO_Init+0x1e8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a48      	ldr	r2, [pc, #288]	; (8005164 <HAL_GPIO_Init+0x2fc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d101      	bne.n	800504c <HAL_GPIO_Init+0x1e4>
 8005048:	2305      	movs	r3, #5
 800504a:	e00a      	b.n	8005062 <HAL_GPIO_Init+0x1fa>
 800504c:	2306      	movs	r3, #6
 800504e:	e008      	b.n	8005062 <HAL_GPIO_Init+0x1fa>
 8005050:	2304      	movs	r3, #4
 8005052:	e006      	b.n	8005062 <HAL_GPIO_Init+0x1fa>
 8005054:	2303      	movs	r3, #3
 8005056:	e004      	b.n	8005062 <HAL_GPIO_Init+0x1fa>
 8005058:	2302      	movs	r3, #2
 800505a:	e002      	b.n	8005062 <HAL_GPIO_Init+0x1fa>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_GPIO_Init+0x1fa>
 8005060:	2300      	movs	r3, #0
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	f002 0203 	and.w	r2, r2, #3
 8005068:	0092      	lsls	r2, r2, #2
 800506a:	4093      	lsls	r3, r2
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005072:	4937      	ldr	r1, [pc, #220]	; (8005150 <HAL_GPIO_Init+0x2e8>)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	089b      	lsrs	r3, r3, #2
 8005078:	3302      	adds	r3, #2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005080:	4b39      	ldr	r3, [pc, #228]	; (8005168 <HAL_GPIO_Init+0x300>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	43db      	mvns	r3, r3
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4013      	ands	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050a4:	4a30      	ldr	r2, [pc, #192]	; (8005168 <HAL_GPIO_Init+0x300>)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_GPIO_Init+0x300>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	43db      	mvns	r3, r3
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050ce:	4a26      	ldr	r2, [pc, #152]	; (8005168 <HAL_GPIO_Init+0x300>)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_GPIO_Init+0x300>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	43db      	mvns	r3, r3
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4013      	ands	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <HAL_GPIO_Init+0x300>)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <HAL_GPIO_Init+0x300>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	43db      	mvns	r3, r3
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4013      	ands	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005122:	4a11      	ldr	r2, [pc, #68]	; (8005168 <HAL_GPIO_Init+0x300>)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	3301      	adds	r3, #1
 800512c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	f47f ae9d 	bne.w	8004e78 <HAL_GPIO_Init+0x10>
  }
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40021000 	.word	0x40021000
 8005150:	40010000 	.word	0x40010000
 8005154:	48000400 	.word	0x48000400
 8005158:	48000800 	.word	0x48000800
 800515c:	48000c00 	.word	0x48000c00
 8005160:	48001000 	.word	0x48001000
 8005164:	48001400 	.word	0x48001400
 8005168:	40010400 	.word	0x40010400

0800516c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	807b      	strh	r3, [r7, #2]
 8005178:	4613      	mov	r3, r2
 800517a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800517c:	787b      	ldrb	r3, [r7, #1]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005182:	887a      	ldrh	r2, [r7, #2]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005188:	e002      	b.n	8005190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800518a:	887a      	ldrh	r2, [r7, #2]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4013      	ands	r3, r2
 80051b4:	041a      	lsls	r2, r3, #16
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	43d9      	mvns	r1, r3
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	400b      	ands	r3, r1
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	619a      	str	r2, [r3, #24]
}
 80051c4:	bf00      	nop
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051e6:	4a05      	ldr	r2, [pc, #20]	; (80051fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc fa7a 	bl	80016e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40010400 	.word	0x40010400

08005200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d141      	bne.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800520e:	4b4b      	ldr	r3, [pc, #300]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d131      	bne.n	8005280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800521c:	4b47      	ldr	r3, [pc, #284]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005222:	4a46      	ldr	r2, [pc, #280]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800522c:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005234:	4a41      	ldr	r2, [pc, #260]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800523a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800523c:	4b40      	ldr	r3, [pc, #256]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2232      	movs	r2, #50	; 0x32
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	4a3f      	ldr	r2, [pc, #252]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	0c9b      	lsrs	r3, r3, #18
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005252:	e002      	b.n	800525a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3b01      	subs	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005266:	d102      	bne.n	800526e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f2      	bne.n	8005254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800526e:	4b33      	ldr	r3, [pc, #204]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527a:	d158      	bne.n	800532e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e057      	b.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005280:	4b2e      	ldr	r3, [pc, #184]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005286:	4a2d      	ldr	r2, [pc, #180]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005290:	e04d      	b.n	800532e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005298:	d141      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800529a:	4b28      	ldr	r3, [pc, #160]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	d131      	bne.n	800530c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a8:	4b24      	ldr	r3, [pc, #144]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ae:	4a23      	ldr	r2, [pc, #140]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052b8:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2232      	movs	r2, #50	; 0x32
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	0c9b      	lsrs	r3, r3, #18
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052de:	e002      	b.n	80052e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f2:	d102      	bne.n	80052fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f2      	bne.n	80052e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005306:	d112      	bne.n	800532e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e011      	b.n	8005330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800531c:	e007      	b.n	800532e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005326:	4a05      	ldr	r2, [pc, #20]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800532c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40007000 	.word	0x40007000
 8005340:	20000010 	.word	0x20000010
 8005344:	431bde83 	.word	0x431bde83

08005348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a04      	ldr	r2, [pc, #16]	; (8005364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005356:	6093      	str	r3, [r2, #8]
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40007000 	.word	0x40007000

08005368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e306      	b.n	8005988 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d075      	beq.n	8005472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005386:	4b97      	ldr	r3, [pc, #604]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005390:	4b94      	ldr	r3, [pc, #592]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d102      	bne.n	80053a6 <HAL_RCC_OscConfig+0x3e>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d002      	beq.n	80053ac <HAL_RCC_OscConfig+0x44>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	4b8d      	ldr	r3, [pc, #564]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05b      	beq.n	8005470 <HAL_RCC_OscConfig+0x108>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d157      	bne.n	8005470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e2e1      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	d106      	bne.n	80053dc <HAL_RCC_OscConfig+0x74>
 80053ce:	4b85      	ldr	r3, [pc, #532]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a84      	ldr	r2, [pc, #528]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e01d      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x98>
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a7e      	ldr	r2, [pc, #504]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80053ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4b7c      	ldr	r3, [pc, #496]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a7b      	ldr	r2, [pc, #492]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 8005400:	4b78      	ldr	r3, [pc, #480]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a77      	ldr	r2, [pc, #476]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	4b75      	ldr	r3, [pc, #468]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a74      	ldr	r2, [pc, #464]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fd f9e0 	bl	80027e4 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005428:	f7fd f9dc 	bl	80027e4 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e2a6      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543a:	4b6a      	ldr	r3, [pc, #424]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0xc0>
 8005446:	e014      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd f9cc 	bl	80027e4 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005450:	f7fd f9c8 	bl	80027e4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e292      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005462:	4b60      	ldr	r3, [pc, #384]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0xe8>
 800546e:	e000      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d075      	beq.n	800556a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547e:	4b59      	ldr	r3, [pc, #356]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005488:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b0c      	cmp	r3, #12
 8005496:	d102      	bne.n	800549e <HAL_RCC_OscConfig+0x136>
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d002      	beq.n	80054a4 <HAL_RCC_OscConfig+0x13c>
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11f      	bne.n	80054e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a4:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_RCC_OscConfig+0x154>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e265      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	4946      	ldr	r1, [pc, #280]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054d0:	4b45      	ldr	r3, [pc, #276]	; (80055e8 <HAL_RCC_OscConfig+0x280>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fc fc49 	bl	8001d6c <HAL_InitTick>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d043      	beq.n	8005568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e251      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d023      	beq.n	8005534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ec:	4b3d      	ldr	r3, [pc, #244]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a3c      	ldr	r2, [pc, #240]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80054f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd f974 	bl	80027e4 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005500:	f7fd f970 	bl	80027e4 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e23a      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005512:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551e:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	492d      	ldr	r1, [pc, #180]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	604b      	str	r3, [r1, #4]
 8005532:	e01a      	b.n	800556a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 800553a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800553e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fd f950 	bl	80027e4 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005548:	f7fd f94c 	bl	80027e4 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e216      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800555a:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x1e0>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d041      	beq.n	80055fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01c      	beq.n	80055b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005584:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558e:	f7fd f929 	bl	80027e4 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005596:	f7fd f925 	bl	80027e4 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e1ef      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80055aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0ef      	beq.n	8005596 <HAL_RCC_OscConfig+0x22e>
 80055b6:	e020      	b.n	80055fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <HAL_RCC_OscConfig+0x27c>)
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c8:	f7fd f90c 	bl	80027e4 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055ce:	e00d      	b.n	80055ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d0:	f7fd f908 	bl	80027e4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d906      	bls.n	80055ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e1d2      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055ec:	4b8c      	ldr	r3, [pc, #560]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80055ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1ea      	bne.n	80055d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 80a6 	beq.w	8005754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800560c:	4b84      	ldr	r3, [pc, #528]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 800560e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_RCC_OscConfig+0x2b4>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <HAL_RCC_OscConfig+0x2b6>
 800561c:	2300      	movs	r3, #0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005622:	4b7f      	ldr	r3, [pc, #508]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	4a7e      	ldr	r2, [pc, #504]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562c:	6593      	str	r3, [r2, #88]	; 0x58
 800562e:	4b7c      	ldr	r3, [pc, #496]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800563a:	2301      	movs	r3, #1
 800563c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800563e:	4b79      	ldr	r3, [pc, #484]	; (8005824 <HAL_RCC_OscConfig+0x4bc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d118      	bne.n	800567c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800564a:	4b76      	ldr	r3, [pc, #472]	; (8005824 <HAL_RCC_OscConfig+0x4bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a75      	ldr	r2, [pc, #468]	; (8005824 <HAL_RCC_OscConfig+0x4bc>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005656:	f7fd f8c5 	bl	80027e4 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565e:	f7fd f8c1 	bl	80027e4 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e18b      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005670:	4b6c      	ldr	r3, [pc, #432]	; (8005824 <HAL_RCC_OscConfig+0x4bc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f0      	beq.n	800565e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d108      	bne.n	8005696 <HAL_RCC_OscConfig+0x32e>
 8005684:	4b66      	ldr	r3, [pc, #408]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	4a65      	ldr	r2, [pc, #404]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005694:	e024      	b.n	80056e0 <HAL_RCC_OscConfig+0x378>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b05      	cmp	r3, #5
 800569c:	d110      	bne.n	80056c0 <HAL_RCC_OscConfig+0x358>
 800569e:	4b60      	ldr	r3, [pc, #384]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	4a5e      	ldr	r2, [pc, #376]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056a6:	f043 0304 	orr.w	r3, r3, #4
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ae:	4b5c      	ldr	r3, [pc, #368]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	4a5a      	ldr	r2, [pc, #360]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056be:	e00f      	b.n	80056e0 <HAL_RCC_OscConfig+0x378>
 80056c0:	4b57      	ldr	r3, [pc, #348]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	4a56      	ldr	r2, [pc, #344]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d0:	4b53      	ldr	r3, [pc, #332]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d6:	4a52      	ldr	r2, [pc, #328]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d016      	beq.n	8005716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fd f87c 	bl	80027e4 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fd f878 	bl	80027e4 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e140      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005706:	4b46      	ldr	r3, [pc, #280]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ed      	beq.n	80056f0 <HAL_RCC_OscConfig+0x388>
 8005714:	e015      	b.n	8005742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005716:	f7fd f865 	bl	80027e4 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fd f861 	bl	80027e4 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f241 3288 	movw	r2, #5000	; 0x1388
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e129      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005734:	4b3a      	ldr	r3, [pc, #232]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ed      	bne.n	800571e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005742:	7ffb      	ldrb	r3, [r7, #31]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d105      	bne.n	8005754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005748:	4b35      	ldr	r3, [pc, #212]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	4a34      	ldr	r2, [pc, #208]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 800574e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005752:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d03c      	beq.n	80057da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005768:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 800576a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fd f834 	bl	80027e4 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005780:	f7fd f830 	bl	80027e4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e0fa      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005792:	4b23      	ldr	r3, [pc, #140]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ef      	beq.n	8005780 <HAL_RCC_OscConfig+0x418>
 80057a0:	e01b      	b.n	80057da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057a2:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80057a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a8:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fd f817 	bl	80027e4 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ba:	f7fd f813 	bl	80027e4 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0dd      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80057ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ef      	bne.n	80057ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80d1 	beq.w	8005986 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b0c      	cmp	r3, #12
 80057ee:	f000 808b 	beq.w	8005908 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d15e      	bne.n	80058b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a08      	ldr	r2, [pc, #32]	; (8005820 <HAL_RCC_OscConfig+0x4b8>)
 8005800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fc ffed 	bl	80027e4 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	e00c      	b.n	8005828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fc ffe9 	bl	80027e4 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d905      	bls.n	8005828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e0b3      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005828:	4b59      	ldr	r3, [pc, #356]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ec      	bne.n	800580e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005834:	4b56      	ldr	r3, [pc, #344]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	4b56      	ldr	r3, [pc, #344]	; (8005994 <HAL_RCC_OscConfig+0x62c>)
 800583a:	4013      	ands	r3, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6a11      	ldr	r1, [r2, #32]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005844:	3a01      	subs	r2, #1
 8005846:	0112      	lsls	r2, r2, #4
 8005848:	4311      	orrs	r1, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800584e:	0212      	lsls	r2, r2, #8
 8005850:	4311      	orrs	r1, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005856:	0852      	lsrs	r2, r2, #1
 8005858:	3a01      	subs	r2, #1
 800585a:	0552      	lsls	r2, r2, #21
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005862:	0852      	lsrs	r2, r2, #1
 8005864:	3a01      	subs	r2, #1
 8005866:	0652      	lsls	r2, r2, #25
 8005868:	4311      	orrs	r1, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800586e:	06d2      	lsls	r2, r2, #27
 8005870:	430a      	orrs	r2, r1
 8005872:	4947      	ldr	r1, [pc, #284]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 8005874:	4313      	orrs	r3, r2
 8005876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005878:	4b45      	ldr	r3, [pc, #276]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a44      	ldr	r2, [pc, #272]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 800587e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005884:	4b42      	ldr	r3, [pc, #264]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4a41      	ldr	r2, [pc, #260]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 800588a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800588e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fc ffa8 	bl	80027e4 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fc ffa4 	bl	80027e4 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e06e      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058aa:	4b39      	ldr	r3, [pc, #228]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0x530>
 80058b6:	e066      	b.n	8005986 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b8:	4b35      	ldr	r3, [pc, #212]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a34      	ldr	r2, [pc, #208]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a31      	ldr	r2, [pc, #196]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058d0:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4a2e      	ldr	r2, [pc, #184]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fc ff80 	bl	80027e4 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e8:	f7fc ff7c 	bl	80027e4 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e046      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058fa:	4b25      	ldr	r3, [pc, #148]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x580>
 8005906:	e03e      	b.n	8005986 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e039      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005914:	4b1e      	ldr	r3, [pc, #120]	; (8005990 <HAL_RCC_OscConfig+0x628>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f003 0203 	and.w	r2, r3, #3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	429a      	cmp	r2, r3
 8005926:	d12c      	bne.n	8005982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	3b01      	subs	r3, #1
 8005934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d123      	bne.n	8005982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d11b      	bne.n	8005982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005956:	429a      	cmp	r2, r3
 8005958:	d113      	bne.n	8005982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	3b01      	subs	r3, #1
 8005968:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800596a:	429a      	cmp	r2, r3
 800596c:	d109      	bne.n	8005982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	3b01      	subs	r3, #1
 800597c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d001      	beq.n	8005986 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000
 8005994:	019f800c 	.word	0x019f800c

08005998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e11e      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b0:	4b91      	ldr	r3, [pc, #580]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d910      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b8e      	ldr	r3, [pc, #568]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 020f 	bic.w	r2, r3, #15
 80059c6:	498c      	ldr	r1, [pc, #560]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b8a      	ldr	r3, [pc, #552]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e106      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d073      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d129      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f4:	4b81      	ldr	r3, [pc, #516]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0f4      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a04:	f000 f9d0 	bl	8005da8 <RCC_GetSysClockFreqFromPLLSource>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4a7c      	ldr	r2, [pc, #496]	; (8005c00 <HAL_RCC_ClockConfig+0x268>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d93f      	bls.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a12:	4b7a      	ldr	r3, [pc, #488]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d033      	beq.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d12f      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a32:	4b72      	ldr	r3, [pc, #456]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3a:	4a70      	ldr	r2, [pc, #448]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e024      	b.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a50:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0c6      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a60:	4b66      	ldr	r3, [pc, #408]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0be      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a70:	f000 f8ce 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4a61      	ldr	r2, [pc, #388]	; (8005c00 <HAL_RCC_ClockConfig+0x268>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d909      	bls.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a7e:	4b5f      	ldr	r3, [pc, #380]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a86:	4a5d      	ldr	r2, [pc, #372]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a92:	4b5a      	ldr	r3, [pc, #360]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f023 0203 	bic.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4957      	ldr	r1, [pc, #348]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa4:	f7fc fe9e 	bl	80027e4 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aac:	f7fc fe9a 	bl	80027e4 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e095      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	4b4e      	ldr	r3, [pc, #312]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 020c 	and.w	r2, r3, #12
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1eb      	bne.n	8005aac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d023      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aec:	4b43      	ldr	r3, [pc, #268]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a42      	ldr	r2, [pc, #264]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005af6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b04:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b0c:	4a3b      	ldr	r2, [pc, #236]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b14:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	4936      	ldr	r1, [pc, #216]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b80      	cmp	r3, #128	; 0x80
 8005b2c:	d105      	bne.n	8005b3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b2e:	4b33      	ldr	r3, [pc, #204]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4a32      	ldr	r2, [pc, #200]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3a:	4b2f      	ldr	r3, [pc, #188]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d21d      	bcs.n	8005b84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b48:	4b2b      	ldr	r3, [pc, #172]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f023 020f 	bic.w	r2, r3, #15
 8005b50:	4929      	ldr	r1, [pc, #164]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b58:	f7fc fe44 	bl	80027e4 <HAL_GetTick>
 8005b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7fc fe40 	bl	80027e4 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e03b      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d1ed      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4917      	ldr	r1, [pc, #92]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	490f      	ldr	r1, [pc, #60]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bc2:	f000 f825 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	490c      	ldr	r1, [pc, #48]	; (8005c04 <HAL_RCC_ClockConfig+0x26c>)
 8005bd4:	5ccb      	ldrb	r3, [r1, r3]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	fa22 f303 	lsr.w	r3, r2, r3
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x270>)
 8005be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_RCC_ClockConfig+0x274>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fc f8c0 	bl	8001d6c <HAL_InitTick>
 8005bec:	4603      	mov	r3, r0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40022000 	.word	0x40022000
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	04c4b400 	.word	0x04c4b400
 8005c04:	0800d584 	.word	0x0800d584
 8005c08:	20000010 	.word	0x20000010
 8005c0c:	20000014 	.word	0x20000014

08005c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c16:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d102      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e047      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c28:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d102      	bne.n	8005c3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c34:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	e03e      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c3a:	4b23      	ldr	r3, [pc, #140]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	2b0c      	cmp	r3, #12
 8005c44:	d136      	bne.n	8005cb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c50:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c64:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c6e:	68d2      	ldr	r2, [r2, #12]
 8005c70:	0a12      	lsrs	r2, r2, #8
 8005c72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	617b      	str	r3, [r7, #20]
      break;
 8005c7c:	e00c      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c88:	68d2      	ldr	r2, [r2, #12]
 8005c8a:	0a12      	lsrs	r2, r2, #8
 8005c8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]
      break;
 8005c96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	0e5b      	lsrs	r3, r3, #25
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e001      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cb8:	693b      	ldr	r3, [r7, #16]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	00f42400 	.word	0x00f42400
 8005cd0:	016e3600 	.word	0x016e3600

08005cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000010 	.word	0x20000010

08005cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cf0:	f7ff fff0 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4904      	ldr	r1, [pc, #16]	; (8005d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d02:	5ccb      	ldrb	r3, [r1, r3]
 8005d04:	f003 031f 	and.w	r3, r3, #31
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000
 8005d14:	0800d594 	.word	0x0800d594

08005d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d1c:	f7ff ffda 	bl	8005cd4 <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	0adb      	lsrs	r3, r3, #11
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4904      	ldr	r1, [pc, #16]	; (8005d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	0800d594 	.word	0x0800d594

08005d44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	220f      	movs	r2, #15
 8005d52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HAL_RCC_GetClockConfig+0x5c>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0203 	and.w	r2, r3, #3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <HAL_RCC_GetClockConfig+0x5c>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <HAL_RCC_GetClockConfig+0x5c>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005d78:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCC_GetClockConfig+0x5c>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	08db      	lsrs	r3, r3, #3
 8005d7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <HAL_RCC_GetClockConfig+0x60>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 020f 	and.w	r2, r3, #15
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	601a      	str	r2, [r3, #0]
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40022000 	.word	0x40022000

08005da8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dae:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005db8:	4b1b      	ldr	r3, [pc, #108]	; (8005e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d10c      	bne.n	8005de6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dcc:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dd6:	68d2      	ldr	r2, [r2, #12]
 8005dd8:	0a12      	lsrs	r2, r2, #8
 8005dda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	617b      	str	r3, [r7, #20]
    break;
 8005de4:	e00c      	b.n	8005e00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de6:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	4a0e      	ldr	r2, [pc, #56]	; (8005e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df0:	68d2      	ldr	r2, [r2, #12]
 8005df2:	0a12      	lsrs	r2, r2, #8
 8005df4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]
    break;
 8005dfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e00:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	0e5b      	lsrs	r3, r3, #25
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e1a:	687b      	ldr	r3, [r7, #4]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	016e3600 	.word	0x016e3600
 8005e30:	00f42400 	.word	0x00f42400

08005e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e40:	2300      	movs	r3, #0
 8005e42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8098 	beq.w	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e52:	2300      	movs	r3, #0
 8005e54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e56:	4b43      	ldr	r3, [pc, #268]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e62:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005e6e:	4b3d      	ldr	r3, [pc, #244]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e7e:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a39      	ldr	r2, [pc, #228]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e8a:	f7fc fcab 	bl	80027e4 <HAL_GetTick>
 8005e8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e90:	e009      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e92:	f7fc fca7 	bl	80027e4 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d902      	bls.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	74fb      	strb	r3, [r7, #19]
        break;
 8005ea4:	e005      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea6:	4b30      	ldr	r3, [pc, #192]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0ef      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005eb2:	7cfb      	ldrb	r3, [r7, #19]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d159      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eb8:	4b2a      	ldr	r3, [pc, #168]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01e      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d019      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ed4:	4b23      	ldr	r3, [pc, #140]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ede:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ee0:	4b20      	ldr	r3, [pc, #128]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ef0:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f00:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fc fc67 	bl	80027e4 <HAL_GetTick>
 8005f16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f18:	e00b      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1a:	f7fc fc63 	bl	80027e4 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d902      	bls.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	74fb      	strb	r3, [r7, #19]
            break;
 8005f30:	e006      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ec      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f40:	7cfb      	ldrb	r3, [r7, #19]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f46:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	4903      	ldr	r1, [pc, #12]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f5c:	e008      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f5e:	7cfb      	ldrb	r3, [r7, #19]
 8005f60:	74bb      	strb	r3, [r7, #18]
 8005f62:	e005      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6c:	7cfb      	ldrb	r3, [r7, #19]
 8005f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f70:	7c7b      	ldrb	r3, [r7, #17]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f76:	4ba7      	ldr	r3, [pc, #668]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	4aa6      	ldr	r2, [pc, #664]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f8e:	4ba1      	ldr	r3, [pc, #644]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f023 0203 	bic.w	r2, r3, #3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	499d      	ldr	r1, [pc, #628]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb0:	4b98      	ldr	r3, [pc, #608]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f023 020c 	bic.w	r2, r3, #12
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	4995      	ldr	r1, [pc, #596]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fd2:	4b90      	ldr	r3, [pc, #576]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	498c      	ldr	r1, [pc, #560]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ff4:	4b87      	ldr	r3, [pc, #540]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	4984      	ldr	r1, [pc, #528]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006016:	4b7f      	ldr	r3, [pc, #508]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	497b      	ldr	r1, [pc, #492]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006038:	4b76      	ldr	r3, [pc, #472]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	4973      	ldr	r1, [pc, #460]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800605a:	4b6e      	ldr	r3, [pc, #440]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	496a      	ldr	r1, [pc, #424]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800607c:	4b65      	ldr	r3, [pc, #404]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	4962      	ldr	r1, [pc, #392]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800609e:	4b5d      	ldr	r3, [pc, #372]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	4959      	ldr	r1, [pc, #356]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060c0:	4b54      	ldr	r3, [pc, #336]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060c6:	f023 0203 	bic.w	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ce:	4951      	ldr	r1, [pc, #324]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e2:	4b4c      	ldr	r3, [pc, #304]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	4948      	ldr	r1, [pc, #288]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006104:	4b43      	ldr	r3, [pc, #268]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	4940      	ldr	r1, [pc, #256]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006124:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800613c:	4b35      	ldr	r3, [pc, #212]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614a:	4932      	ldr	r1, [pc, #200]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615a:	d105      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615c:	4b2d      	ldr	r3, [pc, #180]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a2c      	ldr	r2, [pc, #176]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006166:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d015      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006174:	4b27      	ldr	r3, [pc, #156]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	4924      	ldr	r1, [pc, #144]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006192:	d105      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006194:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800619e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d015      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061ac:	4b19      	ldr	r3, [pc, #100]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ba:	4916      	ldr	r1, [pc, #88]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061ca:	d105      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4a10      	ldr	r2, [pc, #64]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d019      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4908      	ldr	r1, [pc, #32]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006202:	d109      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4a02      	ldr	r2, [pc, #8]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800620e:	60d3      	str	r3, [r2, #12]
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006212:	bf00      	nop
 8006214:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d015      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006224:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	4926      	ldr	r1, [pc, #152]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006242:	d105      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006244:	4b21      	ldr	r3, [pc, #132]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800624a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d015      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800625c:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626a:	4918      	ldr	r1, [pc, #96]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d105      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800627c:	4b13      	ldr	r3, [pc, #76]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4a12      	ldr	r2, [pc, #72]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006286:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006294:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800629a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a2:	490a      	ldr	r1, [pc, #40]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b2:	d105      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80062c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40021000 	.word	0x40021000

080062d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e049      	b.n	8006376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fc f898 	bl	800242c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f000 ff98 	bl	8007244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	d001      	beq.n	8006398 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e04c      	b.n	8006432 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a26      	ldr	r2, [pc, #152]	; (8006440 <HAL_TIM_Base_Start+0xc0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <HAL_TIM_Base_Start+0x70>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d01d      	beq.n	80063f0 <HAL_TIM_Base_Start+0x70>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a22      	ldr	r2, [pc, #136]	; (8006444 <HAL_TIM_Base_Start+0xc4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <HAL_TIM_Base_Start+0x70>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a21      	ldr	r2, [pc, #132]	; (8006448 <HAL_TIM_Base_Start+0xc8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_TIM_Base_Start+0x70>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1f      	ldr	r2, [pc, #124]	; (800644c <HAL_TIM_Base_Start+0xcc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_TIM_Base_Start+0x70>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	; (8006450 <HAL_TIM_Base_Start+0xd0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_TIM_Base_Start+0x70>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <HAL_TIM_Base_Start+0xd4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIM_Base_Start+0x70>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1b      	ldr	r2, [pc, #108]	; (8006458 <HAL_TIM_Base_Start+0xd8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d115      	bne.n	800641c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	4b19      	ldr	r3, [pc, #100]	; (800645c <HAL_TIM_Base_Start+0xdc>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b06      	cmp	r3, #6
 8006400:	d015      	beq.n	800642e <HAL_TIM_Base_Start+0xae>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006408:	d011      	beq.n	800642e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641a:	e008      	b.n	800642e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	e000      	b.n	8006430 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40015000 	.word	0x40015000
 800645c:	00010007 	.word	0x00010007

08006460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d001      	beq.n	8006478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e054      	b.n	8006522 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a26      	ldr	r2, [pc, #152]	; (8006530 <HAL_TIM_Base_Start_IT+0xd0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d022      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x80>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a2:	d01d      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x80>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <HAL_TIM_Base_Start_IT+0xd4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d018      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x80>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <HAL_TIM_Base_Start_IT+0xd8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x80>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1f      	ldr	r2, [pc, #124]	; (800653c <HAL_TIM_Base_Start_IT+0xdc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x80>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <HAL_TIM_Base_Start_IT+0xe0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x80>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1c      	ldr	r2, [pc, #112]	; (8006544 <HAL_TIM_Base_Start_IT+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x80>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <HAL_TIM_Base_Start_IT+0xe8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d115      	bne.n	800650c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	4b19      	ldr	r3, [pc, #100]	; (800654c <HAL_TIM_Base_Start_IT+0xec>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b06      	cmp	r3, #6
 80064f0:	d015      	beq.n	800651e <HAL_TIM_Base_Start_IT+0xbe>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f8:	d011      	beq.n	800651e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	e008      	b.n	800651e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0201 	orr.w	r2, r2, #1
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	e000      	b.n	8006520 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40015000 	.word	0x40015000
 800654c:	00010007 	.word	0x00010007

08006550 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e049      	b.n	80065f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f841 	bl	80065fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f000 fe58 	bl	8007244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <HAL_TIM_PWM_Start+0x24>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	e03c      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b04      	cmp	r3, #4
 800663c:	d109      	bne.n	8006652 <HAL_TIM_PWM_Start+0x3e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	bf14      	ite	ne
 800664a:	2301      	movne	r3, #1
 800664c:	2300      	moveq	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	e02f      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d109      	bne.n	800666c <HAL_TIM_PWM_Start+0x58>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e022      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b0c      	cmp	r3, #12
 8006670:	d109      	bne.n	8006686 <HAL_TIM_PWM_Start+0x72>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	e015      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b10      	cmp	r3, #16
 800668a:	d109      	bne.n	80066a0 <HAL_TIM_PWM_Start+0x8c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e008      	b.n	80066b2 <HAL_TIM_PWM_Start+0x9e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	bf14      	ite	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	2300      	moveq	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e0a6      	b.n	8006808 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_TIM_PWM_Start+0xb6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066c8:	e023      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d104      	bne.n	80066da <HAL_TIM_PWM_Start+0xc6>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066d8:	e01b      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xd6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066e8:	e013      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b0c      	cmp	r3, #12
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xe6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066f8:	e00b      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d104      	bne.n	800670a <HAL_TIM_PWM_Start+0xf6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006708:	e003      	b.n	8006712 <HAL_TIM_PWM_Start+0xfe>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2201      	movs	r2, #1
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f001 fa00 	bl	8007b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a3a      	ldr	r2, [pc, #232]	; (8006810 <HAL_TIM_PWM_Start+0x1fc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d018      	beq.n	800675c <HAL_TIM_PWM_Start+0x148>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a39      	ldr	r2, [pc, #228]	; (8006814 <HAL_TIM_PWM_Start+0x200>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d013      	beq.n	800675c <HAL_TIM_PWM_Start+0x148>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a37      	ldr	r2, [pc, #220]	; (8006818 <HAL_TIM_PWM_Start+0x204>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00e      	beq.n	800675c <HAL_TIM_PWM_Start+0x148>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a36      	ldr	r2, [pc, #216]	; (800681c <HAL_TIM_PWM_Start+0x208>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d009      	beq.n	800675c <HAL_TIM_PWM_Start+0x148>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a34      	ldr	r2, [pc, #208]	; (8006820 <HAL_TIM_PWM_Start+0x20c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIM_PWM_Start+0x148>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a33      	ldr	r2, [pc, #204]	; (8006824 <HAL_TIM_PWM_Start+0x210>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d101      	bne.n	8006760 <HAL_TIM_PWM_Start+0x14c>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <HAL_TIM_PWM_Start+0x14e>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d007      	beq.n	8006776 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006774:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a25      	ldr	r2, [pc, #148]	; (8006810 <HAL_TIM_PWM_Start+0x1fc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d022      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x1b2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006788:	d01d      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x1b2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a26      	ldr	r2, [pc, #152]	; (8006828 <HAL_TIM_PWM_Start+0x214>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d018      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x1b2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a24      	ldr	r2, [pc, #144]	; (800682c <HAL_TIM_PWM_Start+0x218>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x1b2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a23      	ldr	r2, [pc, #140]	; (8006830 <HAL_TIM_PWM_Start+0x21c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x1b2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a19      	ldr	r2, [pc, #100]	; (8006814 <HAL_TIM_PWM_Start+0x200>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x1b2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <HAL_TIM_PWM_Start+0x204>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x1b2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a18      	ldr	r2, [pc, #96]	; (8006824 <HAL_TIM_PWM_Start+0x210>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d115      	bne.n	80067f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_TIM_PWM_Start+0x220>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b06      	cmp	r3, #6
 80067d6:	d015      	beq.n	8006804 <HAL_TIM_PWM_Start+0x1f0>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067de:	d011      	beq.n	8006804 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f0:	e008      	b.n	8006804 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	e000      	b.n	8006806 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40013400 	.word	0x40013400
 8006818:	40014000 	.word	0x40014000
 800681c:	40014400 	.word	0x40014400
 8006820:	40014800 	.word	0x40014800
 8006824:	40015000 	.word	0x40015000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	00010007 	.word	0x00010007

08006838 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e097      	b.n	800697c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d106      	bne.n	8006866 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7fb fe2f 	bl	80024c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3304      	adds	r3, #4
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f000 fcd9 	bl	8007244 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	4313      	orrs	r3, r2
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068d8:	f023 030c 	bic.w	r3, r3, #12
 80068dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	4313      	orrs	r3, r2
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	011a      	lsls	r2, r3, #4
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	031b      	lsls	r3, r3, #12
 8006908:	4313      	orrs	r3, r2
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	4313      	orrs	r3, r2
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006994:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800699c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d110      	bne.n	80069d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d102      	bne.n	80069c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ba:	7b7b      	ldrb	r3, [r7, #13]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d001      	beq.n	80069c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e069      	b.n	8006a98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d4:	e031      	b.n	8006a3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d110      	bne.n	80069fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d102      	bne.n	80069e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069e2:	7b3b      	ldrb	r3, [r7, #12]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d001      	beq.n	80069ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e055      	b.n	8006a98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069fc:	e01d      	b.n	8006a3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d108      	bne.n	8006a16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d105      	bne.n	8006a16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0a:	7b7b      	ldrb	r3, [r7, #13]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d102      	bne.n	8006a16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a10:	7b3b      	ldrb	r3, [r7, #12]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d001      	beq.n	8006a1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e03e      	b.n	8006a98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_TIM_Encoder_Start+0xc4>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d008      	beq.n	8006a58 <HAL_TIM_Encoder_Start+0xd4>
 8006a46:	e00f      	b.n	8006a68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 f865 	bl	8007b20 <TIM_CCxChannelCmd>
      break;
 8006a56:	e016      	b.n	8006a86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	2104      	movs	r1, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 f85d 	bl	8007b20 <TIM_CCxChannelCmd>
      break;
 8006a66:	e00e      	b.n	8006a86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f855 	bl	8007b20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	2104      	movs	r1, #4
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 f84e 	bl	8007b20 <TIM_CCxChannelCmd>
      break;
 8006a84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0201 	orr.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d122      	bne.n	8006afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d11b      	bne.n	8006afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0202 	mvn.w	r2, #2
 8006acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fb90 	bl	8007208 <HAL_TIM_IC_CaptureCallback>
 8006ae8:	e005      	b.n	8006af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fb82 	bl	80071f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fb93 	bl	800721c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d122      	bne.n	8006b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d11b      	bne.n	8006b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0204 	mvn.w	r2, #4
 8006b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fb66 	bl	8007208 <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb58 	bl	80071f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fb69 	bl	800721c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d122      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0208 	mvn.w	r2, #8
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fb3c 	bl	8007208 <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb2e 	bl	80071f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb3f 	bl	800721c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d122      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0210 	mvn.w	r2, #16
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fb12 	bl	8007208 <HAL_TIM_IC_CaptureCallback>
 8006be4:	e005      	b.n	8006bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb04 	bl	80071f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fb15 	bl	800721c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d10e      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0201 	mvn.w	r2, #1
 8006c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fa fd90 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2e:	2b80      	cmp	r3, #128	; 0x80
 8006c30:	d10e      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3c:	2b80      	cmp	r3, #128	; 0x80
 8006c3e:	d107      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 f9a2 	bl	8007f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5e:	d10e      	bne.n	8006c7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6a:	2b80      	cmp	r3, #128	; 0x80
 8006c6c:	d107      	bne.n	8006c7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f995 	bl	8007fa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d10e      	bne.n	8006caa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c96:	2b40      	cmp	r3, #64	; 0x40
 8006c98:	d107      	bne.n	8006caa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fac3 	bl	8007230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d10e      	bne.n	8006cd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d107      	bne.n	8006cd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f06f 0220 	mvn.w	r2, #32
 8006cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f955 	bl	8007f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce4:	d10f      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf4:	d107      	bne.n	8006d06 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f95b 	bl	8007fbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d14:	d10f      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d24:	d107      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 f94d 	bl	8007fd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d44:	d10f      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d54:	d107      	bne.n	8006d66 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f93f 	bl	8007fe4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d74:	d10f      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d84:	d107      	bne.n	8006d96 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 f931 	bl	8007ff8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e0ff      	b.n	8006fbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b14      	cmp	r3, #20
 8006dca:	f200 80f0 	bhi.w	8006fae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006e29 	.word	0x08006e29
 8006dd8:	08006faf 	.word	0x08006faf
 8006ddc:	08006faf 	.word	0x08006faf
 8006de0:	08006faf 	.word	0x08006faf
 8006de4:	08006e69 	.word	0x08006e69
 8006de8:	08006faf 	.word	0x08006faf
 8006dec:	08006faf 	.word	0x08006faf
 8006df0:	08006faf 	.word	0x08006faf
 8006df4:	08006eab 	.word	0x08006eab
 8006df8:	08006faf 	.word	0x08006faf
 8006dfc:	08006faf 	.word	0x08006faf
 8006e00:	08006faf 	.word	0x08006faf
 8006e04:	08006eeb 	.word	0x08006eeb
 8006e08:	08006faf 	.word	0x08006faf
 8006e0c:	08006faf 	.word	0x08006faf
 8006e10:	08006faf 	.word	0x08006faf
 8006e14:	08006f2d 	.word	0x08006f2d
 8006e18:	08006faf 	.word	0x08006faf
 8006e1c:	08006faf 	.word	0x08006faf
 8006e20:	08006faf 	.word	0x08006faf
 8006e24:	08006f6d 	.word	0x08006f6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fab0 	bl	8007394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0208 	orr.w	r2, r2, #8
 8006e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0204 	bic.w	r2, r2, #4
 8006e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6999      	ldr	r1, [r3, #24]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	619a      	str	r2, [r3, #24]
      break;
 8006e66:	e0a5      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fb2a 	bl	80074c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6999      	ldr	r1, [r3, #24]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	021a      	lsls	r2, r3, #8
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	619a      	str	r2, [r3, #24]
      break;
 8006ea8:	e084      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fb9d 	bl	80075f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0208 	orr.w	r2, r2, #8
 8006ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69da      	ldr	r2, [r3, #28]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0204 	bic.w	r2, r2, #4
 8006ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69d9      	ldr	r1, [r3, #28]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	61da      	str	r2, [r3, #28]
      break;
 8006ee8:	e064      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fc0f 	bl	8007714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69d9      	ldr	r1, [r3, #28]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	021a      	lsls	r2, r3, #8
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	61da      	str	r2, [r3, #28]
      break;
 8006f2a:	e043      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68b9      	ldr	r1, [r7, #8]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fc82 	bl	800783c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0208 	orr.w	r2, r2, #8
 8006f46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0204 	bic.w	r2, r2, #4
 8006f56:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	691a      	ldr	r2, [r3, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006f6a:	e023      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fccc 	bl	8007910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f96:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	021a      	lsls	r2, r3, #8
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006fac:	e002      	b.n	8006fb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop

08006fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e0f6      	b.n	80071d2 <HAL_TIM_ConfigClockSource+0x20a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800700e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a6f      	ldr	r2, [pc, #444]	; (80071dc <HAL_TIM_ConfigClockSource+0x214>)
 800701e:	4293      	cmp	r3, r2
 8007020:	f000 80c1 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007024:	4a6d      	ldr	r2, [pc, #436]	; (80071dc <HAL_TIM_ConfigClockSource+0x214>)
 8007026:	4293      	cmp	r3, r2
 8007028:	f200 80c6 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800702c:	4a6c      	ldr	r2, [pc, #432]	; (80071e0 <HAL_TIM_ConfigClockSource+0x218>)
 800702e:	4293      	cmp	r3, r2
 8007030:	f000 80b9 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007034:	4a6a      	ldr	r2, [pc, #424]	; (80071e0 <HAL_TIM_ConfigClockSource+0x218>)
 8007036:	4293      	cmp	r3, r2
 8007038:	f200 80be 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800703c:	4a69      	ldr	r2, [pc, #420]	; (80071e4 <HAL_TIM_ConfigClockSource+0x21c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f000 80b1 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007044:	4a67      	ldr	r2, [pc, #412]	; (80071e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f200 80b6 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800704c:	4a66      	ldr	r2, [pc, #408]	; (80071e8 <HAL_TIM_ConfigClockSource+0x220>)
 800704e:	4293      	cmp	r3, r2
 8007050:	f000 80a9 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007054:	4a64      	ldr	r2, [pc, #400]	; (80071e8 <HAL_TIM_ConfigClockSource+0x220>)
 8007056:	4293      	cmp	r3, r2
 8007058:	f200 80ae 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800705c:	4a63      	ldr	r2, [pc, #396]	; (80071ec <HAL_TIM_ConfigClockSource+0x224>)
 800705e:	4293      	cmp	r3, r2
 8007060:	f000 80a1 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007064:	4a61      	ldr	r2, [pc, #388]	; (80071ec <HAL_TIM_ConfigClockSource+0x224>)
 8007066:	4293      	cmp	r3, r2
 8007068:	f200 80a6 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800706c:	4a60      	ldr	r2, [pc, #384]	; (80071f0 <HAL_TIM_ConfigClockSource+0x228>)
 800706e:	4293      	cmp	r3, r2
 8007070:	f000 8099 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007074:	4a5e      	ldr	r2, [pc, #376]	; (80071f0 <HAL_TIM_ConfigClockSource+0x228>)
 8007076:	4293      	cmp	r3, r2
 8007078:	f200 809e 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800707c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007080:	f000 8091 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007084:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007088:	f200 8096 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800708c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007090:	f000 8089 	beq.w	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007098:	f200 808e 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800709c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a0:	d03e      	beq.n	8007120 <HAL_TIM_ConfigClockSource+0x158>
 80070a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a6:	f200 8087 	bhi.w	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ae:	f000 8086 	beq.w	80071be <HAL_TIM_ConfigClockSource+0x1f6>
 80070b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b6:	d87f      	bhi.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070b8:	2b70      	cmp	r3, #112	; 0x70
 80070ba:	d01a      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x12a>
 80070bc:	2b70      	cmp	r3, #112	; 0x70
 80070be:	d87b      	bhi.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070c0:	2b60      	cmp	r3, #96	; 0x60
 80070c2:	d050      	beq.n	8007166 <HAL_TIM_ConfigClockSource+0x19e>
 80070c4:	2b60      	cmp	r3, #96	; 0x60
 80070c6:	d877      	bhi.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070c8:	2b50      	cmp	r3, #80	; 0x50
 80070ca:	d03c      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x17e>
 80070cc:	2b50      	cmp	r3, #80	; 0x50
 80070ce:	d873      	bhi.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d058      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x1be>
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d86f      	bhi.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070d8:	2b30      	cmp	r3, #48	; 0x30
 80070da:	d064      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 80070dc:	2b30      	cmp	r3, #48	; 0x30
 80070de:	d86b      	bhi.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d060      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d867      	bhi.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d05c      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d05a      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x1de>
 80070f0:	e062      	b.n	80071b8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6899      	ldr	r1, [r3, #8]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f000 fced 	bl	8007ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007114:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	609a      	str	r2, [r3, #8]
      break;
 800711e:	e04f      	b.n	80071c0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	6899      	ldr	r1, [r3, #8]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f000 fcd6 	bl	8007ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007142:	609a      	str	r2, [r3, #8]
      break;
 8007144:	e03c      	b.n	80071c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6859      	ldr	r1, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	461a      	mov	r2, r3
 8007154:	f000 fc48 	bl	80079e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2150      	movs	r1, #80	; 0x50
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fca1 	bl	8007aa6 <TIM_ITRx_SetConfig>
      break;
 8007164:	e02c      	b.n	80071c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6859      	ldr	r1, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	461a      	mov	r2, r3
 8007174:	f000 fc67 	bl	8007a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2160      	movs	r1, #96	; 0x60
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fc91 	bl	8007aa6 <TIM_ITRx_SetConfig>
      break;
 8007184:	e01c      	b.n	80071c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6859      	ldr	r1, [r3, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	461a      	mov	r2, r3
 8007194:	f000 fc28 	bl	80079e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2140      	movs	r1, #64	; 0x40
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fc81 	bl	8007aa6 <TIM_ITRx_SetConfig>
      break;
 80071a4:	e00c      	b.n	80071c0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f000 fc78 	bl	8007aa6 <TIM_ITRx_SetConfig>
      break;
 80071b6:	e003      	b.n	80071c0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
      break;
 80071bc:	e000      	b.n	80071c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80071be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	00100070 	.word	0x00100070
 80071e0:	00100060 	.word	0x00100060
 80071e4:	00100050 	.word	0x00100050
 80071e8:	00100040 	.word	0x00100040
 80071ec:	00100030 	.word	0x00100030
 80071f0:	00100020 	.word	0x00100020

080071f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a46      	ldr	r2, [pc, #280]	; (8007370 <TIM_Base_SetConfig+0x12c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d017      	beq.n	800728c <TIM_Base_SetConfig+0x48>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007262:	d013      	beq.n	800728c <TIM_Base_SetConfig+0x48>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a43      	ldr	r2, [pc, #268]	; (8007374 <TIM_Base_SetConfig+0x130>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00f      	beq.n	800728c <TIM_Base_SetConfig+0x48>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a42      	ldr	r2, [pc, #264]	; (8007378 <TIM_Base_SetConfig+0x134>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00b      	beq.n	800728c <TIM_Base_SetConfig+0x48>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a41      	ldr	r2, [pc, #260]	; (800737c <TIM_Base_SetConfig+0x138>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_Base_SetConfig+0x48>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a40      	ldr	r2, [pc, #256]	; (8007380 <TIM_Base_SetConfig+0x13c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_Base_SetConfig+0x48>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a3f      	ldr	r2, [pc, #252]	; (8007384 <TIM_Base_SetConfig+0x140>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d108      	bne.n	800729e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a33      	ldr	r2, [pc, #204]	; (8007370 <TIM_Base_SetConfig+0x12c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d023      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ac:	d01f      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a30      	ldr	r2, [pc, #192]	; (8007374 <TIM_Base_SetConfig+0x130>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01b      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <TIM_Base_SetConfig+0x134>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d017      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2e      	ldr	r2, [pc, #184]	; (800737c <TIM_Base_SetConfig+0x138>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <TIM_Base_SetConfig+0x13c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00f      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <TIM_Base_SetConfig+0x144>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00b      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2c      	ldr	r2, [pc, #176]	; (800738c <TIM_Base_SetConfig+0x148>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d007      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2b      	ldr	r2, [pc, #172]	; (8007390 <TIM_Base_SetConfig+0x14c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_Base_SetConfig+0xaa>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a26      	ldr	r2, [pc, #152]	; (8007384 <TIM_Base_SetConfig+0x140>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <TIM_Base_SetConfig+0x12c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <TIM_Base_SetConfig+0x110>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a14      	ldr	r2, [pc, #80]	; (8007380 <TIM_Base_SetConfig+0x13c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00f      	beq.n	8007354 <TIM_Base_SetConfig+0x110>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a14      	ldr	r2, [pc, #80]	; (8007388 <TIM_Base_SetConfig+0x144>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00b      	beq.n	8007354 <TIM_Base_SetConfig+0x110>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a13      	ldr	r2, [pc, #76]	; (800738c <TIM_Base_SetConfig+0x148>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_Base_SetConfig+0x110>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a12      	ldr	r2, [pc, #72]	; (8007390 <TIM_Base_SetConfig+0x14c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_Base_SetConfig+0x110>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a0d      	ldr	r2, [pc, #52]	; (8007384 <TIM_Base_SetConfig+0x140>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d103      	bne.n	800735c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	615a      	str	r2, [r3, #20]
}
 8007362:	bf00      	nop
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40012c00 	.word	0x40012c00
 8007374:	40000400 	.word	0x40000400
 8007378:	40000800 	.word	0x40000800
 800737c:	40000c00 	.word	0x40000c00
 8007380:	40013400 	.word	0x40013400
 8007384:	40015000 	.word	0x40015000
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 0302 	bic.w	r3, r3, #2
 80073e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a30      	ldr	r2, [pc, #192]	; (80074b0 <TIM_OC1_SetConfig+0x11c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d013      	beq.n	800741c <TIM_OC1_SetConfig+0x88>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a2f      	ldr	r2, [pc, #188]	; (80074b4 <TIM_OC1_SetConfig+0x120>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00f      	beq.n	800741c <TIM_OC1_SetConfig+0x88>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a2e      	ldr	r2, [pc, #184]	; (80074b8 <TIM_OC1_SetConfig+0x124>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00b      	beq.n	800741c <TIM_OC1_SetConfig+0x88>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a2d      	ldr	r2, [pc, #180]	; (80074bc <TIM_OC1_SetConfig+0x128>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_OC1_SetConfig+0x88>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <TIM_OC1_SetConfig+0x12c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_OC1_SetConfig+0x88>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <TIM_OC1_SetConfig+0x130>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d10c      	bne.n	8007436 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f023 0308 	bic.w	r3, r3, #8
 8007422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f023 0304 	bic.w	r3, r3, #4
 8007434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <TIM_OC1_SetConfig+0x11c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <TIM_OC1_SetConfig+0xd2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <TIM_OC1_SetConfig+0x120>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00f      	beq.n	8007466 <TIM_OC1_SetConfig+0xd2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <TIM_OC1_SetConfig+0x124>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00b      	beq.n	8007466 <TIM_OC1_SetConfig+0xd2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a1a      	ldr	r2, [pc, #104]	; (80074bc <TIM_OC1_SetConfig+0x128>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d007      	beq.n	8007466 <TIM_OC1_SetConfig+0xd2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a19      	ldr	r2, [pc, #100]	; (80074c0 <TIM_OC1_SetConfig+0x12c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_OC1_SetConfig+0xd2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <TIM_OC1_SetConfig+0x130>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d111      	bne.n	800748a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	40012c00 	.word	0x40012c00
 80074b4:	40013400 	.word	0x40013400
 80074b8:	40014000 	.word	0x40014000
 80074bc:	40014400 	.word	0x40014400
 80074c0:	40014800 	.word	0x40014800
 80074c4:	40015000 	.word	0x40015000

080074c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f023 0210 	bic.w	r2, r3, #16
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	021b      	lsls	r3, r3, #8
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f023 0320 	bic.w	r3, r3, #32
 8007516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a2c      	ldr	r2, [pc, #176]	; (80075d8 <TIM_OC2_SetConfig+0x110>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d007      	beq.n	800753c <TIM_OC2_SetConfig+0x74>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a2b      	ldr	r2, [pc, #172]	; (80075dc <TIM_OC2_SetConfig+0x114>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_OC2_SetConfig+0x74>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a2a      	ldr	r2, [pc, #168]	; (80075e0 <TIM_OC2_SetConfig+0x118>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d10d      	bne.n	8007558 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <TIM_OC2_SetConfig+0x110>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <TIM_OC2_SetConfig+0xc0>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <TIM_OC2_SetConfig+0x114>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00f      	beq.n	8007588 <TIM_OC2_SetConfig+0xc0>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <TIM_OC2_SetConfig+0x11c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00b      	beq.n	8007588 <TIM_OC2_SetConfig+0xc0>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <TIM_OC2_SetConfig+0x120>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d007      	beq.n	8007588 <TIM_OC2_SetConfig+0xc0>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <TIM_OC2_SetConfig+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_OC2_SetConfig+0xc0>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <TIM_OC2_SetConfig+0x118>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d113      	bne.n	80075b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800758e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	621a      	str	r2, [r3, #32]
}
 80075ca:	bf00      	nop
 80075cc:	371c      	adds	r7, #28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40013400 	.word	0x40013400
 80075e0:	40015000 	.word	0x40015000
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40014400 	.word	0x40014400
 80075ec:	40014800 	.word	0x40014800

080075f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800763c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a2b      	ldr	r2, [pc, #172]	; (80076fc <TIM_OC3_SetConfig+0x10c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d007      	beq.n	8007662 <TIM_OC3_SetConfig+0x72>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a2a      	ldr	r2, [pc, #168]	; (8007700 <TIM_OC3_SetConfig+0x110>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_OC3_SetConfig+0x72>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a29      	ldr	r2, [pc, #164]	; (8007704 <TIM_OC3_SetConfig+0x114>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d10d      	bne.n	800767e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	021b      	lsls	r3, r3, #8
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800767c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a1e      	ldr	r2, [pc, #120]	; (80076fc <TIM_OC3_SetConfig+0x10c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d013      	beq.n	80076ae <TIM_OC3_SetConfig+0xbe>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <TIM_OC3_SetConfig+0x110>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00f      	beq.n	80076ae <TIM_OC3_SetConfig+0xbe>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a1d      	ldr	r2, [pc, #116]	; (8007708 <TIM_OC3_SetConfig+0x118>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00b      	beq.n	80076ae <TIM_OC3_SetConfig+0xbe>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a1c      	ldr	r2, [pc, #112]	; (800770c <TIM_OC3_SetConfig+0x11c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d007      	beq.n	80076ae <TIM_OC3_SetConfig+0xbe>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <TIM_OC3_SetConfig+0x120>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d003      	beq.n	80076ae <TIM_OC3_SetConfig+0xbe>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a16      	ldr	r2, [pc, #88]	; (8007704 <TIM_OC3_SetConfig+0x114>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d113      	bne.n	80076d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40013400 	.word	0x40013400
 8007704:	40015000 	.word	0x40015000
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400
 8007710:	40014800 	.word	0x40014800

08007714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800774e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	031b      	lsls	r3, r3, #12
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a2c      	ldr	r2, [pc, #176]	; (8007824 <TIM_OC4_SetConfig+0x110>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_OC4_SetConfig+0x74>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a2b      	ldr	r2, [pc, #172]	; (8007828 <TIM_OC4_SetConfig+0x114>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC4_SetConfig+0x74>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a2a      	ldr	r2, [pc, #168]	; (800782c <TIM_OC4_SetConfig+0x118>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d10d      	bne.n	80077a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800778e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	031b      	lsls	r3, r3, #12
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a1f      	ldr	r2, [pc, #124]	; (8007824 <TIM_OC4_SetConfig+0x110>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <TIM_OC4_SetConfig+0xc0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <TIM_OC4_SetConfig+0x114>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00f      	beq.n	80077d4 <TIM_OC4_SetConfig+0xc0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a1e      	ldr	r2, [pc, #120]	; (8007830 <TIM_OC4_SetConfig+0x11c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00b      	beq.n	80077d4 <TIM_OC4_SetConfig+0xc0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <TIM_OC4_SetConfig+0x120>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d007      	beq.n	80077d4 <TIM_OC4_SetConfig+0xc0>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1c      	ldr	r2, [pc, #112]	; (8007838 <TIM_OC4_SetConfig+0x124>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_OC4_SetConfig+0xc0>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a17      	ldr	r2, [pc, #92]	; (800782c <TIM_OC4_SetConfig+0x118>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d113      	bne.n	80077fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	019b      	lsls	r3, r3, #6
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	019b      	lsls	r3, r3, #6
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40012c00 	.word	0x40012c00
 8007828:	40013400 	.word	0x40013400
 800782c:	40015000 	.word	0x40015000
 8007830:	40014000 	.word	0x40014000
 8007834:	40014400 	.word	0x40014400
 8007838:	40014800 	.word	0x40014800

0800783c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007880:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <TIM_OC5_SetConfig+0xbc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <TIM_OC5_SetConfig+0x82>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a18      	ldr	r2, [pc, #96]	; (80078fc <TIM_OC5_SetConfig+0xc0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00f      	beq.n	80078be <TIM_OC5_SetConfig+0x82>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a17      	ldr	r2, [pc, #92]	; (8007900 <TIM_OC5_SetConfig+0xc4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00b      	beq.n	80078be <TIM_OC5_SetConfig+0x82>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a16      	ldr	r2, [pc, #88]	; (8007904 <TIM_OC5_SetConfig+0xc8>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d007      	beq.n	80078be <TIM_OC5_SetConfig+0x82>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a15      	ldr	r2, [pc, #84]	; (8007908 <TIM_OC5_SetConfig+0xcc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_OC5_SetConfig+0x82>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a14      	ldr	r2, [pc, #80]	; (800790c <TIM_OC5_SetConfig+0xd0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d109      	bne.n	80078d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	621a      	str	r2, [r3, #32]
}
 80078ec:	bf00      	nop
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	40012c00 	.word	0x40012c00
 80078fc:	40013400 	.word	0x40013400
 8007900:	40014000 	.word	0x40014000
 8007904:	40014400 	.word	0x40014400
 8007908:	40014800 	.word	0x40014800
 800790c:	40015000 	.word	0x40015000

08007910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	051b      	lsls	r3, r3, #20
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a1a      	ldr	r2, [pc, #104]	; (80079d0 <TIM_OC6_SetConfig+0xc0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <TIM_OC6_SetConfig+0x84>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a19      	ldr	r2, [pc, #100]	; (80079d4 <TIM_OC6_SetConfig+0xc4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00f      	beq.n	8007994 <TIM_OC6_SetConfig+0x84>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a18      	ldr	r2, [pc, #96]	; (80079d8 <TIM_OC6_SetConfig+0xc8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00b      	beq.n	8007994 <TIM_OC6_SetConfig+0x84>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a17      	ldr	r2, [pc, #92]	; (80079dc <TIM_OC6_SetConfig+0xcc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d007      	beq.n	8007994 <TIM_OC6_SetConfig+0x84>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a16      	ldr	r2, [pc, #88]	; (80079e0 <TIM_OC6_SetConfig+0xd0>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_OC6_SetConfig+0x84>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a15      	ldr	r2, [pc, #84]	; (80079e4 <TIM_OC6_SetConfig+0xd4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d109      	bne.n	80079a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800799a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	029b      	lsls	r3, r3, #10
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	621a      	str	r2, [r3, #32]
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40012c00 	.word	0x40012c00
 80079d4:	40013400 	.word	0x40013400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400
 80079e0:	40014800 	.word	0x40014800
 80079e4:	40015000 	.word	0x40015000

080079e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f023 0201 	bic.w	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f023 030a 	bic.w	r3, r3, #10
 8007a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	621a      	str	r2, [r3, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b087      	sub	sp, #28
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f023 0210 	bic.w	r2, r3, #16
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	031b      	lsls	r3, r3, #12
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	011b      	lsls	r3, r3, #4
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f043 0307 	orr.w	r3, r3, #7
 8007acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	021a      	lsls	r2, r3, #8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	2201      	movs	r2, #1
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	43db      	mvns	r3, r3
 8007b42:	401a      	ands	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	fa01 f303 	lsl.w	r3, r1, r3
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_TIMEx_PWMN_Start+0x24>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e022      	b.n	8007bd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d109      	bne.n	8007baa <HAL_TIMEx_PWMN_Start+0x3e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	bf14      	ite	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	2300      	moveq	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e015      	b.n	8007bd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d109      	bne.n	8007bc4 <HAL_TIMEx_PWMN_Start+0x58>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e008      	b.n	8007bd6 <HAL_TIMEx_PWMN_Start+0x6a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	bf14      	ite	ne
 8007bd0:	2301      	movne	r3, #1
 8007bd2:	2300      	moveq	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e073      	b.n	8007cc6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d104      	bne.n	8007bee <HAL_TIMEx_PWMN_Start+0x82>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bec:	e013      	b.n	8007c16 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d104      	bne.n	8007bfe <HAL_TIMEx_PWMN_Start+0x92>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfc:	e00b      	b.n	8007c16 <HAL_TIMEx_PWMN_Start+0xaa>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d104      	bne.n	8007c0e <HAL_TIMEx_PWMN_Start+0xa2>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c0c:	e003      	b.n	8007c16 <HAL_TIMEx_PWMN_Start+0xaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f9f4 	bl	800800c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a25      	ldr	r2, [pc, #148]	; (8007cd0 <HAL_TIMEx_PWMN_Start+0x164>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d022      	beq.n	8007c84 <HAL_TIMEx_PWMN_Start+0x118>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c46:	d01d      	beq.n	8007c84 <HAL_TIMEx_PWMN_Start+0x118>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a21      	ldr	r2, [pc, #132]	; (8007cd4 <HAL_TIMEx_PWMN_Start+0x168>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d018      	beq.n	8007c84 <HAL_TIMEx_PWMN_Start+0x118>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a20      	ldr	r2, [pc, #128]	; (8007cd8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d013      	beq.n	8007c84 <HAL_TIMEx_PWMN_Start+0x118>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a1e      	ldr	r2, [pc, #120]	; (8007cdc <HAL_TIMEx_PWMN_Start+0x170>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00e      	beq.n	8007c84 <HAL_TIMEx_PWMN_Start+0x118>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ce0 <HAL_TIMEx_PWMN_Start+0x174>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d009      	beq.n	8007c84 <HAL_TIMEx_PWMN_Start+0x118>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1b      	ldr	r2, [pc, #108]	; (8007ce4 <HAL_TIMEx_PWMN_Start+0x178>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d004      	beq.n	8007c84 <HAL_TIMEx_PWMN_Start+0x118>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a1a      	ldr	r2, [pc, #104]	; (8007ce8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d115      	bne.n	8007cb0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	4b18      	ldr	r3, [pc, #96]	; (8007cec <HAL_TIMEx_PWMN_Start+0x180>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b06      	cmp	r3, #6
 8007c94:	d015      	beq.n	8007cc2 <HAL_TIMEx_PWMN_Start+0x156>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c9c:	d011      	beq.n	8007cc2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0201 	orr.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cae:	e008      	b.n	8007cc2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0201 	orr.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	e000      	b.n	8007cc4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800
 8007cdc:	40000c00 	.word	0x40000c00
 8007ce0:	40013400 	.word	0x40013400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40015000 	.word	0x40015000
 8007cec:	00010007 	.word	0x00010007

08007cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e074      	b.n	8007df2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a34      	ldr	r2, [pc, #208]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d009      	beq.n	8007d46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a33      	ldr	r2, [pc, #204]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d004      	beq.n	8007d46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a31      	ldr	r2, [pc, #196]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d108      	bne.n	8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d022      	beq.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d88:	d01d      	beq.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1f      	ldr	r2, [pc, #124]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d018      	beq.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d013      	beq.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1c      	ldr	r2, [pc, #112]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00e      	beq.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a15      	ldr	r2, [pc, #84]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d009      	beq.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d004      	beq.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a11      	ldr	r2, [pc, #68]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d10c      	bne.n	8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40012c00 	.word	0x40012c00
 8007e04:	40013400 	.word	0x40013400
 8007e08:	40015000 	.word	0x40015000
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40000800 	.word	0x40000800
 8007e14:	40000c00 	.word	0x40000c00
 8007e18:	40014000 	.word	0x40014000

08007e1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e096      	b.n	8007f66 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	041b      	lsls	r3, r3, #16
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a2f      	ldr	r2, [pc, #188]	; (8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d009      	beq.n	8007ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a2d      	ldr	r2, [pc, #180]	; (8007f78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a2c      	ldr	r2, [pc, #176]	; (8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d106      	bne.n	8007ede <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a24      	ldr	r2, [pc, #144]	; (8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d009      	beq.n	8007efc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a22      	ldr	r2, [pc, #136]	; (8007f78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a21      	ldr	r2, [pc, #132]	; (8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d12b      	bne.n	8007f54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	051b      	lsls	r3, r3, #20
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a11      	ldr	r2, [pc, #68]	; (8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d009      	beq.n	8007f46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a10      	ldr	r2, [pc, #64]	; (8007f78 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0e      	ldr	r2, [pc, #56]	; (8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d106      	bne.n	8007f54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	40012c00 	.word	0x40012c00
 8007f78:	40013400 	.word	0x40013400
 8007f7c:	40015000 	.word	0x40015000

08007f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f003 031f 	and.w	r3, r3, #31
 800801e:	2204      	movs	r2, #4
 8008020:	fa02 f303 	lsl.w	r3, r2, r3
 8008024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a1a      	ldr	r2, [r3, #32]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	43db      	mvns	r3, r3
 800802e:	401a      	ands	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a1a      	ldr	r2, [r3, #32]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f003 031f 	and.w	r3, r3, #31
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	fa01 f303 	lsl.w	r3, r1, r3
 8008044:	431a      	orrs	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	621a      	str	r2, [r3, #32]
}
 800804a:	bf00      	nop
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e042      	b.n	80080ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fa fafe 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2224      	movs	r2, #36	; 0x24
 8008084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fc51 	bl	8008940 <UART_SetConfig>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e022      	b.n	80080ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 ff41 	bl	8008f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0201 	orr.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 ffc8 	bl	800907c <UART_CheckIdleState>
 80080ec:	4603      	mov	r3, r0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b08a      	sub	sp, #40	; 0x28
 80080fa:	af02      	add	r7, sp, #8
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800810c:	2b20      	cmp	r3, #32
 800810e:	f040 8083 	bne.w	8008218 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <HAL_UART_Transmit+0x28>
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e07b      	b.n	800821a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_UART_Transmit+0x3a>
 800812c:	2302      	movs	r3, #2
 800812e:	e074      	b.n	800821a <HAL_UART_Transmit+0x124>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2221      	movs	r2, #33	; 0x21
 8008144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008148:	f7fa fb4c 	bl	80027e4 <HAL_GetTick>
 800814c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008166:	d108      	bne.n	800817a <HAL_UART_Transmit+0x84>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	e003      	b.n	8008182 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800818a:	e02c      	b.n	80081e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2200      	movs	r2, #0
 8008194:	2180      	movs	r1, #128	; 0x80
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 ffbb 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e039      	b.n	800821a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	3302      	adds	r3, #2
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	e007      	b.n	80081d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	781a      	ldrb	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	3301      	adds	r3, #1
 80081d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1cc      	bne.n	800818c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2200      	movs	r2, #0
 80081fa:	2140      	movs	r1, #64	; 0x40
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 ff88 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e006      	b.n	800821a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	e000      	b.n	800821a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008218:	2302      	movs	r3, #2
  }
}
 800821a:	4618      	mov	r0, r3
 800821c:	3720      	adds	r7, #32
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	4613      	mov	r3, r2
 8008230:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008238:	2b20      	cmp	r3, #32
 800823a:	d142      	bne.n	80082c2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <HAL_UART_Receive_IT+0x24>
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e03b      	b.n	80082c4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <HAL_UART_Receive_IT+0x36>
 8008256:	2302      	movs	r3, #2
 8008258:	e034      	b.n	80082c4 <HAL_UART_Receive_IT+0xa0>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <HAL_UART_Receive_IT+0xa8>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d01f      	beq.n	80082b2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d018      	beq.n	80082b2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	613b      	str	r3, [r7, #16]
   return(result);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	623b      	str	r3, [r7, #32]
 80082a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	69f9      	ldr	r1, [r7, #28]
 80082a4:	6a3a      	ldr	r2, [r7, #32]
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e6      	bne.n	8008280 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082b2:	88fb      	ldrh	r3, [r7, #6]
 80082b4:	461a      	mov	r2, r3
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fff3 	bl	80092a4 <UART_Start_Receive_IT>
 80082be:	4603      	mov	r3, r0
 80082c0:	e000      	b.n	80082c4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
  }
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3728      	adds	r7, #40	; 0x28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	40008000 	.word	0x40008000

080082d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b0ba      	sub	sp, #232	; 0xe8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80082fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80082fe:	4013      	ands	r3, r2
 8008300:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d11b      	bne.n	8008344 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d015      	beq.n	8008344 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b00      	cmp	r3, #0
 8008322:	d105      	bne.n	8008330 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d009      	beq.n	8008344 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 82d6 	beq.w	80088e6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
      }
      return;
 8008342:	e2d0      	b.n	80088e6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 811f 	beq.w	800858c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800834e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008352:	4b8b      	ldr	r3, [pc, #556]	; (8008580 <HAL_UART_IRQHandler+0x2b0>)
 8008354:	4013      	ands	r3, r2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800835a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800835e:	4b89      	ldr	r3, [pc, #548]	; (8008584 <HAL_UART_IRQHandler+0x2b4>)
 8008360:	4013      	ands	r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8112 	beq.w	800858c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d011      	beq.n	8008398 <HAL_UART_IRQHandler+0xc8>
 8008374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2201      	movs	r2, #1
 8008386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800838e:	f043 0201 	orr.w	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d011      	beq.n	80083c8 <HAL_UART_IRQHandler+0xf8>
 80083a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2202      	movs	r2, #2
 80083b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083be:	f043 0204 	orr.w	r2, r3, #4
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d011      	beq.n	80083f8 <HAL_UART_IRQHandler+0x128>
 80083d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2204      	movs	r2, #4
 80083e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ee:	f043 0202 	orr.w	r2, r3, #2
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fc:	f003 0308 	and.w	r3, r3, #8
 8008400:	2b00      	cmp	r3, #0
 8008402:	d017      	beq.n	8008434 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008408:	f003 0320 	and.w	r3, r3, #32
 800840c:	2b00      	cmp	r3, #0
 800840e:	d105      	bne.n	800841c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008410:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008414:	4b5a      	ldr	r3, [pc, #360]	; (8008580 <HAL_UART_IRQHandler+0x2b0>)
 8008416:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2208      	movs	r2, #8
 8008422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800842a:	f043 0208 	orr.w	r2, r3, #8
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800843c:	2b00      	cmp	r3, #0
 800843e:	d012      	beq.n	8008466 <HAL_UART_IRQHandler+0x196>
 8008440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00c      	beq.n	8008466 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800845c:	f043 0220 	orr.w	r2, r3, #32
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 823c 	beq.w	80088ea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d013      	beq.n	80084a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800847e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008482:	f003 0320 	and.w	r3, r3, #32
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800848a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800848e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ba:	2b40      	cmp	r3, #64	; 0x40
 80084bc:	d005      	beq.n	80084ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d04f      	beq.n	800856a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 f814 	bl	80094f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d141      	bne.n	8008562 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3308      	adds	r3, #8
 80084e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800850a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800850e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1d9      	bne.n	80084de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d013      	beq.n	800855a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008536:	4a14      	ldr	r2, [pc, #80]	; (8008588 <HAL_UART_IRQHandler+0x2b8>)
 8008538:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853e:	4618      	mov	r0, r3
 8008540:	f7fc fadc 	bl	8004afc <HAL_DMA_Abort_IT>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d017      	beq.n	800857a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008554:	4610      	mov	r0, r2
 8008556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008558:	e00f      	b.n	800857a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f9da 	bl	8008914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008560:	e00b      	b.n	800857a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f9d6 	bl	8008914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	e007      	b.n	800857a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f9d2 	bl	8008914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008578:	e1b7      	b.n	80088ea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800857a:	bf00      	nop
    return;
 800857c:	e1b5      	b.n	80088ea <HAL_UART_IRQHandler+0x61a>
 800857e:	bf00      	nop
 8008580:	10000001 	.word	0x10000001
 8008584:	04000120 	.word	0x04000120
 8008588:	080095c5 	.word	0x080095c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008590:	2b01      	cmp	r3, #1
 8008592:	f040 814a 	bne.w	800882a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800859a:	f003 0310 	and.w	r3, r3, #16
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8143 	beq.w	800882a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 813c 	beq.w	800882a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2210      	movs	r2, #16
 80085b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c4:	2b40      	cmp	r3, #64	; 0x40
 80085c6:	f040 80b5 	bne.w	8008734 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8187 	beq.w	80088ee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085ea:	429a      	cmp	r2, r3
 80085ec:	f080 817f 	bcs.w	80088ee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	f040 8086 	bne.w	8008718 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800863a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008642:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800864e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1da      	bne.n	800860c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3308      	adds	r3, #8
 8008676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800867a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800867e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008682:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800868c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e1      	bne.n	8008656 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3308      	adds	r3, #8
 80086b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e3      	bne.n	8008692 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e8:	f023 0310 	bic.w	r3, r3, #16
 80086ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80086fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e4      	bne.n	80086d8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008712:	4618      	mov	r0, r3
 8008714:	f7fc f999 	bl	8004a4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008724:	b29b      	uxth	r3, r3
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	b29b      	uxth	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f8fb 	bl	8008928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008732:	e0dc      	b.n	80088ee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008740:	b29b      	uxth	r3, r3
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 80ce 	beq.w	80088f2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008756:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 80c9 	beq.w	80088f2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008782:	647b      	str	r3, [r7, #68]	; 0x44
 8008784:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e4      	bne.n	8008760 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	623b      	str	r3, [r7, #32]
   return(result);
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ac:	f023 0301 	bic.w	r3, r3, #1
 80087b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3308      	adds	r3, #8
 80087ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087be:	633a      	str	r2, [r7, #48]	; 0x30
 80087c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e1      	bne.n	8008796 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0310 	bic.w	r3, r3, #16
 80087fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008808:	61fb      	str	r3, [r7, #28]
 800880a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	69b9      	ldr	r1, [r7, #24]
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	617b      	str	r3, [r7, #20]
   return(result);
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e4      	bne.n	80087e6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800881c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f880 	bl	8008928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008828:	e063      	b.n	80088f2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800882a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <HAL_UART_IRQHandler+0x584>
 8008836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800883a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d008      	beq.n	8008854 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800884a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fb57 	bl	8009f00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008852:	e051      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885c:	2b00      	cmp	r3, #0
 800885e:	d014      	beq.n	800888a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008868:	2b00      	cmp	r3, #0
 800886a:	d105      	bne.n	8008878 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800886c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887c:	2b00      	cmp	r3, #0
 800887e:	d03a      	beq.n	80088f6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
    }
    return;
 8008888:	e035      	b.n	80088f6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800888a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <HAL_UART_IRQHandler+0x5da>
 8008896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fea4 	bl	80095f0 <UART_EndTransmit_IT>
    return;
 80088a8:	e026      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <HAL_UART_IRQHandler+0x5fa>
 80088b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 fb30 	bl	8009f28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088c8:	e016      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d010      	beq.n	80088f8 <HAL_UART_IRQHandler+0x628>
 80088d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da0c      	bge.n	80088f8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 fb18 	bl	8009f14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088e4:	e008      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
      return;
 80088e6:	bf00      	nop
 80088e8:	e006      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
    return;
 80088ea:	bf00      	nop
 80088ec:	e004      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
      return;
 80088ee:	bf00      	nop
 80088f0:	e002      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
      return;
 80088f2:	bf00      	nop
 80088f4:	e000      	b.n	80088f8 <HAL_UART_IRQHandler+0x628>
    return;
 80088f6:	bf00      	nop
  }
}
 80088f8:	37e8      	adds	r7, #232	; 0xe8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop

08008900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008944:	b08c      	sub	sp, #48	; 0x30
 8008946:	af00      	add	r7, sp, #0
 8008948:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	431a      	orrs	r2, r3
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	431a      	orrs	r2, r3
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	4313      	orrs	r3, r2
 8008966:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4baa      	ldr	r3, [pc, #680]	; (8008c18 <UART_SetConfig+0x2d8>)
 8008970:	4013      	ands	r3, r2
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008978:	430b      	orrs	r3, r1
 800897a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a9f      	ldr	r2, [pc, #636]	; (8008c1c <UART_SetConfig+0x2dc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a8:	4313      	orrs	r3, r2
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80089b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	6812      	ldr	r2, [r2, #0]
 80089be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089c0:	430b      	orrs	r3, r1
 80089c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	f023 010f 	bic.w	r1, r3, #15
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a90      	ldr	r2, [pc, #576]	; (8008c20 <UART_SetConfig+0x2e0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d125      	bne.n	8008a30 <UART_SetConfig+0xf0>
 80089e4:	4b8f      	ldr	r3, [pc, #572]	; (8008c24 <UART_SetConfig+0x2e4>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d81a      	bhi.n	8008a28 <UART_SetConfig+0xe8>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0xb8>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a09 	.word	0x08008a09
 80089fc:	08008a19 	.word	0x08008a19
 8008a00:	08008a11 	.word	0x08008a11
 8008a04:	08008a21 	.word	0x08008a21
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a0e:	e116      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a10:	2302      	movs	r3, #2
 8008a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a16:	e112      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a1e:	e10e      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a20:	2308      	movs	r3, #8
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a26:	e10a      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a28:	2310      	movs	r3, #16
 8008a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a2e:	e106      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a7c      	ldr	r2, [pc, #496]	; (8008c28 <UART_SetConfig+0x2e8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d138      	bne.n	8008aac <UART_SetConfig+0x16c>
 8008a3a:	4b7a      	ldr	r3, [pc, #488]	; (8008c24 <UART_SetConfig+0x2e4>)
 8008a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a40:	f003 030c 	and.w	r3, r3, #12
 8008a44:	2b0c      	cmp	r3, #12
 8008a46:	d82d      	bhi.n	8008aa4 <UART_SetConfig+0x164>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <UART_SetConfig+0x110>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a85 	.word	0x08008a85
 8008a54:	08008aa5 	.word	0x08008aa5
 8008a58:	08008aa5 	.word	0x08008aa5
 8008a5c:	08008aa5 	.word	0x08008aa5
 8008a60:	08008a95 	.word	0x08008a95
 8008a64:	08008aa5 	.word	0x08008aa5
 8008a68:	08008aa5 	.word	0x08008aa5
 8008a6c:	08008aa5 	.word	0x08008aa5
 8008a70:	08008a8d 	.word	0x08008a8d
 8008a74:	08008aa5 	.word	0x08008aa5
 8008a78:	08008aa5 	.word	0x08008aa5
 8008a7c:	08008aa5 	.word	0x08008aa5
 8008a80:	08008a9d 	.word	0x08008a9d
 8008a84:	2300      	movs	r3, #0
 8008a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a8a:	e0d8      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a92:	e0d4      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a94:	2304      	movs	r3, #4
 8008a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008a9a:	e0d0      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008a9c:	2308      	movs	r3, #8
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aa2:	e0cc      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008aaa:	e0c8      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a5e      	ldr	r2, [pc, #376]	; (8008c2c <UART_SetConfig+0x2ec>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d125      	bne.n	8008b02 <UART_SetConfig+0x1c2>
 8008ab6:	4b5b      	ldr	r3, [pc, #364]	; (8008c24 <UART_SetConfig+0x2e4>)
 8008ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	d016      	beq.n	8008af2 <UART_SetConfig+0x1b2>
 8008ac4:	2b30      	cmp	r3, #48	; 0x30
 8008ac6:	d818      	bhi.n	8008afa <UART_SetConfig+0x1ba>
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d00a      	beq.n	8008ae2 <UART_SetConfig+0x1a2>
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	d814      	bhi.n	8008afa <UART_SetConfig+0x1ba>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <UART_SetConfig+0x19a>
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	d008      	beq.n	8008aea <UART_SetConfig+0x1aa>
 8008ad8:	e00f      	b.n	8008afa <UART_SetConfig+0x1ba>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae0:	e0ad      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ae8:	e0a9      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008aea:	2304      	movs	r3, #4
 8008aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008af0:	e0a5      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008af2:	2308      	movs	r3, #8
 8008af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008af8:	e0a1      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008afa:	2310      	movs	r3, #16
 8008afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b00:	e09d      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a4a      	ldr	r2, [pc, #296]	; (8008c30 <UART_SetConfig+0x2f0>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d125      	bne.n	8008b58 <UART_SetConfig+0x218>
 8008b0c:	4b45      	ldr	r3, [pc, #276]	; (8008c24 <UART_SetConfig+0x2e4>)
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b16:	2bc0      	cmp	r3, #192	; 0xc0
 8008b18:	d016      	beq.n	8008b48 <UART_SetConfig+0x208>
 8008b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b1c:	d818      	bhi.n	8008b50 <UART_SetConfig+0x210>
 8008b1e:	2b80      	cmp	r3, #128	; 0x80
 8008b20:	d00a      	beq.n	8008b38 <UART_SetConfig+0x1f8>
 8008b22:	2b80      	cmp	r3, #128	; 0x80
 8008b24:	d814      	bhi.n	8008b50 <UART_SetConfig+0x210>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <UART_SetConfig+0x1f0>
 8008b2a:	2b40      	cmp	r3, #64	; 0x40
 8008b2c:	d008      	beq.n	8008b40 <UART_SetConfig+0x200>
 8008b2e:	e00f      	b.n	8008b50 <UART_SetConfig+0x210>
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b36:	e082      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b3e:	e07e      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b46:	e07a      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b4e:	e076      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b56:	e072      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a35      	ldr	r2, [pc, #212]	; (8008c34 <UART_SetConfig+0x2f4>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d12a      	bne.n	8008bb8 <UART_SetConfig+0x278>
 8008b62:	4b30      	ldr	r3, [pc, #192]	; (8008c24 <UART_SetConfig+0x2e4>)
 8008b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b70:	d01a      	beq.n	8008ba8 <UART_SetConfig+0x268>
 8008b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b76:	d81b      	bhi.n	8008bb0 <UART_SetConfig+0x270>
 8008b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7c:	d00c      	beq.n	8008b98 <UART_SetConfig+0x258>
 8008b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b82:	d815      	bhi.n	8008bb0 <UART_SetConfig+0x270>
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <UART_SetConfig+0x250>
 8008b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8c:	d008      	beq.n	8008ba0 <UART_SetConfig+0x260>
 8008b8e:	e00f      	b.n	8008bb0 <UART_SetConfig+0x270>
 8008b90:	2300      	movs	r3, #0
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b96:	e052      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b9e:	e04e      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba6:	e04a      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bae:	e046      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bb6:	e042      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a17      	ldr	r2, [pc, #92]	; (8008c1c <UART_SetConfig+0x2dc>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d13a      	bne.n	8008c38 <UART_SetConfig+0x2f8>
 8008bc2:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <UART_SetConfig+0x2e4>)
 8008bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008bcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bd0:	d01a      	beq.n	8008c08 <UART_SetConfig+0x2c8>
 8008bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bd6:	d81b      	bhi.n	8008c10 <UART_SetConfig+0x2d0>
 8008bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bdc:	d00c      	beq.n	8008bf8 <UART_SetConfig+0x2b8>
 8008bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008be2:	d815      	bhi.n	8008c10 <UART_SetConfig+0x2d0>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <UART_SetConfig+0x2b0>
 8008be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bec:	d008      	beq.n	8008c00 <UART_SetConfig+0x2c0>
 8008bee:	e00f      	b.n	8008c10 <UART_SetConfig+0x2d0>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bf6:	e022      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfe:	e01e      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008c00:	2304      	movs	r3, #4
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c06:	e01a      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008c08:	2308      	movs	r3, #8
 8008c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0e:	e016      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008c10:	2310      	movs	r3, #16
 8008c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c16:	e012      	b.n	8008c3e <UART_SetConfig+0x2fe>
 8008c18:	cfff69f3 	.word	0xcfff69f3
 8008c1c:	40008000 	.word	0x40008000
 8008c20:	40013800 	.word	0x40013800
 8008c24:	40021000 	.word	0x40021000
 8008c28:	40004400 	.word	0x40004400
 8008c2c:	40004800 	.word	0x40004800
 8008c30:	40004c00 	.word	0x40004c00
 8008c34:	40005000 	.word	0x40005000
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4aae      	ldr	r2, [pc, #696]	; (8008efc <UART_SetConfig+0x5bc>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	f040 8097 	bne.w	8008d78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	d823      	bhi.n	8008c9a <UART_SetConfig+0x35a>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <UART_SetConfig+0x318>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008c7d 	.word	0x08008c7d
 8008c5c:	08008c9b 	.word	0x08008c9b
 8008c60:	08008c85 	.word	0x08008c85
 8008c64:	08008c9b 	.word	0x08008c9b
 8008c68:	08008c8b 	.word	0x08008c8b
 8008c6c:	08008c9b 	.word	0x08008c9b
 8008c70:	08008c9b 	.word	0x08008c9b
 8008c74:	08008c9b 	.word	0x08008c9b
 8008c78:	08008c93 	.word	0x08008c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c7c:	f7fd f836 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 8008c80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c82:	e010      	b.n	8008ca6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c84:	4b9e      	ldr	r3, [pc, #632]	; (8008f00 <UART_SetConfig+0x5c0>)
 8008c86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c88:	e00d      	b.n	8008ca6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c8a:	f7fc ffc1 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8008c8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c90:	e009      	b.n	8008ca6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c98:	e005      	b.n	8008ca6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 8130 	beq.w	8008f0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	4a94      	ldr	r2, [pc, #592]	; (8008f04 <UART_SetConfig+0x5c4>)
 8008cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	4413      	add	r3, r2
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d305      	bcc.n	8008cde <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d903      	bls.n	8008ce6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ce4:	e113      	b.n	8008f0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	2200      	movs	r2, #0
 8008cea:	60bb      	str	r3, [r7, #8]
 8008cec:	60fa      	str	r2, [r7, #12]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	4a84      	ldr	r2, [pc, #528]	; (8008f04 <UART_SetConfig+0x5c4>)
 8008cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	603b      	str	r3, [r7, #0]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d08:	f7f7 ffd6 	bl	8000cb8 <__aeabi_uldivmod>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4610      	mov	r0, r2
 8008d12:	4619      	mov	r1, r3
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	020b      	lsls	r3, r1, #8
 8008d1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d22:	0202      	lsls	r2, r0, #8
 8008d24:	6979      	ldr	r1, [r7, #20]
 8008d26:	6849      	ldr	r1, [r1, #4]
 8008d28:	0849      	lsrs	r1, r1, #1
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	4605      	mov	r5, r0
 8008d30:	eb12 0804 	adds.w	r8, r2, r4
 8008d34:	eb43 0905 	adc.w	r9, r3, r5
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	469a      	mov	sl, r3
 8008d40:	4693      	mov	fp, r2
 8008d42:	4652      	mov	r2, sl
 8008d44:	465b      	mov	r3, fp
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 ffb5 	bl	8000cb8 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4613      	mov	r3, r2
 8008d54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d5c:	d308      	bcc.n	8008d70 <UART_SetConfig+0x430>
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d64:	d204      	bcs.n	8008d70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6a3a      	ldr	r2, [r7, #32]
 8008d6c:	60da      	str	r2, [r3, #12]
 8008d6e:	e0ce      	b.n	8008f0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d76:	e0ca      	b.n	8008f0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d80:	d166      	bne.n	8008e50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d827      	bhi.n	8008dda <UART_SetConfig+0x49a>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <UART_SetConfig+0x450>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008db5 	.word	0x08008db5
 8008d94:	08008dbd 	.word	0x08008dbd
 8008d98:	08008dc5 	.word	0x08008dc5
 8008d9c:	08008ddb 	.word	0x08008ddb
 8008da0:	08008dcb 	.word	0x08008dcb
 8008da4:	08008ddb 	.word	0x08008ddb
 8008da8:	08008ddb 	.word	0x08008ddb
 8008dac:	08008ddb 	.word	0x08008ddb
 8008db0:	08008dd3 	.word	0x08008dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008db4:	f7fc ff9a 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 8008db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dba:	e014      	b.n	8008de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dbc:	f7fc ffac 	bl	8005d18 <HAL_RCC_GetPCLK2Freq>
 8008dc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dc2:	e010      	b.n	8008de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dc4:	4b4e      	ldr	r3, [pc, #312]	; (8008f00 <UART_SetConfig+0x5c0>)
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008dc8:	e00d      	b.n	8008de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dca:	f7fc ff21 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8008dce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dd0:	e009      	b.n	8008de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008dd8:	e005      	b.n	8008de6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8090 	beq.w	8008f0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	4a44      	ldr	r2, [pc, #272]	; (8008f04 <UART_SetConfig+0x5c4>)
 8008df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e00:	005a      	lsls	r2, r3, #1
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	441a      	add	r2, r3
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b0f      	cmp	r3, #15
 8008e18:	d916      	bls.n	8008e48 <UART_SetConfig+0x508>
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e20:	d212      	bcs.n	8008e48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	f023 030f 	bic.w	r3, r3, #15
 8008e2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	085b      	lsrs	r3, r3, #1
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	8bfb      	ldrh	r3, [r7, #30]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	8bfa      	ldrh	r2, [r7, #30]
 8008e44:	60da      	str	r2, [r3, #12]
 8008e46:	e062      	b.n	8008f0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e4e:	e05e      	b.n	8008f0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d828      	bhi.n	8008eaa <UART_SetConfig+0x56a>
 8008e58:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <UART_SetConfig+0x520>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008e85 	.word	0x08008e85
 8008e64:	08008e8d 	.word	0x08008e8d
 8008e68:	08008e95 	.word	0x08008e95
 8008e6c:	08008eab 	.word	0x08008eab
 8008e70:	08008e9b 	.word	0x08008e9b
 8008e74:	08008eab 	.word	0x08008eab
 8008e78:	08008eab 	.word	0x08008eab
 8008e7c:	08008eab 	.word	0x08008eab
 8008e80:	08008ea3 	.word	0x08008ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e84:	f7fc ff32 	bl	8005cec <HAL_RCC_GetPCLK1Freq>
 8008e88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e8a:	e014      	b.n	8008eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e8c:	f7fc ff44 	bl	8005d18 <HAL_RCC_GetPCLK2Freq>
 8008e90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e92:	e010      	b.n	8008eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e94:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <UART_SetConfig+0x5c0>)
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e98:	e00d      	b.n	8008eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e9a:	f7fc feb9 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8008e9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ea0:	e009      	b.n	8008eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ea8:	e005      	b.n	8008eb6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008eb4:	bf00      	nop
    }

    if (pclk != 0U)
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d028      	beq.n	8008f0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	4a10      	ldr	r2, [pc, #64]	; (8008f04 <UART_SetConfig+0x5c4>)
 8008ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	085b      	lsrs	r3, r3, #1
 8008ed4:	441a      	add	r2, r3
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ede:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	2b0f      	cmp	r3, #15
 8008ee4:	d910      	bls.n	8008f08 <UART_SetConfig+0x5c8>
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eec:	d20c      	bcs.n	8008f08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60da      	str	r2, [r3, #12]
 8008ef8:	e009      	b.n	8008f0e <UART_SetConfig+0x5ce>
 8008efa:	bf00      	nop
 8008efc:	40008000 	.word	0x40008000
 8008f00:	00f42400 	.word	0x00f42400
 8008f04:	0800d59c 	.word	0x0800d59c
      }
      else
      {
        ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2200      	movs	r2, #0
 8008f22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2200      	movs	r2, #0
 8008f28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3730      	adds	r7, #48	; 0x30
 8008f32:	46bd      	mov	sp, r7
 8008f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	430a      	orrs	r2, r1
 8008fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00a      	beq.n	8008fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01a      	beq.n	800904e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009036:	d10a      	bne.n	800904e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	605a      	str	r2, [r3, #4]
  }
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af02      	add	r7, sp, #8
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800908c:	f7f9 fbaa 	bl	80027e4 <HAL_GetTick>
 8009090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b08      	cmp	r3, #8
 800909e:	d10e      	bne.n	80090be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f82f 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e025      	b.n	800910a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d10e      	bne.n	80090ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f819 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e00f      	b.n	800910a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b09c      	sub	sp, #112	; 0x70
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	4613      	mov	r3, r2
 8009120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009122:	e0a9      	b.n	8009278 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912a:	f000 80a5 	beq.w	8009278 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912e:	f7f9 fb59 	bl	80027e4 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800913a:	429a      	cmp	r2, r3
 800913c:	d302      	bcc.n	8009144 <UART_WaitOnFlagUntilTimeout+0x32>
 800913e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009140:	2b00      	cmp	r3, #0
 8009142:	d140      	bne.n	80091c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009158:	667b      	str	r3, [r7, #100]	; 0x64
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009164:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e6      	bne.n	8009144 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3308      	adds	r3, #8
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	e853 3f00 	ldrex	r3, [r3]
 8009184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	f023 0301 	bic.w	r3, r3, #1
 800918c:	663b      	str	r3, [r7, #96]	; 0x60
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3308      	adds	r3, #8
 8009194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009196:	64ba      	str	r2, [r7, #72]	; 0x48
 8009198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800919c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1e5      	bne.n	8009176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e069      	b.n	800929a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d051      	beq.n	8009278 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e2:	d149      	bne.n	8009278 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
 800920e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e6      	bne.n	80091ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	613b      	str	r3, [r7, #16]
   return(result);
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f023 0301 	bic.w	r3, r3, #1
 8009236:	66bb      	str	r3, [r7, #104]	; 0x68
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3308      	adds	r3, #8
 800923e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009240:	623a      	str	r2, [r7, #32]
 8009242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	69f9      	ldr	r1, [r7, #28]
 8009246:	6a3a      	ldr	r2, [r7, #32]
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	61bb      	str	r3, [r7, #24]
   return(result);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e5      	bne.n	8009220 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2220      	movs	r2, #32
 8009258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2220      	movs	r2, #32
 8009268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e010      	b.n	800929a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	69da      	ldr	r2, [r3, #28]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4013      	ands	r3, r2
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	429a      	cmp	r2, r3
 8009286:	bf0c      	ite	eq
 8009288:	2301      	moveq	r3, #1
 800928a:	2300      	movne	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	461a      	mov	r2, r3
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	429a      	cmp	r2, r3
 8009294:	f43f af46 	beq.w	8009124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3770      	adds	r7, #112	; 0x70
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b0a3      	sub	sp, #140	; 0x8c
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d6:	d10e      	bne.n	80092f6 <UART_Start_Receive_IT+0x52>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <UART_Start_Receive_IT+0x48>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092ea:	e02d      	b.n	8009348 <UART_Start_Receive_IT+0xa4>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	22ff      	movs	r2, #255	; 0xff
 80092f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80092f4:	e028      	b.n	8009348 <UART_Start_Receive_IT+0xa4>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10d      	bne.n	800931a <UART_Start_Receive_IT+0x76>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d104      	bne.n	8009310 <UART_Start_Receive_IT+0x6c>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	22ff      	movs	r2, #255	; 0xff
 800930a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800930e:	e01b      	b.n	8009348 <UART_Start_Receive_IT+0xa4>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	227f      	movs	r2, #127	; 0x7f
 8009314:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009318:	e016      	b.n	8009348 <UART_Start_Receive_IT+0xa4>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009322:	d10d      	bne.n	8009340 <UART_Start_Receive_IT+0x9c>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <UART_Start_Receive_IT+0x92>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	227f      	movs	r2, #127	; 0x7f
 8009330:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009334:	e008      	b.n	8009348 <UART_Start_Receive_IT+0xa4>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	223f      	movs	r2, #63	; 0x3f
 800933a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800933e:	e003      	b.n	8009348 <UART_Start_Receive_IT+0xa4>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2222      	movs	r2, #34	; 0x22
 8009354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3308      	adds	r3, #8
 800935e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800936a:	f043 0301 	orr.w	r3, r3, #1
 800936e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800937c:	673a      	str	r2, [r7, #112]	; 0x70
 800937e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009382:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800938a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e3      	bne.n	8009358 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009398:	d153      	bne.n	8009442 <UART_Start_Receive_IT+0x19e>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093a0:	88fa      	ldrh	r2, [r7, #6]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d34d      	bcc.n	8009442 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ae:	d107      	bne.n	80093c0 <UART_Start_Receive_IT+0x11c>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d103      	bne.n	80093c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a4b      	ldr	r2, [pc, #300]	; (80094e8 <UART_Start_Receive_IT+0x244>)
 80093bc:	671a      	str	r2, [r3, #112]	; 0x70
 80093be:	e002      	b.n	80093c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4a4a      	ldr	r2, [pc, #296]	; (80094ec <UART_Start_Receive_IT+0x248>)
 80093c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d01a      	beq.n	800940c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e4      	bne.n	80093d6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3308      	adds	r3, #8
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009422:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3308      	adds	r3, #8
 800942a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800942c:	64ba      	str	r2, [r7, #72]	; 0x48
 800942e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800943a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e5      	bne.n	800940c <UART_Start_Receive_IT+0x168>
 8009440:	e04a      	b.n	80094d8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800944a:	d107      	bne.n	800945c <UART_Start_Receive_IT+0x1b8>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4a26      	ldr	r2, [pc, #152]	; (80094f0 <UART_Start_Receive_IT+0x24c>)
 8009458:	671a      	str	r2, [r3, #112]	; 0x70
 800945a:	e002      	b.n	8009462 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4a25      	ldr	r2, [pc, #148]	; (80094f4 <UART_Start_Receive_IT+0x250>)
 8009460:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d019      	beq.n	80094a6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009486:	677b      	str	r3, [r7, #116]	; 0x74
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009490:	637b      	str	r3, [r7, #52]	; 0x34
 8009492:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800949e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e6      	bne.n	8009472 <UART_Start_Receive_IT+0x1ce>
 80094a4:	e018      	b.n	80094d8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	613b      	str	r3, [r7, #16]
   return(result);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f043 0320 	orr.w	r3, r3, #32
 80094ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094c4:	623b      	str	r3, [r7, #32]
 80094c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	69f9      	ldr	r1, [r7, #28]
 80094ca:	6a3a      	ldr	r2, [r7, #32]
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e6      	bne.n	80094a6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	378c      	adds	r7, #140	; 0x8c
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	08009c01 	.word	0x08009c01
 80094ec:	08009909 	.word	0x08009909
 80094f0:	080097a7 	.word	0x080097a7
 80094f4:	08009647 	.word	0x08009647

080094f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b095      	sub	sp, #84	; 0x54
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951e:	643b      	str	r3, [r7, #64]	; 0x40
 8009520:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800952c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e6      	bne.n	8009500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3308      	adds	r3, #8
 8009538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	61fb      	str	r3, [r7, #28]
   return(result);
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009548:	f023 0301 	bic.w	r3, r3, #1
 800954c:	64bb      	str	r3, [r7, #72]	; 0x48
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800955c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e3      	bne.n	8009532 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956e:	2b01      	cmp	r3, #1
 8009570:	d118      	bne.n	80095a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f023 0310 	bic.w	r3, r3, #16
 8009586:	647b      	str	r3, [r7, #68]	; 0x44
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009590:	61bb      	str	r3, [r7, #24]
 8009592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6979      	ldr	r1, [r7, #20]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	613b      	str	r3, [r7, #16]
   return(result);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e6      	bne.n	8009572 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80095b8:	bf00      	nop
 80095ba:	3754      	adds	r7, #84	; 0x54
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff f996 	bl	8008914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	60bb      	str	r3, [r7, #8]
   return(result);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800960c:	61fb      	str	r3, [r7, #28]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	61bb      	str	r3, [r7, #24]
 8009618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961a:	6979      	ldr	r1, [r7, #20]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	e841 2300 	strex	r3, r2, [r1]
 8009622:	613b      	str	r3, [r7, #16]
   return(result);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1e6      	bne.n	80095f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2220      	movs	r2, #32
 800962e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff f961 	bl	8008900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963e:	bf00      	nop
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b096      	sub	sp, #88	; 0x58
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009654:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965e:	2b22      	cmp	r3, #34	; 0x22
 8009660:	f040 8095 	bne.w	800978e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800966e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009672:	b2d9      	uxtb	r1, r3
 8009674:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009678:	b2da      	uxtb	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967e:	400a      	ands	r2, r1
 8009680:	b2d2      	uxtb	r2, r2
 8009682:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009688:	1c5a      	adds	r2, r3, #1
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009694:	b29b      	uxth	r3, r3
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d178      	bne.n	800979e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096c0:	653b      	str	r3, [r7, #80]	; 0x50
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ca:	647b      	str	r3, [r7, #68]	; 0x44
 80096cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e6      	bne.n	80096ac <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3308      	adds	r3, #8
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	623b      	str	r3, [r7, #32]
   return(result);
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3308      	adds	r3, #8
 80096fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096fe:	633a      	str	r2, [r7, #48]	; 0x30
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009706:	e841 2300 	strex	r3, r2, [r1]
 800970a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1e5      	bne.n	80096de <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009724:	2b01      	cmp	r3, #1
 8009726:	d12e      	bne.n	8009786 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	60fb      	str	r3, [r7, #12]
   return(result);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 0310 	bic.w	r3, r3, #16
 8009742:	64bb      	str	r3, [r7, #72]	; 0x48
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974c:	61fb      	str	r3, [r7, #28]
 800974e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	69b9      	ldr	r1, [r7, #24]
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	617b      	str	r3, [r7, #20]
   return(result);
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e6      	bne.n	800972e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f003 0310 	and.w	r3, r3, #16
 800976a:	2b10      	cmp	r3, #16
 800976c:	d103      	bne.n	8009776 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2210      	movs	r2, #16
 8009774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff f8d2 	bl	8008928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009784:	e00b      	b.n	800979e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7f8 ff16 	bl	80025b8 <HAL_UART_RxCpltCallback>
}
 800978c:	e007      	b.n	800979e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	699a      	ldr	r2, [r3, #24]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f042 0208 	orr.w	r2, r2, #8
 800979c:	619a      	str	r2, [r3, #24]
}
 800979e:	bf00      	nop
 80097a0:	3758      	adds	r7, #88	; 0x58
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b096      	sub	sp, #88	; 0x58
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097be:	2b22      	cmp	r3, #34	; 0x22
 80097c0:	f040 8095 	bne.w	80098ee <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80097d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80097d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80097dc:	4013      	ands	r3, r2
 80097de:	b29a      	uxth	r2, r3
 80097e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e8:	1c9a      	adds	r2, r3, #2
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009806:	b29b      	uxth	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d178      	bne.n	80098fe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982a:	643b      	str	r3, [r7, #64]	; 0x40
 800982c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e6      	bne.n	800980c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	61fb      	str	r3, [r7, #28]
   return(result);
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	64bb      	str	r3, [r7, #72]	; 0x48
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3308      	adds	r3, #8
 800985c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800985e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009860:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e5      	bne.n	800983e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009884:	2b01      	cmp	r3, #1
 8009886:	d12e      	bne.n	80098e6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	e853 3f00 	ldrex	r3, [r3]
 800989a:	60bb      	str	r3, [r7, #8]
   return(result);
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	f023 0310 	bic.w	r3, r3, #16
 80098a2:	647b      	str	r3, [r7, #68]	; 0x44
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	461a      	mov	r2, r3
 80098aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ac:	61bb      	str	r3, [r7, #24]
 80098ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b0:	6979      	ldr	r1, [r7, #20]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	e841 2300 	strex	r3, r2, [r1]
 80098b8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e6      	bne.n	800988e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d103      	bne.n	80098d6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2210      	movs	r2, #16
 80098d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff f822 	bl	8008928 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098e4:	e00b      	b.n	80098fe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7f8 fe66 	bl	80025b8 <HAL_UART_RxCpltCallback>
}
 80098ec:	e007      	b.n	80098fe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f042 0208 	orr.w	r2, r2, #8
 80098fc:	619a      	str	r2, [r3, #24]
}
 80098fe:	bf00      	nop
 8009900:	3758      	adds	r7, #88	; 0x58
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b0a6      	sub	sp, #152	; 0x98
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009916:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993e:	2b22      	cmp	r3, #34	; 0x22
 8009940:	f040 814f 	bne.w	8009be2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800994a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800994e:	e0f6      	b.n	8009b3e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800995a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800995e:	b2d9      	uxtb	r1, r3
 8009960:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009964:	b2da      	uxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996a:	400a      	ands	r2, r1
 800996c:	b2d2      	uxtb	r2, r2
 800996e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009980:	b29b      	uxth	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d053      	beq.n	8009a4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d011      	beq.n	80099d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80099ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00b      	beq.n	80099d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2201      	movs	r2, #1
 80099c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c8:	f043 0201 	orr.w	r2, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d011      	beq.n	8009a02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00b      	beq.n	8009a02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2202      	movs	r2, #2
 80099f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099f8:	f043 0204 	orr.w	r2, r3, #4
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d011      	beq.n	8009a32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2204      	movs	r2, #4
 8009a20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a28:	f043 0202 	orr.w	r2, r3, #2
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d006      	beq.n	8009a4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7fe ff69 	bl	8008914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d173      	bne.n	8009b3e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a7a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009a7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e4      	bne.n	8009a56 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3308      	adds	r3, #8
 8009a92:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aa2:	f023 0301 	bic.w	r3, r3, #1
 8009aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009ab0:	657a      	str	r2, [r7, #84]	; 0x54
 8009ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ab6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e3      	bne.n	8009a8c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2220      	movs	r2, #32
 8009ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d12e      	bne.n	8009b38 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	f023 0310 	bic.w	r3, r3, #16
 8009af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009afe:	643b      	str	r3, [r7, #64]	; 0x40
 8009b00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e6      	bne.n	8009ae0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69db      	ldr	r3, [r3, #28]
 8009b18:	f003 0310 	and.w	r3, r3, #16
 8009b1c:	2b10      	cmp	r3, #16
 8009b1e:	d103      	bne.n	8009b28 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2210      	movs	r2, #16
 8009b26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7fe fef9 	bl	8008928 <HAL_UARTEx_RxEventCallback>
 8009b36:	e002      	b.n	8009b3e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7f8 fd3d 	bl	80025b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d006      	beq.n	8009b54 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b4a:	f003 0320 	and.w	r3, r3, #32
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f47f aefe 	bne.w	8009950 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b5e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d045      	beq.n	8009bf2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d23e      	bcs.n	8009bf2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3308      	adds	r3, #8
 8009b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b8a:	673b      	str	r3, [r7, #112]	; 0x70
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3308      	adds	r3, #8
 8009b92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e5      	bne.n	8009b74 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a14      	ldr	r2, [pc, #80]	; (8009bfc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009bac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	e853 3f00 	ldrex	r3, [r3]
 8009bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f043 0320 	orr.w	r3, r3, #32
 8009bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bcc:	61bb      	str	r3, [r7, #24]
 8009bce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6979      	ldr	r1, [r7, #20]
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e6      	bne.n	8009bae <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009be0:	e007      	b.n	8009bf2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	699a      	ldr	r2, [r3, #24]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0208 	orr.w	r2, r2, #8
 8009bf0:	619a      	str	r2, [r3, #24]
}
 8009bf2:	bf00      	nop
 8009bf4:	3798      	adds	r7, #152	; 0x98
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	08009647 	.word	0x08009647

08009c00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b0a8      	sub	sp, #160	; 0xa0
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c0e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c36:	2b22      	cmp	r3, #34	; 0x22
 8009c38:	f040 8153 	bne.w	8009ee2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c42:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c46:	e0fa      	b.n	8009e3e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c5a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009c5e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009c62:	4013      	ands	r3, r2
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c70:	1c9a      	adds	r2, r3, #2
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	69db      	ldr	r3, [r3, #28]
 8009c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d053      	beq.n	8009d46 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d011      	beq.n	8009cce <UART_RxISR_16BIT_FIFOEN+0xce>
 8009caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc4:	f043 0201 	orr.w	r2, r3, #1
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d011      	beq.n	8009cfe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00b      	beq.n	8009cfe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2202      	movs	r2, #2
 8009cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cf4:	f043 0204 	orr.w	r2, r3, #4
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d02:	f003 0304 	and.w	r3, r3, #4
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d011      	beq.n	8009d2e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00b      	beq.n	8009d2e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2204      	movs	r2, #4
 8009d1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d24:	f043 0202 	orr.w	r2, r3, #2
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d006      	beq.n	8009d46 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7fe fdeb 	bl	8008914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d175      	bne.n	8009e3e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d76:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e4      	bne.n	8009d52 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d92:	e853 3f00 	ldrex	r3, [r3]
 8009d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d9e:	f023 0301 	bic.w	r3, r3, #1
 8009da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3308      	adds	r3, #8
 8009dac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009db0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009db2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db8:	e841 2300 	strex	r3, r2, [r1]
 8009dbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e1      	bne.n	8009d88 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d12e      	bne.n	8009e38 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df0:	f023 0310 	bic.w	r3, r3, #16
 8009df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8009e00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e6      	bne.n	8009de0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	f003 0310 	and.w	r3, r3, #16
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d103      	bne.n	8009e28 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2210      	movs	r2, #16
 8009e26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7fe fd79 	bl	8008928 <HAL_UARTEx_RxEventCallback>
 8009e36:	e002      	b.n	8009e3e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7f8 fbbd 	bl	80025b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d006      	beq.n	8009e54 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f47f aefa 	bne.w	8009c48 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e5a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e5e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d045      	beq.n	8009ef2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e6c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d23e      	bcs.n	8009ef2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	e853 3f00 	ldrex	r3, [r3]
 8009e82:	623b      	str	r3, [r7, #32]
   return(result);
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e8a:	677b      	str	r3, [r7, #116]	; 0x74
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009e94:	633a      	str	r2, [r7, #48]	; 0x30
 8009e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9c:	e841 2300 	strex	r3, r2, [r1]
 8009ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1e5      	bne.n	8009e74 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a14      	ldr	r2, [pc, #80]	; (8009efc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009eac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f043 0320 	orr.w	r3, r3, #32
 8009ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	69b9      	ldr	r1, [r7, #24]
 8009ed2:	69fa      	ldr	r2, [r7, #28]
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e6      	bne.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ee0:	e007      	b.n	8009ef2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699a      	ldr	r2, [r3, #24]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f042 0208 	orr.w	r2, r2, #8
 8009ef0:	619a      	str	r2, [r3, #24]
}
 8009ef2:	bf00      	nop
 8009ef4:	37a0      	adds	r7, #160	; 0xa0
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	080097a7 	.word	0x080097a7

08009f00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d101      	bne.n	8009f52 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f4e:	2302      	movs	r3, #2
 8009f50:	e027      	b.n	8009fa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2224      	movs	r2, #36	; 0x24
 8009f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0201 	bic.w	r2, r2, #1
 8009f78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b084      	sub	sp, #16
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d101      	bne.n	8009fc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e02d      	b.n	800a022 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2224      	movs	r2, #36	; 0x24
 8009fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0201 	bic.w	r2, r2, #1
 8009fec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f850 	bl	800a0a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2220      	movs	r2, #32
 800a014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d101      	bne.n	800a042 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a03e:	2302      	movs	r3, #2
 800a040:	e02d      	b.n	800a09e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2224      	movs	r2, #36	; 0x24
 800a04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 0201 	bic.w	r2, r2, #1
 800a068:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f812 	bl	800a0a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2220      	movs	r2, #32
 800a090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d108      	bne.n	800a0ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0c8:	e031      	b.n	800a12e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0ca:	2308      	movs	r3, #8
 800a0cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0ce:	2308      	movs	r3, #8
 800a0d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	0e5b      	lsrs	r3, r3, #25
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	0f5b      	lsrs	r3, r3, #29
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	f003 0307 	and.w	r3, r3, #7
 800a0f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
 800a0f4:	7b3a      	ldrb	r2, [r7, #12]
 800a0f6:	4911      	ldr	r1, [pc, #68]	; (800a13c <UARTEx_SetNbDataToProcess+0x94>)
 800a0f8:	5c8a      	ldrb	r2, [r1, r2]
 800a0fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0fe:	7b3a      	ldrb	r2, [r7, #12]
 800a100:	490f      	ldr	r1, [pc, #60]	; (800a140 <UARTEx_SetNbDataToProcess+0x98>)
 800a102:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a104:	fb93 f3f2 	sdiv	r3, r3, r2
 800a108:	b29a      	uxth	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	7b7a      	ldrb	r2, [r7, #13]
 800a114:	4909      	ldr	r1, [pc, #36]	; (800a13c <UARTEx_SetNbDataToProcess+0x94>)
 800a116:	5c8a      	ldrb	r2, [r1, r2]
 800a118:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a11c:	7b7a      	ldrb	r2, [r7, #13]
 800a11e:	4908      	ldr	r1, [pc, #32]	; (800a140 <UARTEx_SetNbDataToProcess+0x98>)
 800a120:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a122:	fb93 f3f2 	sdiv	r3, r3, r2
 800a126:	b29a      	uxth	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	0800d5b4 	.word	0x0800d5b4
 800a140:	0800d5bc 	.word	0x0800d5bc

0800a144 <atoi>:
 800a144:	220a      	movs	r2, #10
 800a146:	2100      	movs	r1, #0
 800a148:	f000 bdce 	b.w	800ace8 <strtol>

0800a14c <__errno>:
 800a14c:	4b01      	ldr	r3, [pc, #4]	; (800a154 <__errno+0x8>)
 800a14e:	6818      	ldr	r0, [r3, #0]
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	2000001c 	.word	0x2000001c

0800a158 <__libc_init_array>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4d0d      	ldr	r5, [pc, #52]	; (800a190 <__libc_init_array+0x38>)
 800a15c:	4c0d      	ldr	r4, [pc, #52]	; (800a194 <__libc_init_array+0x3c>)
 800a15e:	1b64      	subs	r4, r4, r5
 800a160:	10a4      	asrs	r4, r4, #2
 800a162:	2600      	movs	r6, #0
 800a164:	42a6      	cmp	r6, r4
 800a166:	d109      	bne.n	800a17c <__libc_init_array+0x24>
 800a168:	4d0b      	ldr	r5, [pc, #44]	; (800a198 <__libc_init_array+0x40>)
 800a16a:	4c0c      	ldr	r4, [pc, #48]	; (800a19c <__libc_init_array+0x44>)
 800a16c:	f003 f81e 	bl	800d1ac <_init>
 800a170:	1b64      	subs	r4, r4, r5
 800a172:	10a4      	asrs	r4, r4, #2
 800a174:	2600      	movs	r6, #0
 800a176:	42a6      	cmp	r6, r4
 800a178:	d105      	bne.n	800a186 <__libc_init_array+0x2e>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a180:	4798      	blx	r3
 800a182:	3601      	adds	r6, #1
 800a184:	e7ee      	b.n	800a164 <__libc_init_array+0xc>
 800a186:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18a:	4798      	blx	r3
 800a18c:	3601      	adds	r6, #1
 800a18e:	e7f2      	b.n	800a176 <__libc_init_array+0x1e>
 800a190:	0800da0c 	.word	0x0800da0c
 800a194:	0800da0c 	.word	0x0800da0c
 800a198:	0800da0c 	.word	0x0800da0c
 800a19c:	0800da10 	.word	0x0800da10

0800a1a0 <memset>:
 800a1a0:	4402      	add	r2, r0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d100      	bne.n	800a1aa <memset+0xa>
 800a1a8:	4770      	bx	lr
 800a1aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ae:	e7f9      	b.n	800a1a4 <memset+0x4>

0800a1b0 <__cvt>:
 800a1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b4:	ec55 4b10 	vmov	r4, r5, d0
 800a1b8:	2d00      	cmp	r5, #0
 800a1ba:	460e      	mov	r6, r1
 800a1bc:	4619      	mov	r1, r3
 800a1be:	462b      	mov	r3, r5
 800a1c0:	bfbb      	ittet	lt
 800a1c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1c6:	461d      	movlt	r5, r3
 800a1c8:	2300      	movge	r3, #0
 800a1ca:	232d      	movlt	r3, #45	; 0x2d
 800a1cc:	700b      	strb	r3, [r1, #0]
 800a1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1d4:	4691      	mov	r9, r2
 800a1d6:	f023 0820 	bic.w	r8, r3, #32
 800a1da:	bfbc      	itt	lt
 800a1dc:	4622      	movlt	r2, r4
 800a1de:	4614      	movlt	r4, r2
 800a1e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1e4:	d005      	beq.n	800a1f2 <__cvt+0x42>
 800a1e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a1ea:	d100      	bne.n	800a1ee <__cvt+0x3e>
 800a1ec:	3601      	adds	r6, #1
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	e000      	b.n	800a1f4 <__cvt+0x44>
 800a1f2:	2103      	movs	r1, #3
 800a1f4:	ab03      	add	r3, sp, #12
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	ab02      	add	r3, sp, #8
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	ec45 4b10 	vmov	d0, r4, r5
 800a200:	4653      	mov	r3, sl
 800a202:	4632      	mov	r2, r6
 800a204:	f000 fe24 	bl	800ae50 <_dtoa_r>
 800a208:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a20c:	4607      	mov	r7, r0
 800a20e:	d102      	bne.n	800a216 <__cvt+0x66>
 800a210:	f019 0f01 	tst.w	r9, #1
 800a214:	d022      	beq.n	800a25c <__cvt+0xac>
 800a216:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a21a:	eb07 0906 	add.w	r9, r7, r6
 800a21e:	d110      	bne.n	800a242 <__cvt+0x92>
 800a220:	783b      	ldrb	r3, [r7, #0]
 800a222:	2b30      	cmp	r3, #48	; 0x30
 800a224:	d10a      	bne.n	800a23c <__cvt+0x8c>
 800a226:	2200      	movs	r2, #0
 800a228:	2300      	movs	r3, #0
 800a22a:	4620      	mov	r0, r4
 800a22c:	4629      	mov	r1, r5
 800a22e:	f7f6 fc83 	bl	8000b38 <__aeabi_dcmpeq>
 800a232:	b918      	cbnz	r0, 800a23c <__cvt+0x8c>
 800a234:	f1c6 0601 	rsb	r6, r6, #1
 800a238:	f8ca 6000 	str.w	r6, [sl]
 800a23c:	f8da 3000 	ldr.w	r3, [sl]
 800a240:	4499      	add	r9, r3
 800a242:	2200      	movs	r2, #0
 800a244:	2300      	movs	r3, #0
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 fc75 	bl	8000b38 <__aeabi_dcmpeq>
 800a24e:	b108      	cbz	r0, 800a254 <__cvt+0xa4>
 800a250:	f8cd 900c 	str.w	r9, [sp, #12]
 800a254:	2230      	movs	r2, #48	; 0x30
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	454b      	cmp	r3, r9
 800a25a:	d307      	bcc.n	800a26c <__cvt+0xbc>
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a260:	1bdb      	subs	r3, r3, r7
 800a262:	4638      	mov	r0, r7
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	b004      	add	sp, #16
 800a268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26c:	1c59      	adds	r1, r3, #1
 800a26e:	9103      	str	r1, [sp, #12]
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	e7f0      	b.n	800a256 <__cvt+0xa6>

0800a274 <__exponent>:
 800a274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a276:	4603      	mov	r3, r0
 800a278:	2900      	cmp	r1, #0
 800a27a:	bfb8      	it	lt
 800a27c:	4249      	neglt	r1, r1
 800a27e:	f803 2b02 	strb.w	r2, [r3], #2
 800a282:	bfb4      	ite	lt
 800a284:	222d      	movlt	r2, #45	; 0x2d
 800a286:	222b      	movge	r2, #43	; 0x2b
 800a288:	2909      	cmp	r1, #9
 800a28a:	7042      	strb	r2, [r0, #1]
 800a28c:	dd2a      	ble.n	800a2e4 <__exponent+0x70>
 800a28e:	f10d 0407 	add.w	r4, sp, #7
 800a292:	46a4      	mov	ip, r4
 800a294:	270a      	movs	r7, #10
 800a296:	46a6      	mov	lr, r4
 800a298:	460a      	mov	r2, r1
 800a29a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a29e:	fb07 1516 	mls	r5, r7, r6, r1
 800a2a2:	3530      	adds	r5, #48	; 0x30
 800a2a4:	2a63      	cmp	r2, #99	; 0x63
 800a2a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	dcf1      	bgt.n	800a296 <__exponent+0x22>
 800a2b2:	3130      	adds	r1, #48	; 0x30
 800a2b4:	f1ae 0502 	sub.w	r5, lr, #2
 800a2b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2bc:	1c44      	adds	r4, r0, #1
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4561      	cmp	r1, ip
 800a2c2:	d30a      	bcc.n	800a2da <__exponent+0x66>
 800a2c4:	f10d 0209 	add.w	r2, sp, #9
 800a2c8:	eba2 020e 	sub.w	r2, r2, lr
 800a2cc:	4565      	cmp	r5, ip
 800a2ce:	bf88      	it	hi
 800a2d0:	2200      	movhi	r2, #0
 800a2d2:	4413      	add	r3, r2
 800a2d4:	1a18      	subs	r0, r3, r0
 800a2d6:	b003      	add	sp, #12
 800a2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2de:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a2e2:	e7ed      	b.n	800a2c0 <__exponent+0x4c>
 800a2e4:	2330      	movs	r3, #48	; 0x30
 800a2e6:	3130      	adds	r1, #48	; 0x30
 800a2e8:	7083      	strb	r3, [r0, #2]
 800a2ea:	70c1      	strb	r1, [r0, #3]
 800a2ec:	1d03      	adds	r3, r0, #4
 800a2ee:	e7f1      	b.n	800a2d4 <__exponent+0x60>

0800a2f0 <_printf_float>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	ed2d 8b02 	vpush	{d8}
 800a2f8:	b08d      	sub	sp, #52	; 0x34
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a300:	4616      	mov	r6, r2
 800a302:	461f      	mov	r7, r3
 800a304:	4605      	mov	r5, r0
 800a306:	f001 fba3 	bl	800ba50 <_localeconv_r>
 800a30a:	f8d0 a000 	ldr.w	sl, [r0]
 800a30e:	4650      	mov	r0, sl
 800a310:	f7f5 ff90 	bl	8000234 <strlen>
 800a314:	2300      	movs	r3, #0
 800a316:	930a      	str	r3, [sp, #40]	; 0x28
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	9305      	str	r3, [sp, #20]
 800a31c:	f8d8 3000 	ldr.w	r3, [r8]
 800a320:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a324:	3307      	adds	r3, #7
 800a326:	f023 0307 	bic.w	r3, r3, #7
 800a32a:	f103 0208 	add.w	r2, r3, #8
 800a32e:	f8c8 2000 	str.w	r2, [r8]
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a33a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a33e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a342:	9307      	str	r3, [sp, #28]
 800a344:	f8cd 8018 	str.w	r8, [sp, #24]
 800a348:	ee08 0a10 	vmov	s16, r0
 800a34c:	4b9f      	ldr	r3, [pc, #636]	; (800a5cc <_printf_float+0x2dc>)
 800a34e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a352:	f04f 32ff 	mov.w	r2, #4294967295
 800a356:	f7f6 fc21 	bl	8000b9c <__aeabi_dcmpun>
 800a35a:	bb88      	cbnz	r0, 800a3c0 <_printf_float+0xd0>
 800a35c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a360:	4b9a      	ldr	r3, [pc, #616]	; (800a5cc <_printf_float+0x2dc>)
 800a362:	f04f 32ff 	mov.w	r2, #4294967295
 800a366:	f7f6 fbfb 	bl	8000b60 <__aeabi_dcmple>
 800a36a:	bb48      	cbnz	r0, 800a3c0 <_printf_float+0xd0>
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	4640      	mov	r0, r8
 800a372:	4649      	mov	r1, r9
 800a374:	f7f6 fbea 	bl	8000b4c <__aeabi_dcmplt>
 800a378:	b110      	cbz	r0, 800a380 <_printf_float+0x90>
 800a37a:	232d      	movs	r3, #45	; 0x2d
 800a37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a380:	4b93      	ldr	r3, [pc, #588]	; (800a5d0 <_printf_float+0x2e0>)
 800a382:	4894      	ldr	r0, [pc, #592]	; (800a5d4 <_printf_float+0x2e4>)
 800a384:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a388:	bf94      	ite	ls
 800a38a:	4698      	movls	r8, r3
 800a38c:	4680      	movhi	r8, r0
 800a38e:	2303      	movs	r3, #3
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	9b05      	ldr	r3, [sp, #20]
 800a394:	f023 0204 	bic.w	r2, r3, #4
 800a398:	6022      	str	r2, [r4, #0]
 800a39a:	f04f 0900 	mov.w	r9, #0
 800a39e:	9700      	str	r7, [sp, #0]
 800a3a0:	4633      	mov	r3, r6
 800a3a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 f9d8 	bl	800a75c <_printf_common>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f040 8090 	bne.w	800a4d2 <_printf_float+0x1e2>
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b6:	b00d      	add	sp, #52	; 0x34
 800a3b8:	ecbd 8b02 	vpop	{d8}
 800a3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	464b      	mov	r3, r9
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	f7f6 fbe8 	bl	8000b9c <__aeabi_dcmpun>
 800a3cc:	b140      	cbz	r0, 800a3e0 <_printf_float+0xf0>
 800a3ce:	464b      	mov	r3, r9
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	bfbc      	itt	lt
 800a3d4:	232d      	movlt	r3, #45	; 0x2d
 800a3d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a3da:	487f      	ldr	r0, [pc, #508]	; (800a5d8 <_printf_float+0x2e8>)
 800a3dc:	4b7f      	ldr	r3, [pc, #508]	; (800a5dc <_printf_float+0x2ec>)
 800a3de:	e7d1      	b.n	800a384 <_printf_float+0x94>
 800a3e0:	6863      	ldr	r3, [r4, #4]
 800a3e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a3e6:	9206      	str	r2, [sp, #24]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	d13f      	bne.n	800a46c <_printf_float+0x17c>
 800a3ec:	2306      	movs	r3, #6
 800a3ee:	6063      	str	r3, [r4, #4]
 800a3f0:	9b05      	ldr	r3, [sp, #20]
 800a3f2:	6861      	ldr	r1, [r4, #4]
 800a3f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9303      	str	r3, [sp, #12]
 800a3fc:	ab0a      	add	r3, sp, #40	; 0x28
 800a3fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a402:	ab09      	add	r3, sp, #36	; 0x24
 800a404:	ec49 8b10 	vmov	d0, r8, r9
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	6022      	str	r2, [r4, #0]
 800a40c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a410:	4628      	mov	r0, r5
 800a412:	f7ff fecd 	bl	800a1b0 <__cvt>
 800a416:	9b06      	ldr	r3, [sp, #24]
 800a418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a41a:	2b47      	cmp	r3, #71	; 0x47
 800a41c:	4680      	mov	r8, r0
 800a41e:	d108      	bne.n	800a432 <_printf_float+0x142>
 800a420:	1cc8      	adds	r0, r1, #3
 800a422:	db02      	blt.n	800a42a <_printf_float+0x13a>
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	4299      	cmp	r1, r3
 800a428:	dd41      	ble.n	800a4ae <_printf_float+0x1be>
 800a42a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a42e:	fa5f fb8b 	uxtb.w	fp, fp
 800a432:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a436:	d820      	bhi.n	800a47a <_printf_float+0x18a>
 800a438:	3901      	subs	r1, #1
 800a43a:	465a      	mov	r2, fp
 800a43c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a440:	9109      	str	r1, [sp, #36]	; 0x24
 800a442:	f7ff ff17 	bl	800a274 <__exponent>
 800a446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a448:	1813      	adds	r3, r2, r0
 800a44a:	2a01      	cmp	r2, #1
 800a44c:	4681      	mov	r9, r0
 800a44e:	6123      	str	r3, [r4, #16]
 800a450:	dc02      	bgt.n	800a458 <_printf_float+0x168>
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	07d2      	lsls	r2, r2, #31
 800a456:	d501      	bpl.n	800a45c <_printf_float+0x16c>
 800a458:	3301      	adds	r3, #1
 800a45a:	6123      	str	r3, [r4, #16]
 800a45c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a460:	2b00      	cmp	r3, #0
 800a462:	d09c      	beq.n	800a39e <_printf_float+0xae>
 800a464:	232d      	movs	r3, #45	; 0x2d
 800a466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a46a:	e798      	b.n	800a39e <_printf_float+0xae>
 800a46c:	9a06      	ldr	r2, [sp, #24]
 800a46e:	2a47      	cmp	r2, #71	; 0x47
 800a470:	d1be      	bne.n	800a3f0 <_printf_float+0x100>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1bc      	bne.n	800a3f0 <_printf_float+0x100>
 800a476:	2301      	movs	r3, #1
 800a478:	e7b9      	b.n	800a3ee <_printf_float+0xfe>
 800a47a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a47e:	d118      	bne.n	800a4b2 <_printf_float+0x1c2>
 800a480:	2900      	cmp	r1, #0
 800a482:	6863      	ldr	r3, [r4, #4]
 800a484:	dd0b      	ble.n	800a49e <_printf_float+0x1ae>
 800a486:	6121      	str	r1, [r4, #16]
 800a488:	b913      	cbnz	r3, 800a490 <_printf_float+0x1a0>
 800a48a:	6822      	ldr	r2, [r4, #0]
 800a48c:	07d0      	lsls	r0, r2, #31
 800a48e:	d502      	bpl.n	800a496 <_printf_float+0x1a6>
 800a490:	3301      	adds	r3, #1
 800a492:	440b      	add	r3, r1
 800a494:	6123      	str	r3, [r4, #16]
 800a496:	65a1      	str	r1, [r4, #88]	; 0x58
 800a498:	f04f 0900 	mov.w	r9, #0
 800a49c:	e7de      	b.n	800a45c <_printf_float+0x16c>
 800a49e:	b913      	cbnz	r3, 800a4a6 <_printf_float+0x1b6>
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	07d2      	lsls	r2, r2, #31
 800a4a4:	d501      	bpl.n	800a4aa <_printf_float+0x1ba>
 800a4a6:	3302      	adds	r3, #2
 800a4a8:	e7f4      	b.n	800a494 <_printf_float+0x1a4>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e7f2      	b.n	800a494 <_printf_float+0x1a4>
 800a4ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b4:	4299      	cmp	r1, r3
 800a4b6:	db05      	blt.n	800a4c4 <_printf_float+0x1d4>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	6121      	str	r1, [r4, #16]
 800a4bc:	07d8      	lsls	r0, r3, #31
 800a4be:	d5ea      	bpl.n	800a496 <_printf_float+0x1a6>
 800a4c0:	1c4b      	adds	r3, r1, #1
 800a4c2:	e7e7      	b.n	800a494 <_printf_float+0x1a4>
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	bfd4      	ite	le
 800a4c8:	f1c1 0202 	rsble	r2, r1, #2
 800a4cc:	2201      	movgt	r2, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	e7e0      	b.n	800a494 <_printf_float+0x1a4>
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	055a      	lsls	r2, r3, #21
 800a4d6:	d407      	bmi.n	800a4e8 <_printf_float+0x1f8>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	4642      	mov	r2, r8
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d12c      	bne.n	800a540 <_printf_float+0x250>
 800a4e6:	e764      	b.n	800a3b2 <_printf_float+0xc2>
 800a4e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4ec:	f240 80e0 	bls.w	800a6b0 <_printf_float+0x3c0>
 800a4f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f7f6 fb1e 	bl	8000b38 <__aeabi_dcmpeq>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d034      	beq.n	800a56a <_printf_float+0x27a>
 800a500:	4a37      	ldr	r2, [pc, #220]	; (800a5e0 <_printf_float+0x2f0>)
 800a502:	2301      	movs	r3, #1
 800a504:	4631      	mov	r1, r6
 800a506:	4628      	mov	r0, r5
 800a508:	47b8      	blx	r7
 800a50a:	3001      	adds	r0, #1
 800a50c:	f43f af51 	beq.w	800a3b2 <_printf_float+0xc2>
 800a510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a514:	429a      	cmp	r2, r3
 800a516:	db02      	blt.n	800a51e <_printf_float+0x22e>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	07d8      	lsls	r0, r3, #31
 800a51c:	d510      	bpl.n	800a540 <_printf_float+0x250>
 800a51e:	ee18 3a10 	vmov	r3, s16
 800a522:	4652      	mov	r2, sl
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	f43f af41 	beq.w	800a3b2 <_printf_float+0xc2>
 800a530:	f04f 0800 	mov.w	r8, #0
 800a534:	f104 091a 	add.w	r9, r4, #26
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	3b01      	subs	r3, #1
 800a53c:	4543      	cmp	r3, r8
 800a53e:	dc09      	bgt.n	800a554 <_printf_float+0x264>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	079b      	lsls	r3, r3, #30
 800a544:	f100 8105 	bmi.w	800a752 <_printf_float+0x462>
 800a548:	68e0      	ldr	r0, [r4, #12]
 800a54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a54c:	4298      	cmp	r0, r3
 800a54e:	bfb8      	it	lt
 800a550:	4618      	movlt	r0, r3
 800a552:	e730      	b.n	800a3b6 <_printf_float+0xc6>
 800a554:	2301      	movs	r3, #1
 800a556:	464a      	mov	r2, r9
 800a558:	4631      	mov	r1, r6
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b8      	blx	r7
 800a55e:	3001      	adds	r0, #1
 800a560:	f43f af27 	beq.w	800a3b2 <_printf_float+0xc2>
 800a564:	f108 0801 	add.w	r8, r8, #1
 800a568:	e7e6      	b.n	800a538 <_printf_float+0x248>
 800a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dc39      	bgt.n	800a5e4 <_printf_float+0x2f4>
 800a570:	4a1b      	ldr	r2, [pc, #108]	; (800a5e0 <_printf_float+0x2f0>)
 800a572:	2301      	movs	r3, #1
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af19 	beq.w	800a3b2 <_printf_float+0xc2>
 800a580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a584:	4313      	orrs	r3, r2
 800a586:	d102      	bne.n	800a58e <_printf_float+0x29e>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	07d9      	lsls	r1, r3, #31
 800a58c:	d5d8      	bpl.n	800a540 <_printf_float+0x250>
 800a58e:	ee18 3a10 	vmov	r3, s16
 800a592:	4652      	mov	r2, sl
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f af09 	beq.w	800a3b2 <_printf_float+0xc2>
 800a5a0:	f04f 0900 	mov.w	r9, #0
 800a5a4:	f104 0a1a 	add.w	sl, r4, #26
 800a5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5aa:	425b      	negs	r3, r3
 800a5ac:	454b      	cmp	r3, r9
 800a5ae:	dc01      	bgt.n	800a5b4 <_printf_float+0x2c4>
 800a5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b2:	e792      	b.n	800a4da <_printf_float+0x1ea>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	4652      	mov	r2, sl
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47b8      	blx	r7
 800a5be:	3001      	adds	r0, #1
 800a5c0:	f43f aef7 	beq.w	800a3b2 <_printf_float+0xc2>
 800a5c4:	f109 0901 	add.w	r9, r9, #1
 800a5c8:	e7ee      	b.n	800a5a8 <_printf_float+0x2b8>
 800a5ca:	bf00      	nop
 800a5cc:	7fefffff 	.word	0x7fefffff
 800a5d0:	0800d5c8 	.word	0x0800d5c8
 800a5d4:	0800d5cc 	.word	0x0800d5cc
 800a5d8:	0800d5d4 	.word	0x0800d5d4
 800a5dc:	0800d5d0 	.word	0x0800d5d0
 800a5e0:	0800d5d8 	.word	0x0800d5d8
 800a5e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	bfa8      	it	ge
 800a5ec:	461a      	movge	r2, r3
 800a5ee:	2a00      	cmp	r2, #0
 800a5f0:	4691      	mov	r9, r2
 800a5f2:	dc37      	bgt.n	800a664 <_printf_float+0x374>
 800a5f4:	f04f 0b00 	mov.w	fp, #0
 800a5f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5fc:	f104 021a 	add.w	r2, r4, #26
 800a600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a602:	9305      	str	r3, [sp, #20]
 800a604:	eba3 0309 	sub.w	r3, r3, r9
 800a608:	455b      	cmp	r3, fp
 800a60a:	dc33      	bgt.n	800a674 <_printf_float+0x384>
 800a60c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a610:	429a      	cmp	r2, r3
 800a612:	db3b      	blt.n	800a68c <_printf_float+0x39c>
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	07da      	lsls	r2, r3, #31
 800a618:	d438      	bmi.n	800a68c <_printf_float+0x39c>
 800a61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a61c:	9a05      	ldr	r2, [sp, #20]
 800a61e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a620:	1a9a      	subs	r2, r3, r2
 800a622:	eba3 0901 	sub.w	r9, r3, r1
 800a626:	4591      	cmp	r9, r2
 800a628:	bfa8      	it	ge
 800a62a:	4691      	movge	r9, r2
 800a62c:	f1b9 0f00 	cmp.w	r9, #0
 800a630:	dc35      	bgt.n	800a69e <_printf_float+0x3ae>
 800a632:	f04f 0800 	mov.w	r8, #0
 800a636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a63a:	f104 0a1a 	add.w	sl, r4, #26
 800a63e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a642:	1a9b      	subs	r3, r3, r2
 800a644:	eba3 0309 	sub.w	r3, r3, r9
 800a648:	4543      	cmp	r3, r8
 800a64a:	f77f af79 	ble.w	800a540 <_printf_float+0x250>
 800a64e:	2301      	movs	r3, #1
 800a650:	4652      	mov	r2, sl
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	47b8      	blx	r7
 800a658:	3001      	adds	r0, #1
 800a65a:	f43f aeaa 	beq.w	800a3b2 <_printf_float+0xc2>
 800a65e:	f108 0801 	add.w	r8, r8, #1
 800a662:	e7ec      	b.n	800a63e <_printf_float+0x34e>
 800a664:	4613      	mov	r3, r2
 800a666:	4631      	mov	r1, r6
 800a668:	4642      	mov	r2, r8
 800a66a:	4628      	mov	r0, r5
 800a66c:	47b8      	blx	r7
 800a66e:	3001      	adds	r0, #1
 800a670:	d1c0      	bne.n	800a5f4 <_printf_float+0x304>
 800a672:	e69e      	b.n	800a3b2 <_printf_float+0xc2>
 800a674:	2301      	movs	r3, #1
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	9205      	str	r2, [sp, #20]
 800a67c:	47b8      	blx	r7
 800a67e:	3001      	adds	r0, #1
 800a680:	f43f ae97 	beq.w	800a3b2 <_printf_float+0xc2>
 800a684:	9a05      	ldr	r2, [sp, #20]
 800a686:	f10b 0b01 	add.w	fp, fp, #1
 800a68a:	e7b9      	b.n	800a600 <_printf_float+0x310>
 800a68c:	ee18 3a10 	vmov	r3, s16
 800a690:	4652      	mov	r2, sl
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	d1be      	bne.n	800a61a <_printf_float+0x32a>
 800a69c:	e689      	b.n	800a3b2 <_printf_float+0xc2>
 800a69e:	9a05      	ldr	r2, [sp, #20]
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	4442      	add	r2, r8
 800a6a4:	4631      	mov	r1, r6
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	47b8      	blx	r7
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d1c1      	bne.n	800a632 <_printf_float+0x342>
 800a6ae:	e680      	b.n	800a3b2 <_printf_float+0xc2>
 800a6b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b2:	2a01      	cmp	r2, #1
 800a6b4:	dc01      	bgt.n	800a6ba <_printf_float+0x3ca>
 800a6b6:	07db      	lsls	r3, r3, #31
 800a6b8:	d538      	bpl.n	800a72c <_printf_float+0x43c>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	4642      	mov	r2, r8
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	47b8      	blx	r7
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	f43f ae74 	beq.w	800a3b2 <_printf_float+0xc2>
 800a6ca:	ee18 3a10 	vmov	r3, s16
 800a6ce:	4652      	mov	r2, sl
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	47b8      	blx	r7
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	f43f ae6b 	beq.w	800a3b2 <_printf_float+0xc2>
 800a6dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f7f6 fa28 	bl	8000b38 <__aeabi_dcmpeq>
 800a6e8:	b9d8      	cbnz	r0, 800a722 <_printf_float+0x432>
 800a6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ec:	f108 0201 	add.w	r2, r8, #1
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b8      	blx	r7
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d10e      	bne.n	800a71a <_printf_float+0x42a>
 800a6fc:	e659      	b.n	800a3b2 <_printf_float+0xc2>
 800a6fe:	2301      	movs	r3, #1
 800a700:	4652      	mov	r2, sl
 800a702:	4631      	mov	r1, r6
 800a704:	4628      	mov	r0, r5
 800a706:	47b8      	blx	r7
 800a708:	3001      	adds	r0, #1
 800a70a:	f43f ae52 	beq.w	800a3b2 <_printf_float+0xc2>
 800a70e:	f108 0801 	add.w	r8, r8, #1
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	3b01      	subs	r3, #1
 800a716:	4543      	cmp	r3, r8
 800a718:	dcf1      	bgt.n	800a6fe <_printf_float+0x40e>
 800a71a:	464b      	mov	r3, r9
 800a71c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a720:	e6dc      	b.n	800a4dc <_printf_float+0x1ec>
 800a722:	f04f 0800 	mov.w	r8, #0
 800a726:	f104 0a1a 	add.w	sl, r4, #26
 800a72a:	e7f2      	b.n	800a712 <_printf_float+0x422>
 800a72c:	2301      	movs	r3, #1
 800a72e:	4642      	mov	r2, r8
 800a730:	e7df      	b.n	800a6f2 <_printf_float+0x402>
 800a732:	2301      	movs	r3, #1
 800a734:	464a      	mov	r2, r9
 800a736:	4631      	mov	r1, r6
 800a738:	4628      	mov	r0, r5
 800a73a:	47b8      	blx	r7
 800a73c:	3001      	adds	r0, #1
 800a73e:	f43f ae38 	beq.w	800a3b2 <_printf_float+0xc2>
 800a742:	f108 0801 	add.w	r8, r8, #1
 800a746:	68e3      	ldr	r3, [r4, #12]
 800a748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a74a:	1a5b      	subs	r3, r3, r1
 800a74c:	4543      	cmp	r3, r8
 800a74e:	dcf0      	bgt.n	800a732 <_printf_float+0x442>
 800a750:	e6fa      	b.n	800a548 <_printf_float+0x258>
 800a752:	f04f 0800 	mov.w	r8, #0
 800a756:	f104 0919 	add.w	r9, r4, #25
 800a75a:	e7f4      	b.n	800a746 <_printf_float+0x456>

0800a75c <_printf_common>:
 800a75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a760:	4616      	mov	r6, r2
 800a762:	4699      	mov	r9, r3
 800a764:	688a      	ldr	r2, [r1, #8]
 800a766:	690b      	ldr	r3, [r1, #16]
 800a768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a76c:	4293      	cmp	r3, r2
 800a76e:	bfb8      	it	lt
 800a770:	4613      	movlt	r3, r2
 800a772:	6033      	str	r3, [r6, #0]
 800a774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a778:	4607      	mov	r7, r0
 800a77a:	460c      	mov	r4, r1
 800a77c:	b10a      	cbz	r2, 800a782 <_printf_common+0x26>
 800a77e:	3301      	adds	r3, #1
 800a780:	6033      	str	r3, [r6, #0]
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	0699      	lsls	r1, r3, #26
 800a786:	bf42      	ittt	mi
 800a788:	6833      	ldrmi	r3, [r6, #0]
 800a78a:	3302      	addmi	r3, #2
 800a78c:	6033      	strmi	r3, [r6, #0]
 800a78e:	6825      	ldr	r5, [r4, #0]
 800a790:	f015 0506 	ands.w	r5, r5, #6
 800a794:	d106      	bne.n	800a7a4 <_printf_common+0x48>
 800a796:	f104 0a19 	add.w	sl, r4, #25
 800a79a:	68e3      	ldr	r3, [r4, #12]
 800a79c:	6832      	ldr	r2, [r6, #0]
 800a79e:	1a9b      	subs	r3, r3, r2
 800a7a0:	42ab      	cmp	r3, r5
 800a7a2:	dc26      	bgt.n	800a7f2 <_printf_common+0x96>
 800a7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7a8:	1e13      	subs	r3, r2, #0
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	bf18      	it	ne
 800a7ae:	2301      	movne	r3, #1
 800a7b0:	0692      	lsls	r2, r2, #26
 800a7b2:	d42b      	bmi.n	800a80c <_printf_common+0xb0>
 800a7b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	47c0      	blx	r8
 800a7be:	3001      	adds	r0, #1
 800a7c0:	d01e      	beq.n	800a800 <_printf_common+0xa4>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	68e5      	ldr	r5, [r4, #12]
 800a7c6:	6832      	ldr	r2, [r6, #0]
 800a7c8:	f003 0306 	and.w	r3, r3, #6
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	bf08      	it	eq
 800a7d0:	1aad      	subeq	r5, r5, r2
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	6922      	ldr	r2, [r4, #16]
 800a7d6:	bf0c      	ite	eq
 800a7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7dc:	2500      	movne	r5, #0
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	bfc4      	itt	gt
 800a7e2:	1a9b      	subgt	r3, r3, r2
 800a7e4:	18ed      	addgt	r5, r5, r3
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	341a      	adds	r4, #26
 800a7ea:	42b5      	cmp	r5, r6
 800a7ec:	d11a      	bne.n	800a824 <_printf_common+0xc8>
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	e008      	b.n	800a804 <_printf_common+0xa8>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	4652      	mov	r2, sl
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	47c0      	blx	r8
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d103      	bne.n	800a808 <_printf_common+0xac>
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a808:	3501      	adds	r5, #1
 800a80a:	e7c6      	b.n	800a79a <_printf_common+0x3e>
 800a80c:	18e1      	adds	r1, r4, r3
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	2030      	movs	r0, #48	; 0x30
 800a812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a816:	4422      	add	r2, r4
 800a818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a81c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a820:	3302      	adds	r3, #2
 800a822:	e7c7      	b.n	800a7b4 <_printf_common+0x58>
 800a824:	2301      	movs	r3, #1
 800a826:	4622      	mov	r2, r4
 800a828:	4649      	mov	r1, r9
 800a82a:	4638      	mov	r0, r7
 800a82c:	47c0      	blx	r8
 800a82e:	3001      	adds	r0, #1
 800a830:	d0e6      	beq.n	800a800 <_printf_common+0xa4>
 800a832:	3601      	adds	r6, #1
 800a834:	e7d9      	b.n	800a7ea <_printf_common+0x8e>
	...

0800a838 <_printf_i>:
 800a838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a83c:	7e0f      	ldrb	r7, [r1, #24]
 800a83e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a840:	2f78      	cmp	r7, #120	; 0x78
 800a842:	4691      	mov	r9, r2
 800a844:	4680      	mov	r8, r0
 800a846:	460c      	mov	r4, r1
 800a848:	469a      	mov	sl, r3
 800a84a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a84e:	d807      	bhi.n	800a860 <_printf_i+0x28>
 800a850:	2f62      	cmp	r7, #98	; 0x62
 800a852:	d80a      	bhi.n	800a86a <_printf_i+0x32>
 800a854:	2f00      	cmp	r7, #0
 800a856:	f000 80d8 	beq.w	800aa0a <_printf_i+0x1d2>
 800a85a:	2f58      	cmp	r7, #88	; 0x58
 800a85c:	f000 80a3 	beq.w	800a9a6 <_printf_i+0x16e>
 800a860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a868:	e03a      	b.n	800a8e0 <_printf_i+0xa8>
 800a86a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a86e:	2b15      	cmp	r3, #21
 800a870:	d8f6      	bhi.n	800a860 <_printf_i+0x28>
 800a872:	a101      	add	r1, pc, #4	; (adr r1, 800a878 <_printf_i+0x40>)
 800a874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a878:	0800a8d1 	.word	0x0800a8d1
 800a87c:	0800a8e5 	.word	0x0800a8e5
 800a880:	0800a861 	.word	0x0800a861
 800a884:	0800a861 	.word	0x0800a861
 800a888:	0800a861 	.word	0x0800a861
 800a88c:	0800a861 	.word	0x0800a861
 800a890:	0800a8e5 	.word	0x0800a8e5
 800a894:	0800a861 	.word	0x0800a861
 800a898:	0800a861 	.word	0x0800a861
 800a89c:	0800a861 	.word	0x0800a861
 800a8a0:	0800a861 	.word	0x0800a861
 800a8a4:	0800a9f1 	.word	0x0800a9f1
 800a8a8:	0800a915 	.word	0x0800a915
 800a8ac:	0800a9d3 	.word	0x0800a9d3
 800a8b0:	0800a861 	.word	0x0800a861
 800a8b4:	0800a861 	.word	0x0800a861
 800a8b8:	0800aa13 	.word	0x0800aa13
 800a8bc:	0800a861 	.word	0x0800a861
 800a8c0:	0800a915 	.word	0x0800a915
 800a8c4:	0800a861 	.word	0x0800a861
 800a8c8:	0800a861 	.word	0x0800a861
 800a8cc:	0800a9db 	.word	0x0800a9db
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	1d1a      	adds	r2, r3, #4
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	602a      	str	r2, [r5, #0]
 800a8d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e0a3      	b.n	800aa2c <_printf_i+0x1f4>
 800a8e4:	6820      	ldr	r0, [r4, #0]
 800a8e6:	6829      	ldr	r1, [r5, #0]
 800a8e8:	0606      	lsls	r6, r0, #24
 800a8ea:	f101 0304 	add.w	r3, r1, #4
 800a8ee:	d50a      	bpl.n	800a906 <_printf_i+0xce>
 800a8f0:	680e      	ldr	r6, [r1, #0]
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	2e00      	cmp	r6, #0
 800a8f6:	da03      	bge.n	800a900 <_printf_i+0xc8>
 800a8f8:	232d      	movs	r3, #45	; 0x2d
 800a8fa:	4276      	negs	r6, r6
 800a8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a900:	485e      	ldr	r0, [pc, #376]	; (800aa7c <_printf_i+0x244>)
 800a902:	230a      	movs	r3, #10
 800a904:	e019      	b.n	800a93a <_printf_i+0x102>
 800a906:	680e      	ldr	r6, [r1, #0]
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a90e:	bf18      	it	ne
 800a910:	b236      	sxthne	r6, r6
 800a912:	e7ef      	b.n	800a8f4 <_printf_i+0xbc>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	6820      	ldr	r0, [r4, #0]
 800a918:	1d19      	adds	r1, r3, #4
 800a91a:	6029      	str	r1, [r5, #0]
 800a91c:	0601      	lsls	r1, r0, #24
 800a91e:	d501      	bpl.n	800a924 <_printf_i+0xec>
 800a920:	681e      	ldr	r6, [r3, #0]
 800a922:	e002      	b.n	800a92a <_printf_i+0xf2>
 800a924:	0646      	lsls	r6, r0, #25
 800a926:	d5fb      	bpl.n	800a920 <_printf_i+0xe8>
 800a928:	881e      	ldrh	r6, [r3, #0]
 800a92a:	4854      	ldr	r0, [pc, #336]	; (800aa7c <_printf_i+0x244>)
 800a92c:	2f6f      	cmp	r7, #111	; 0x6f
 800a92e:	bf0c      	ite	eq
 800a930:	2308      	moveq	r3, #8
 800a932:	230a      	movne	r3, #10
 800a934:	2100      	movs	r1, #0
 800a936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a93a:	6865      	ldr	r5, [r4, #4]
 800a93c:	60a5      	str	r5, [r4, #8]
 800a93e:	2d00      	cmp	r5, #0
 800a940:	bfa2      	ittt	ge
 800a942:	6821      	ldrge	r1, [r4, #0]
 800a944:	f021 0104 	bicge.w	r1, r1, #4
 800a948:	6021      	strge	r1, [r4, #0]
 800a94a:	b90e      	cbnz	r6, 800a950 <_printf_i+0x118>
 800a94c:	2d00      	cmp	r5, #0
 800a94e:	d04d      	beq.n	800a9ec <_printf_i+0x1b4>
 800a950:	4615      	mov	r5, r2
 800a952:	fbb6 f1f3 	udiv	r1, r6, r3
 800a956:	fb03 6711 	mls	r7, r3, r1, r6
 800a95a:	5dc7      	ldrb	r7, [r0, r7]
 800a95c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a960:	4637      	mov	r7, r6
 800a962:	42bb      	cmp	r3, r7
 800a964:	460e      	mov	r6, r1
 800a966:	d9f4      	bls.n	800a952 <_printf_i+0x11a>
 800a968:	2b08      	cmp	r3, #8
 800a96a:	d10b      	bne.n	800a984 <_printf_i+0x14c>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	07de      	lsls	r6, r3, #31
 800a970:	d508      	bpl.n	800a984 <_printf_i+0x14c>
 800a972:	6923      	ldr	r3, [r4, #16]
 800a974:	6861      	ldr	r1, [r4, #4]
 800a976:	4299      	cmp	r1, r3
 800a978:	bfde      	ittt	le
 800a97a:	2330      	movle	r3, #48	; 0x30
 800a97c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a980:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a984:	1b52      	subs	r2, r2, r5
 800a986:	6122      	str	r2, [r4, #16]
 800a988:	f8cd a000 	str.w	sl, [sp]
 800a98c:	464b      	mov	r3, r9
 800a98e:	aa03      	add	r2, sp, #12
 800a990:	4621      	mov	r1, r4
 800a992:	4640      	mov	r0, r8
 800a994:	f7ff fee2 	bl	800a75c <_printf_common>
 800a998:	3001      	adds	r0, #1
 800a99a:	d14c      	bne.n	800aa36 <_printf_i+0x1fe>
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	b004      	add	sp, #16
 800a9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a6:	4835      	ldr	r0, [pc, #212]	; (800aa7c <_printf_i+0x244>)
 800a9a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9ac:	6829      	ldr	r1, [r5, #0]
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9b4:	6029      	str	r1, [r5, #0]
 800a9b6:	061d      	lsls	r5, r3, #24
 800a9b8:	d514      	bpl.n	800a9e4 <_printf_i+0x1ac>
 800a9ba:	07df      	lsls	r7, r3, #31
 800a9bc:	bf44      	itt	mi
 800a9be:	f043 0320 	orrmi.w	r3, r3, #32
 800a9c2:	6023      	strmi	r3, [r4, #0]
 800a9c4:	b91e      	cbnz	r6, 800a9ce <_printf_i+0x196>
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	f023 0320 	bic.w	r3, r3, #32
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	2310      	movs	r3, #16
 800a9d0:	e7b0      	b.n	800a934 <_printf_i+0xfc>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	f043 0320 	orr.w	r3, r3, #32
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	2378      	movs	r3, #120	; 0x78
 800a9dc:	4828      	ldr	r0, [pc, #160]	; (800aa80 <_printf_i+0x248>)
 800a9de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9e2:	e7e3      	b.n	800a9ac <_printf_i+0x174>
 800a9e4:	0659      	lsls	r1, r3, #25
 800a9e6:	bf48      	it	mi
 800a9e8:	b2b6      	uxthmi	r6, r6
 800a9ea:	e7e6      	b.n	800a9ba <_printf_i+0x182>
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	e7bb      	b.n	800a968 <_printf_i+0x130>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	6826      	ldr	r6, [r4, #0]
 800a9f4:	6961      	ldr	r1, [r4, #20]
 800a9f6:	1d18      	adds	r0, r3, #4
 800a9f8:	6028      	str	r0, [r5, #0]
 800a9fa:	0635      	lsls	r5, r6, #24
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	d501      	bpl.n	800aa04 <_printf_i+0x1cc>
 800aa00:	6019      	str	r1, [r3, #0]
 800aa02:	e002      	b.n	800aa0a <_printf_i+0x1d2>
 800aa04:	0670      	lsls	r0, r6, #25
 800aa06:	d5fb      	bpl.n	800aa00 <_printf_i+0x1c8>
 800aa08:	8019      	strh	r1, [r3, #0]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	6123      	str	r3, [r4, #16]
 800aa0e:	4615      	mov	r5, r2
 800aa10:	e7ba      	b.n	800a988 <_printf_i+0x150>
 800aa12:	682b      	ldr	r3, [r5, #0]
 800aa14:	1d1a      	adds	r2, r3, #4
 800aa16:	602a      	str	r2, [r5, #0]
 800aa18:	681d      	ldr	r5, [r3, #0]
 800aa1a:	6862      	ldr	r2, [r4, #4]
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f7f5 fc16 	bl	8000250 <memchr>
 800aa24:	b108      	cbz	r0, 800aa2a <_printf_i+0x1f2>
 800aa26:	1b40      	subs	r0, r0, r5
 800aa28:	6060      	str	r0, [r4, #4]
 800aa2a:	6863      	ldr	r3, [r4, #4]
 800aa2c:	6123      	str	r3, [r4, #16]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa34:	e7a8      	b.n	800a988 <_printf_i+0x150>
 800aa36:	6923      	ldr	r3, [r4, #16]
 800aa38:	462a      	mov	r2, r5
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	47d0      	blx	sl
 800aa40:	3001      	adds	r0, #1
 800aa42:	d0ab      	beq.n	800a99c <_printf_i+0x164>
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	079b      	lsls	r3, r3, #30
 800aa48:	d413      	bmi.n	800aa72 <_printf_i+0x23a>
 800aa4a:	68e0      	ldr	r0, [r4, #12]
 800aa4c:	9b03      	ldr	r3, [sp, #12]
 800aa4e:	4298      	cmp	r0, r3
 800aa50:	bfb8      	it	lt
 800aa52:	4618      	movlt	r0, r3
 800aa54:	e7a4      	b.n	800a9a0 <_printf_i+0x168>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4632      	mov	r2, r6
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	47d0      	blx	sl
 800aa60:	3001      	adds	r0, #1
 800aa62:	d09b      	beq.n	800a99c <_printf_i+0x164>
 800aa64:	3501      	adds	r5, #1
 800aa66:	68e3      	ldr	r3, [r4, #12]
 800aa68:	9903      	ldr	r1, [sp, #12]
 800aa6a:	1a5b      	subs	r3, r3, r1
 800aa6c:	42ab      	cmp	r3, r5
 800aa6e:	dcf2      	bgt.n	800aa56 <_printf_i+0x21e>
 800aa70:	e7eb      	b.n	800aa4a <_printf_i+0x212>
 800aa72:	2500      	movs	r5, #0
 800aa74:	f104 0619 	add.w	r6, r4, #25
 800aa78:	e7f5      	b.n	800aa66 <_printf_i+0x22e>
 800aa7a:	bf00      	nop
 800aa7c:	0800d5da 	.word	0x0800d5da
 800aa80:	0800d5eb 	.word	0x0800d5eb

0800aa84 <sniprintf>:
 800aa84:	b40c      	push	{r2, r3}
 800aa86:	b530      	push	{r4, r5, lr}
 800aa88:	4b17      	ldr	r3, [pc, #92]	; (800aae8 <sniprintf+0x64>)
 800aa8a:	1e0c      	subs	r4, r1, #0
 800aa8c:	681d      	ldr	r5, [r3, #0]
 800aa8e:	b09d      	sub	sp, #116	; 0x74
 800aa90:	da08      	bge.n	800aaa4 <sniprintf+0x20>
 800aa92:	238b      	movs	r3, #139	; 0x8b
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	b01d      	add	sp, #116	; 0x74
 800aa9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaa0:	b002      	add	sp, #8
 800aaa2:	4770      	bx	lr
 800aaa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aaa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aaac:	bf14      	ite	ne
 800aaae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aab2:	4623      	moveq	r3, r4
 800aab4:	9304      	str	r3, [sp, #16]
 800aab6:	9307      	str	r3, [sp, #28]
 800aab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aabc:	9002      	str	r0, [sp, #8]
 800aabe:	9006      	str	r0, [sp, #24]
 800aac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aac6:	ab21      	add	r3, sp, #132	; 0x84
 800aac8:	a902      	add	r1, sp, #8
 800aaca:	4628      	mov	r0, r5
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	f001 fcaf 	bl	800c430 <_svfiprintf_r>
 800aad2:	1c43      	adds	r3, r0, #1
 800aad4:	bfbc      	itt	lt
 800aad6:	238b      	movlt	r3, #139	; 0x8b
 800aad8:	602b      	strlt	r3, [r5, #0]
 800aada:	2c00      	cmp	r4, #0
 800aadc:	d0dd      	beq.n	800aa9a <sniprintf+0x16>
 800aade:	9b02      	ldr	r3, [sp, #8]
 800aae0:	2200      	movs	r2, #0
 800aae2:	701a      	strb	r2, [r3, #0]
 800aae4:	e7d9      	b.n	800aa9a <sniprintf+0x16>
 800aae6:	bf00      	nop
 800aae8:	2000001c 	.word	0x2000001c

0800aaec <siprintf>:
 800aaec:	b40e      	push	{r1, r2, r3}
 800aaee:	b500      	push	{lr}
 800aaf0:	b09c      	sub	sp, #112	; 0x70
 800aaf2:	ab1d      	add	r3, sp, #116	; 0x74
 800aaf4:	9002      	str	r0, [sp, #8]
 800aaf6:	9006      	str	r0, [sp, #24]
 800aaf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aafc:	4809      	ldr	r0, [pc, #36]	; (800ab24 <siprintf+0x38>)
 800aafe:	9107      	str	r1, [sp, #28]
 800ab00:	9104      	str	r1, [sp, #16]
 800ab02:	4909      	ldr	r1, [pc, #36]	; (800ab28 <siprintf+0x3c>)
 800ab04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab08:	9105      	str	r1, [sp, #20]
 800ab0a:	6800      	ldr	r0, [r0, #0]
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	a902      	add	r1, sp, #8
 800ab10:	f001 fc8e 	bl	800c430 <_svfiprintf_r>
 800ab14:	9b02      	ldr	r3, [sp, #8]
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	b01c      	add	sp, #112	; 0x70
 800ab1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab20:	b003      	add	sp, #12
 800ab22:	4770      	bx	lr
 800ab24:	2000001c 	.word	0x2000001c
 800ab28:	ffff0208 	.word	0xffff0208

0800ab2c <strtok>:
 800ab2c:	4b16      	ldr	r3, [pc, #88]	; (800ab88 <strtok+0x5c>)
 800ab2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab30:	681e      	ldr	r6, [r3, #0]
 800ab32:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ab34:	4605      	mov	r5, r0
 800ab36:	b9fc      	cbnz	r4, 800ab78 <strtok+0x4c>
 800ab38:	2050      	movs	r0, #80	; 0x50
 800ab3a:	9101      	str	r1, [sp, #4]
 800ab3c:	f000 ff8c 	bl	800ba58 <malloc>
 800ab40:	9901      	ldr	r1, [sp, #4]
 800ab42:	65b0      	str	r0, [r6, #88]	; 0x58
 800ab44:	4602      	mov	r2, r0
 800ab46:	b920      	cbnz	r0, 800ab52 <strtok+0x26>
 800ab48:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <strtok+0x60>)
 800ab4a:	4811      	ldr	r0, [pc, #68]	; (800ab90 <strtok+0x64>)
 800ab4c:	2157      	movs	r1, #87	; 0x57
 800ab4e:	f000 f8d5 	bl	800acfc <__assert_func>
 800ab52:	e9c0 4400 	strd	r4, r4, [r0]
 800ab56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ab5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ab5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ab62:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ab66:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ab6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ab6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ab72:	6184      	str	r4, [r0, #24]
 800ab74:	7704      	strb	r4, [r0, #28]
 800ab76:	6244      	str	r4, [r0, #36]	; 0x24
 800ab78:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	b002      	add	sp, #8
 800ab80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab84:	f000 b806 	b.w	800ab94 <__strtok_r>
 800ab88:	2000001c 	.word	0x2000001c
 800ab8c:	0800d5fc 	.word	0x0800d5fc
 800ab90:	0800d613 	.word	0x0800d613

0800ab94 <__strtok_r>:
 800ab94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab96:	b908      	cbnz	r0, 800ab9c <__strtok_r+0x8>
 800ab98:	6810      	ldr	r0, [r2, #0]
 800ab9a:	b188      	cbz	r0, 800abc0 <__strtok_r+0x2c>
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aba4:	460f      	mov	r7, r1
 800aba6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800abaa:	b91e      	cbnz	r6, 800abb4 <__strtok_r+0x20>
 800abac:	b965      	cbnz	r5, 800abc8 <__strtok_r+0x34>
 800abae:	6015      	str	r5, [r2, #0]
 800abb0:	4628      	mov	r0, r5
 800abb2:	e005      	b.n	800abc0 <__strtok_r+0x2c>
 800abb4:	42b5      	cmp	r5, r6
 800abb6:	d1f6      	bne.n	800aba6 <__strtok_r+0x12>
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1f0      	bne.n	800ab9e <__strtok_r+0xa>
 800abbc:	6014      	str	r4, [r2, #0]
 800abbe:	7003      	strb	r3, [r0, #0]
 800abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc2:	461c      	mov	r4, r3
 800abc4:	e00c      	b.n	800abe0 <__strtok_r+0x4c>
 800abc6:	b915      	cbnz	r5, 800abce <__strtok_r+0x3a>
 800abc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abcc:	460e      	mov	r6, r1
 800abce:	f816 5b01 	ldrb.w	r5, [r6], #1
 800abd2:	42ab      	cmp	r3, r5
 800abd4:	d1f7      	bne.n	800abc6 <__strtok_r+0x32>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0f3      	beq.n	800abc2 <__strtok_r+0x2e>
 800abda:	2300      	movs	r3, #0
 800abdc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800abe0:	6014      	str	r4, [r2, #0]
 800abe2:	e7ed      	b.n	800abc0 <__strtok_r+0x2c>

0800abe4 <_strtol_l.constprop.0>:
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abea:	d001      	beq.n	800abf0 <_strtol_l.constprop.0+0xc>
 800abec:	2b24      	cmp	r3, #36	; 0x24
 800abee:	d906      	bls.n	800abfe <_strtol_l.constprop.0+0x1a>
 800abf0:	f7ff faac 	bl	800a14c <__errno>
 800abf4:	2316      	movs	r3, #22
 800abf6:	6003      	str	r3, [r0, #0]
 800abf8:	2000      	movs	r0, #0
 800abfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ace4 <_strtol_l.constprop.0+0x100>
 800ac02:	460d      	mov	r5, r1
 800ac04:	462e      	mov	r6, r5
 800ac06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac0a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac0e:	f017 0708 	ands.w	r7, r7, #8
 800ac12:	d1f7      	bne.n	800ac04 <_strtol_l.constprop.0+0x20>
 800ac14:	2c2d      	cmp	r4, #45	; 0x2d
 800ac16:	d132      	bne.n	800ac7e <_strtol_l.constprop.0+0x9a>
 800ac18:	782c      	ldrb	r4, [r5, #0]
 800ac1a:	2701      	movs	r7, #1
 800ac1c:	1cb5      	adds	r5, r6, #2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d05b      	beq.n	800acda <_strtol_l.constprop.0+0xf6>
 800ac22:	2b10      	cmp	r3, #16
 800ac24:	d109      	bne.n	800ac3a <_strtol_l.constprop.0+0x56>
 800ac26:	2c30      	cmp	r4, #48	; 0x30
 800ac28:	d107      	bne.n	800ac3a <_strtol_l.constprop.0+0x56>
 800ac2a:	782c      	ldrb	r4, [r5, #0]
 800ac2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac30:	2c58      	cmp	r4, #88	; 0x58
 800ac32:	d14d      	bne.n	800acd0 <_strtol_l.constprop.0+0xec>
 800ac34:	786c      	ldrb	r4, [r5, #1]
 800ac36:	2310      	movs	r3, #16
 800ac38:	3502      	adds	r5, #2
 800ac3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ac3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac42:	f04f 0c00 	mov.w	ip, #0
 800ac46:	fbb8 f9f3 	udiv	r9, r8, r3
 800ac4a:	4666      	mov	r6, ip
 800ac4c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ac50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac54:	f1be 0f09 	cmp.w	lr, #9
 800ac58:	d816      	bhi.n	800ac88 <_strtol_l.constprop.0+0xa4>
 800ac5a:	4674      	mov	r4, lr
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	dd24      	ble.n	800acaa <_strtol_l.constprop.0+0xc6>
 800ac60:	f1bc 0f00 	cmp.w	ip, #0
 800ac64:	db1e      	blt.n	800aca4 <_strtol_l.constprop.0+0xc0>
 800ac66:	45b1      	cmp	r9, r6
 800ac68:	d31c      	bcc.n	800aca4 <_strtol_l.constprop.0+0xc0>
 800ac6a:	d101      	bne.n	800ac70 <_strtol_l.constprop.0+0x8c>
 800ac6c:	45a2      	cmp	sl, r4
 800ac6e:	db19      	blt.n	800aca4 <_strtol_l.constprop.0+0xc0>
 800ac70:	fb06 4603 	mla	r6, r6, r3, r4
 800ac74:	f04f 0c01 	mov.w	ip, #1
 800ac78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac7c:	e7e8      	b.n	800ac50 <_strtol_l.constprop.0+0x6c>
 800ac7e:	2c2b      	cmp	r4, #43	; 0x2b
 800ac80:	bf04      	itt	eq
 800ac82:	782c      	ldrbeq	r4, [r5, #0]
 800ac84:	1cb5      	addeq	r5, r6, #2
 800ac86:	e7ca      	b.n	800ac1e <_strtol_l.constprop.0+0x3a>
 800ac88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac8c:	f1be 0f19 	cmp.w	lr, #25
 800ac90:	d801      	bhi.n	800ac96 <_strtol_l.constprop.0+0xb2>
 800ac92:	3c37      	subs	r4, #55	; 0x37
 800ac94:	e7e2      	b.n	800ac5c <_strtol_l.constprop.0+0x78>
 800ac96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac9a:	f1be 0f19 	cmp.w	lr, #25
 800ac9e:	d804      	bhi.n	800acaa <_strtol_l.constprop.0+0xc6>
 800aca0:	3c57      	subs	r4, #87	; 0x57
 800aca2:	e7db      	b.n	800ac5c <_strtol_l.constprop.0+0x78>
 800aca4:	f04f 3cff 	mov.w	ip, #4294967295
 800aca8:	e7e6      	b.n	800ac78 <_strtol_l.constprop.0+0x94>
 800acaa:	f1bc 0f00 	cmp.w	ip, #0
 800acae:	da05      	bge.n	800acbc <_strtol_l.constprop.0+0xd8>
 800acb0:	2322      	movs	r3, #34	; 0x22
 800acb2:	6003      	str	r3, [r0, #0]
 800acb4:	4646      	mov	r6, r8
 800acb6:	b942      	cbnz	r2, 800acca <_strtol_l.constprop.0+0xe6>
 800acb8:	4630      	mov	r0, r6
 800acba:	e79e      	b.n	800abfa <_strtol_l.constprop.0+0x16>
 800acbc:	b107      	cbz	r7, 800acc0 <_strtol_l.constprop.0+0xdc>
 800acbe:	4276      	negs	r6, r6
 800acc0:	2a00      	cmp	r2, #0
 800acc2:	d0f9      	beq.n	800acb8 <_strtol_l.constprop.0+0xd4>
 800acc4:	f1bc 0f00 	cmp.w	ip, #0
 800acc8:	d000      	beq.n	800accc <_strtol_l.constprop.0+0xe8>
 800acca:	1e69      	subs	r1, r5, #1
 800accc:	6011      	str	r1, [r2, #0]
 800acce:	e7f3      	b.n	800acb8 <_strtol_l.constprop.0+0xd4>
 800acd0:	2430      	movs	r4, #48	; 0x30
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1b1      	bne.n	800ac3a <_strtol_l.constprop.0+0x56>
 800acd6:	2308      	movs	r3, #8
 800acd8:	e7af      	b.n	800ac3a <_strtol_l.constprop.0+0x56>
 800acda:	2c30      	cmp	r4, #48	; 0x30
 800acdc:	d0a5      	beq.n	800ac2a <_strtol_l.constprop.0+0x46>
 800acde:	230a      	movs	r3, #10
 800ace0:	e7ab      	b.n	800ac3a <_strtol_l.constprop.0+0x56>
 800ace2:	bf00      	nop
 800ace4:	0800d6ad 	.word	0x0800d6ad

0800ace8 <strtol>:
 800ace8:	4613      	mov	r3, r2
 800acea:	460a      	mov	r2, r1
 800acec:	4601      	mov	r1, r0
 800acee:	4802      	ldr	r0, [pc, #8]	; (800acf8 <strtol+0x10>)
 800acf0:	6800      	ldr	r0, [r0, #0]
 800acf2:	f7ff bf77 	b.w	800abe4 <_strtol_l.constprop.0>
 800acf6:	bf00      	nop
 800acf8:	2000001c 	.word	0x2000001c

0800acfc <__assert_func>:
 800acfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acfe:	4614      	mov	r4, r2
 800ad00:	461a      	mov	r2, r3
 800ad02:	4b09      	ldr	r3, [pc, #36]	; (800ad28 <__assert_func+0x2c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4605      	mov	r5, r0
 800ad08:	68d8      	ldr	r0, [r3, #12]
 800ad0a:	b14c      	cbz	r4, 800ad20 <__assert_func+0x24>
 800ad0c:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <__assert_func+0x30>)
 800ad0e:	9100      	str	r1, [sp, #0]
 800ad10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad14:	4906      	ldr	r1, [pc, #24]	; (800ad30 <__assert_func+0x34>)
 800ad16:	462b      	mov	r3, r5
 800ad18:	f000 fe88 	bl	800ba2c <fiprintf>
 800ad1c:	f001 feb2 	bl	800ca84 <abort>
 800ad20:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <__assert_func+0x38>)
 800ad22:	461c      	mov	r4, r3
 800ad24:	e7f3      	b.n	800ad0e <__assert_func+0x12>
 800ad26:	bf00      	nop
 800ad28:	2000001c 	.word	0x2000001c
 800ad2c:	0800d670 	.word	0x0800d670
 800ad30:	0800d67d 	.word	0x0800d67d
 800ad34:	0800d6ab 	.word	0x0800d6ab

0800ad38 <quorem>:
 800ad38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	6903      	ldr	r3, [r0, #16]
 800ad3e:	690c      	ldr	r4, [r1, #16]
 800ad40:	42a3      	cmp	r3, r4
 800ad42:	4607      	mov	r7, r0
 800ad44:	f2c0 8081 	blt.w	800ae4a <quorem+0x112>
 800ad48:	3c01      	subs	r4, #1
 800ad4a:	f101 0814 	add.w	r8, r1, #20
 800ad4e:	f100 0514 	add.w	r5, r0, #20
 800ad52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad56:	9301      	str	r3, [sp, #4]
 800ad58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad60:	3301      	adds	r3, #1
 800ad62:	429a      	cmp	r2, r3
 800ad64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad6c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad70:	d331      	bcc.n	800add6 <quorem+0x9e>
 800ad72:	f04f 0e00 	mov.w	lr, #0
 800ad76:	4640      	mov	r0, r8
 800ad78:	46ac      	mov	ip, r5
 800ad7a:	46f2      	mov	sl, lr
 800ad7c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad80:	b293      	uxth	r3, r2
 800ad82:	fb06 e303 	mla	r3, r6, r3, lr
 800ad86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	ebaa 0303 	sub.w	r3, sl, r3
 800ad90:	f8dc a000 	ldr.w	sl, [ip]
 800ad94:	0c12      	lsrs	r2, r2, #16
 800ad96:	fa13 f38a 	uxtah	r3, r3, sl
 800ad9a:	fb06 e202 	mla	r2, r6, r2, lr
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ada6:	b292      	uxth	r2, r2
 800ada8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adb0:	f8bd 3000 	ldrh.w	r3, [sp]
 800adb4:	4581      	cmp	r9, r0
 800adb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adba:	f84c 3b04 	str.w	r3, [ip], #4
 800adbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adc2:	d2db      	bcs.n	800ad7c <quorem+0x44>
 800adc4:	f855 300b 	ldr.w	r3, [r5, fp]
 800adc8:	b92b      	cbnz	r3, 800add6 <quorem+0x9e>
 800adca:	9b01      	ldr	r3, [sp, #4]
 800adcc:	3b04      	subs	r3, #4
 800adce:	429d      	cmp	r5, r3
 800add0:	461a      	mov	r2, r3
 800add2:	d32e      	bcc.n	800ae32 <quorem+0xfa>
 800add4:	613c      	str	r4, [r7, #16]
 800add6:	4638      	mov	r0, r7
 800add8:	f001 f8d6 	bl	800bf88 <__mcmp>
 800addc:	2800      	cmp	r0, #0
 800adde:	db24      	blt.n	800ae2a <quorem+0xf2>
 800ade0:	3601      	adds	r6, #1
 800ade2:	4628      	mov	r0, r5
 800ade4:	f04f 0c00 	mov.w	ip, #0
 800ade8:	f858 2b04 	ldr.w	r2, [r8], #4
 800adec:	f8d0 e000 	ldr.w	lr, [r0]
 800adf0:	b293      	uxth	r3, r2
 800adf2:	ebac 0303 	sub.w	r3, ip, r3
 800adf6:	0c12      	lsrs	r2, r2, #16
 800adf8:	fa13 f38e 	uxtah	r3, r3, lr
 800adfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae0a:	45c1      	cmp	r9, r8
 800ae0c:	f840 3b04 	str.w	r3, [r0], #4
 800ae10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae14:	d2e8      	bcs.n	800ade8 <quorem+0xb0>
 800ae16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae1e:	b922      	cbnz	r2, 800ae2a <quorem+0xf2>
 800ae20:	3b04      	subs	r3, #4
 800ae22:	429d      	cmp	r5, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	d30a      	bcc.n	800ae3e <quorem+0x106>
 800ae28:	613c      	str	r4, [r7, #16]
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	b003      	add	sp, #12
 800ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae32:	6812      	ldr	r2, [r2, #0]
 800ae34:	3b04      	subs	r3, #4
 800ae36:	2a00      	cmp	r2, #0
 800ae38:	d1cc      	bne.n	800add4 <quorem+0x9c>
 800ae3a:	3c01      	subs	r4, #1
 800ae3c:	e7c7      	b.n	800adce <quorem+0x96>
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	3b04      	subs	r3, #4
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d1f0      	bne.n	800ae28 <quorem+0xf0>
 800ae46:	3c01      	subs	r4, #1
 800ae48:	e7eb      	b.n	800ae22 <quorem+0xea>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e7ee      	b.n	800ae2c <quorem+0xf4>
	...

0800ae50 <_dtoa_r>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	ed2d 8b04 	vpush	{d8-d9}
 800ae58:	ec57 6b10 	vmov	r6, r7, d0
 800ae5c:	b093      	sub	sp, #76	; 0x4c
 800ae5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae64:	9106      	str	r1, [sp, #24]
 800ae66:	ee10 aa10 	vmov	sl, s0
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae6e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae70:	46bb      	mov	fp, r7
 800ae72:	b975      	cbnz	r5, 800ae92 <_dtoa_r+0x42>
 800ae74:	2010      	movs	r0, #16
 800ae76:	f000 fdef 	bl	800ba58 <malloc>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	6260      	str	r0, [r4, #36]	; 0x24
 800ae7e:	b920      	cbnz	r0, 800ae8a <_dtoa_r+0x3a>
 800ae80:	4ba7      	ldr	r3, [pc, #668]	; (800b120 <_dtoa_r+0x2d0>)
 800ae82:	21ea      	movs	r1, #234	; 0xea
 800ae84:	48a7      	ldr	r0, [pc, #668]	; (800b124 <_dtoa_r+0x2d4>)
 800ae86:	f7ff ff39 	bl	800acfc <__assert_func>
 800ae8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae8e:	6005      	str	r5, [r0, #0]
 800ae90:	60c5      	str	r5, [r0, #12]
 800ae92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae94:	6819      	ldr	r1, [r3, #0]
 800ae96:	b151      	cbz	r1, 800aeae <_dtoa_r+0x5e>
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	604a      	str	r2, [r1, #4]
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	4093      	lsls	r3, r2
 800aea0:	608b      	str	r3, [r1, #8]
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 fe2e 	bl	800bb04 <_Bfree>
 800aea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	1e3b      	subs	r3, r7, #0
 800aeb0:	bfaa      	itet	ge
 800aeb2:	2300      	movge	r3, #0
 800aeb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aeb8:	f8c8 3000 	strge.w	r3, [r8]
 800aebc:	4b9a      	ldr	r3, [pc, #616]	; (800b128 <_dtoa_r+0x2d8>)
 800aebe:	bfbc      	itt	lt
 800aec0:	2201      	movlt	r2, #1
 800aec2:	f8c8 2000 	strlt.w	r2, [r8]
 800aec6:	ea33 030b 	bics.w	r3, r3, fp
 800aeca:	d11b      	bne.n	800af04 <_dtoa_r+0xb4>
 800aecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aece:	f242 730f 	movw	r3, #9999	; 0x270f
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aed8:	4333      	orrs	r3, r6
 800aeda:	f000 8592 	beq.w	800ba02 <_dtoa_r+0xbb2>
 800aede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aee0:	b963      	cbnz	r3, 800aefc <_dtoa_r+0xac>
 800aee2:	4b92      	ldr	r3, [pc, #584]	; (800b12c <_dtoa_r+0x2dc>)
 800aee4:	e022      	b.n	800af2c <_dtoa_r+0xdc>
 800aee6:	4b92      	ldr	r3, [pc, #584]	; (800b130 <_dtoa_r+0x2e0>)
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	3308      	adds	r3, #8
 800aeec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	9801      	ldr	r0, [sp, #4]
 800aef2:	b013      	add	sp, #76	; 0x4c
 800aef4:	ecbd 8b04 	vpop	{d8-d9}
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	4b8b      	ldr	r3, [pc, #556]	; (800b12c <_dtoa_r+0x2dc>)
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	3303      	adds	r3, #3
 800af02:	e7f3      	b.n	800aeec <_dtoa_r+0x9c>
 800af04:	2200      	movs	r2, #0
 800af06:	2300      	movs	r3, #0
 800af08:	4650      	mov	r0, sl
 800af0a:	4659      	mov	r1, fp
 800af0c:	f7f5 fe14 	bl	8000b38 <__aeabi_dcmpeq>
 800af10:	ec4b ab19 	vmov	d9, sl, fp
 800af14:	4680      	mov	r8, r0
 800af16:	b158      	cbz	r0, 800af30 <_dtoa_r+0xe0>
 800af18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af1a:	2301      	movs	r3, #1
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 856b 	beq.w	800b9fc <_dtoa_r+0xbac>
 800af26:	4883      	ldr	r0, [pc, #524]	; (800b134 <_dtoa_r+0x2e4>)
 800af28:	6018      	str	r0, [r3, #0]
 800af2a:	1e43      	subs	r3, r0, #1
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	e7df      	b.n	800aef0 <_dtoa_r+0xa0>
 800af30:	ec4b ab10 	vmov	d0, sl, fp
 800af34:	aa10      	add	r2, sp, #64	; 0x40
 800af36:	a911      	add	r1, sp, #68	; 0x44
 800af38:	4620      	mov	r0, r4
 800af3a:	f001 f8cb 	bl	800c0d4 <__d2b>
 800af3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af42:	ee08 0a10 	vmov	s16, r0
 800af46:	2d00      	cmp	r5, #0
 800af48:	f000 8084 	beq.w	800b054 <_dtoa_r+0x204>
 800af4c:	ee19 3a90 	vmov	r3, s19
 800af50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af58:	4656      	mov	r6, sl
 800af5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af66:	4b74      	ldr	r3, [pc, #464]	; (800b138 <_dtoa_r+0x2e8>)
 800af68:	2200      	movs	r2, #0
 800af6a:	4630      	mov	r0, r6
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 f9c3 	bl	80002f8 <__aeabi_dsub>
 800af72:	a365      	add	r3, pc, #404	; (adr r3, 800b108 <_dtoa_r+0x2b8>)
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	f7f5 fb76 	bl	8000668 <__aeabi_dmul>
 800af7c:	a364      	add	r3, pc, #400	; (adr r3, 800b110 <_dtoa_r+0x2c0>)
 800af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af82:	f7f5 f9bb 	bl	80002fc <__adddf3>
 800af86:	4606      	mov	r6, r0
 800af88:	4628      	mov	r0, r5
 800af8a:	460f      	mov	r7, r1
 800af8c:	f7f5 fb02 	bl	8000594 <__aeabi_i2d>
 800af90:	a361      	add	r3, pc, #388	; (adr r3, 800b118 <_dtoa_r+0x2c8>)
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	f7f5 fb67 	bl	8000668 <__aeabi_dmul>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 f9ab 	bl	80002fc <__adddf3>
 800afa6:	4606      	mov	r6, r0
 800afa8:	460f      	mov	r7, r1
 800afaa:	f7f5 fe0d 	bl	8000bc8 <__aeabi_d2iz>
 800afae:	2200      	movs	r2, #0
 800afb0:	9000      	str	r0, [sp, #0]
 800afb2:	2300      	movs	r3, #0
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 fdc8 	bl	8000b4c <__aeabi_dcmplt>
 800afbc:	b150      	cbz	r0, 800afd4 <_dtoa_r+0x184>
 800afbe:	9800      	ldr	r0, [sp, #0]
 800afc0:	f7f5 fae8 	bl	8000594 <__aeabi_i2d>
 800afc4:	4632      	mov	r2, r6
 800afc6:	463b      	mov	r3, r7
 800afc8:	f7f5 fdb6 	bl	8000b38 <__aeabi_dcmpeq>
 800afcc:	b910      	cbnz	r0, 800afd4 <_dtoa_r+0x184>
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	3b01      	subs	r3, #1
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	2b16      	cmp	r3, #22
 800afd8:	d85a      	bhi.n	800b090 <_dtoa_r+0x240>
 800afda:	9a00      	ldr	r2, [sp, #0]
 800afdc:	4b57      	ldr	r3, [pc, #348]	; (800b13c <_dtoa_r+0x2ec>)
 800afde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	ec51 0b19 	vmov	r0, r1, d9
 800afea:	f7f5 fdaf 	bl	8000b4c <__aeabi_dcmplt>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d050      	beq.n	800b094 <_dtoa_r+0x244>
 800aff2:	9b00      	ldr	r3, [sp, #0]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	2300      	movs	r3, #0
 800affa:	930b      	str	r3, [sp, #44]	; 0x2c
 800affc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800affe:	1b5d      	subs	r5, r3, r5
 800b000:	1e6b      	subs	r3, r5, #1
 800b002:	9305      	str	r3, [sp, #20]
 800b004:	bf45      	ittet	mi
 800b006:	f1c5 0301 	rsbmi	r3, r5, #1
 800b00a:	9304      	strmi	r3, [sp, #16]
 800b00c:	2300      	movpl	r3, #0
 800b00e:	2300      	movmi	r3, #0
 800b010:	bf4c      	ite	mi
 800b012:	9305      	strmi	r3, [sp, #20]
 800b014:	9304      	strpl	r3, [sp, #16]
 800b016:	9b00      	ldr	r3, [sp, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	db3d      	blt.n	800b098 <_dtoa_r+0x248>
 800b01c:	9b05      	ldr	r3, [sp, #20]
 800b01e:	9a00      	ldr	r2, [sp, #0]
 800b020:	920a      	str	r2, [sp, #40]	; 0x28
 800b022:	4413      	add	r3, r2
 800b024:	9305      	str	r3, [sp, #20]
 800b026:	2300      	movs	r3, #0
 800b028:	9307      	str	r3, [sp, #28]
 800b02a:	9b06      	ldr	r3, [sp, #24]
 800b02c:	2b09      	cmp	r3, #9
 800b02e:	f200 8089 	bhi.w	800b144 <_dtoa_r+0x2f4>
 800b032:	2b05      	cmp	r3, #5
 800b034:	bfc4      	itt	gt
 800b036:	3b04      	subgt	r3, #4
 800b038:	9306      	strgt	r3, [sp, #24]
 800b03a:	9b06      	ldr	r3, [sp, #24]
 800b03c:	f1a3 0302 	sub.w	r3, r3, #2
 800b040:	bfcc      	ite	gt
 800b042:	2500      	movgt	r5, #0
 800b044:	2501      	movle	r5, #1
 800b046:	2b03      	cmp	r3, #3
 800b048:	f200 8087 	bhi.w	800b15a <_dtoa_r+0x30a>
 800b04c:	e8df f003 	tbb	[pc, r3]
 800b050:	59383a2d 	.word	0x59383a2d
 800b054:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b058:	441d      	add	r5, r3
 800b05a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b05e:	2b20      	cmp	r3, #32
 800b060:	bfc1      	itttt	gt
 800b062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b066:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b06a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b06e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b072:	bfda      	itte	le
 800b074:	f1c3 0320 	rsble	r3, r3, #32
 800b078:	fa06 f003 	lslle.w	r0, r6, r3
 800b07c:	4318      	orrgt	r0, r3
 800b07e:	f7f5 fa79 	bl	8000574 <__aeabi_ui2d>
 800b082:	2301      	movs	r3, #1
 800b084:	4606      	mov	r6, r0
 800b086:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b08a:	3d01      	subs	r5, #1
 800b08c:	930e      	str	r3, [sp, #56]	; 0x38
 800b08e:	e76a      	b.n	800af66 <_dtoa_r+0x116>
 800b090:	2301      	movs	r3, #1
 800b092:	e7b2      	b.n	800affa <_dtoa_r+0x1aa>
 800b094:	900b      	str	r0, [sp, #44]	; 0x2c
 800b096:	e7b1      	b.n	800affc <_dtoa_r+0x1ac>
 800b098:	9b04      	ldr	r3, [sp, #16]
 800b09a:	9a00      	ldr	r2, [sp, #0]
 800b09c:	1a9b      	subs	r3, r3, r2
 800b09e:	9304      	str	r3, [sp, #16]
 800b0a0:	4253      	negs	r3, r2
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a8:	e7bf      	b.n	800b02a <_dtoa_r+0x1da>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9308      	str	r3, [sp, #32]
 800b0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	dc55      	bgt.n	800b160 <_dtoa_r+0x310>
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b0be:	e00c      	b.n	800b0da <_dtoa_r+0x28a>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e7f3      	b.n	800b0ac <_dtoa_r+0x25c>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c8:	9308      	str	r3, [sp, #32]
 800b0ca:	9b00      	ldr	r3, [sp, #0]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	9303      	str	r3, [sp, #12]
 800b0d6:	bfb8      	it	lt
 800b0d8:	2301      	movlt	r3, #1
 800b0da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0dc:	2200      	movs	r2, #0
 800b0de:	6042      	str	r2, [r0, #4]
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	f102 0614 	add.w	r6, r2, #20
 800b0e6:	429e      	cmp	r6, r3
 800b0e8:	6841      	ldr	r1, [r0, #4]
 800b0ea:	d93d      	bls.n	800b168 <_dtoa_r+0x318>
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f000 fcc9 	bl	800ba84 <_Balloc>
 800b0f2:	9001      	str	r0, [sp, #4]
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d13b      	bne.n	800b170 <_dtoa_r+0x320>
 800b0f8:	4b11      	ldr	r3, [pc, #68]	; (800b140 <_dtoa_r+0x2f0>)
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b100:	e6c0      	b.n	800ae84 <_dtoa_r+0x34>
 800b102:	2301      	movs	r3, #1
 800b104:	e7df      	b.n	800b0c6 <_dtoa_r+0x276>
 800b106:	bf00      	nop
 800b108:	636f4361 	.word	0x636f4361
 800b10c:	3fd287a7 	.word	0x3fd287a7
 800b110:	8b60c8b3 	.word	0x8b60c8b3
 800b114:	3fc68a28 	.word	0x3fc68a28
 800b118:	509f79fb 	.word	0x509f79fb
 800b11c:	3fd34413 	.word	0x3fd34413
 800b120:	0800d5fc 	.word	0x0800d5fc
 800b124:	0800d7ba 	.word	0x0800d7ba
 800b128:	7ff00000 	.word	0x7ff00000
 800b12c:	0800d7b6 	.word	0x0800d7b6
 800b130:	0800d7ad 	.word	0x0800d7ad
 800b134:	0800d5d9 	.word	0x0800d5d9
 800b138:	3ff80000 	.word	0x3ff80000
 800b13c:	0800d8b0 	.word	0x0800d8b0
 800b140:	0800d815 	.word	0x0800d815
 800b144:	2501      	movs	r5, #1
 800b146:	2300      	movs	r3, #0
 800b148:	9306      	str	r3, [sp, #24]
 800b14a:	9508      	str	r5, [sp, #32]
 800b14c:	f04f 33ff 	mov.w	r3, #4294967295
 800b150:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b154:	2200      	movs	r2, #0
 800b156:	2312      	movs	r3, #18
 800b158:	e7b0      	b.n	800b0bc <_dtoa_r+0x26c>
 800b15a:	2301      	movs	r3, #1
 800b15c:	9308      	str	r3, [sp, #32]
 800b15e:	e7f5      	b.n	800b14c <_dtoa_r+0x2fc>
 800b160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b162:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b166:	e7b8      	b.n	800b0da <_dtoa_r+0x28a>
 800b168:	3101      	adds	r1, #1
 800b16a:	6041      	str	r1, [r0, #4]
 800b16c:	0052      	lsls	r2, r2, #1
 800b16e:	e7b8      	b.n	800b0e2 <_dtoa_r+0x292>
 800b170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b172:	9a01      	ldr	r2, [sp, #4]
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	2b0e      	cmp	r3, #14
 800b17a:	f200 809d 	bhi.w	800b2b8 <_dtoa_r+0x468>
 800b17e:	2d00      	cmp	r5, #0
 800b180:	f000 809a 	beq.w	800b2b8 <_dtoa_r+0x468>
 800b184:	9b00      	ldr	r3, [sp, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	dd32      	ble.n	800b1f0 <_dtoa_r+0x3a0>
 800b18a:	4ab7      	ldr	r2, [pc, #732]	; (800b468 <_dtoa_r+0x618>)
 800b18c:	f003 030f 	and.w	r3, r3, #15
 800b190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b194:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b198:	9b00      	ldr	r3, [sp, #0]
 800b19a:	05d8      	lsls	r0, r3, #23
 800b19c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b1a0:	d516      	bpl.n	800b1d0 <_dtoa_r+0x380>
 800b1a2:	4bb2      	ldr	r3, [pc, #712]	; (800b46c <_dtoa_r+0x61c>)
 800b1a4:	ec51 0b19 	vmov	r0, r1, d9
 800b1a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1ac:	f7f5 fb86 	bl	80008bc <__aeabi_ddiv>
 800b1b0:	f007 070f 	and.w	r7, r7, #15
 800b1b4:	4682      	mov	sl, r0
 800b1b6:	468b      	mov	fp, r1
 800b1b8:	2503      	movs	r5, #3
 800b1ba:	4eac      	ldr	r6, [pc, #688]	; (800b46c <_dtoa_r+0x61c>)
 800b1bc:	b957      	cbnz	r7, 800b1d4 <_dtoa_r+0x384>
 800b1be:	4642      	mov	r2, r8
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	f7f5 fb79 	bl	80008bc <__aeabi_ddiv>
 800b1ca:	4682      	mov	sl, r0
 800b1cc:	468b      	mov	fp, r1
 800b1ce:	e028      	b.n	800b222 <_dtoa_r+0x3d2>
 800b1d0:	2502      	movs	r5, #2
 800b1d2:	e7f2      	b.n	800b1ba <_dtoa_r+0x36a>
 800b1d4:	07f9      	lsls	r1, r7, #31
 800b1d6:	d508      	bpl.n	800b1ea <_dtoa_r+0x39a>
 800b1d8:	4640      	mov	r0, r8
 800b1da:	4649      	mov	r1, r9
 800b1dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1e0:	f7f5 fa42 	bl	8000668 <__aeabi_dmul>
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	4689      	mov	r9, r1
 800b1ea:	107f      	asrs	r7, r7, #1
 800b1ec:	3608      	adds	r6, #8
 800b1ee:	e7e5      	b.n	800b1bc <_dtoa_r+0x36c>
 800b1f0:	f000 809b 	beq.w	800b32a <_dtoa_r+0x4da>
 800b1f4:	9b00      	ldr	r3, [sp, #0]
 800b1f6:	4f9d      	ldr	r7, [pc, #628]	; (800b46c <_dtoa_r+0x61c>)
 800b1f8:	425e      	negs	r6, r3
 800b1fa:	4b9b      	ldr	r3, [pc, #620]	; (800b468 <_dtoa_r+0x618>)
 800b1fc:	f006 020f 	and.w	r2, r6, #15
 800b200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	ec51 0b19 	vmov	r0, r1, d9
 800b20c:	f7f5 fa2c 	bl	8000668 <__aeabi_dmul>
 800b210:	1136      	asrs	r6, r6, #4
 800b212:	4682      	mov	sl, r0
 800b214:	468b      	mov	fp, r1
 800b216:	2300      	movs	r3, #0
 800b218:	2502      	movs	r5, #2
 800b21a:	2e00      	cmp	r6, #0
 800b21c:	d17a      	bne.n	800b314 <_dtoa_r+0x4c4>
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1d3      	bne.n	800b1ca <_dtoa_r+0x37a>
 800b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 8082 	beq.w	800b32e <_dtoa_r+0x4de>
 800b22a:	4b91      	ldr	r3, [pc, #580]	; (800b470 <_dtoa_r+0x620>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	4650      	mov	r0, sl
 800b230:	4659      	mov	r1, fp
 800b232:	f7f5 fc8b 	bl	8000b4c <__aeabi_dcmplt>
 800b236:	2800      	cmp	r0, #0
 800b238:	d079      	beq.n	800b32e <_dtoa_r+0x4de>
 800b23a:	9b03      	ldr	r3, [sp, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d076      	beq.n	800b32e <_dtoa_r+0x4de>
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dd36      	ble.n	800b2b4 <_dtoa_r+0x464>
 800b246:	9b00      	ldr	r3, [sp, #0]
 800b248:	4650      	mov	r0, sl
 800b24a:	4659      	mov	r1, fp
 800b24c:	1e5f      	subs	r7, r3, #1
 800b24e:	2200      	movs	r2, #0
 800b250:	4b88      	ldr	r3, [pc, #544]	; (800b474 <_dtoa_r+0x624>)
 800b252:	f7f5 fa09 	bl	8000668 <__aeabi_dmul>
 800b256:	9e02      	ldr	r6, [sp, #8]
 800b258:	4682      	mov	sl, r0
 800b25a:	468b      	mov	fp, r1
 800b25c:	3501      	adds	r5, #1
 800b25e:	4628      	mov	r0, r5
 800b260:	f7f5 f998 	bl	8000594 <__aeabi_i2d>
 800b264:	4652      	mov	r2, sl
 800b266:	465b      	mov	r3, fp
 800b268:	f7f5 f9fe 	bl	8000668 <__aeabi_dmul>
 800b26c:	4b82      	ldr	r3, [pc, #520]	; (800b478 <_dtoa_r+0x628>)
 800b26e:	2200      	movs	r2, #0
 800b270:	f7f5 f844 	bl	80002fc <__adddf3>
 800b274:	46d0      	mov	r8, sl
 800b276:	46d9      	mov	r9, fp
 800b278:	4682      	mov	sl, r0
 800b27a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b27e:	2e00      	cmp	r6, #0
 800b280:	d158      	bne.n	800b334 <_dtoa_r+0x4e4>
 800b282:	4b7e      	ldr	r3, [pc, #504]	; (800b47c <_dtoa_r+0x62c>)
 800b284:	2200      	movs	r2, #0
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 f835 	bl	80002f8 <__aeabi_dsub>
 800b28e:	4652      	mov	r2, sl
 800b290:	465b      	mov	r3, fp
 800b292:	4680      	mov	r8, r0
 800b294:	4689      	mov	r9, r1
 800b296:	f7f5 fc77 	bl	8000b88 <__aeabi_dcmpgt>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	f040 8295 	bne.w	800b7ca <_dtoa_r+0x97a>
 800b2a0:	4652      	mov	r2, sl
 800b2a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	f7f5 fc4f 	bl	8000b4c <__aeabi_dcmplt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f040 8289 	bne.w	800b7c6 <_dtoa_r+0x976>
 800b2b4:	ec5b ab19 	vmov	sl, fp, d9
 800b2b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f2c0 8148 	blt.w	800b550 <_dtoa_r+0x700>
 800b2c0:	9a00      	ldr	r2, [sp, #0]
 800b2c2:	2a0e      	cmp	r2, #14
 800b2c4:	f300 8144 	bgt.w	800b550 <_dtoa_r+0x700>
 800b2c8:	4b67      	ldr	r3, [pc, #412]	; (800b468 <_dtoa_r+0x618>)
 800b2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f280 80d5 	bge.w	800b484 <_dtoa_r+0x634>
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f300 80d1 	bgt.w	800b484 <_dtoa_r+0x634>
 800b2e2:	f040 826f 	bne.w	800b7c4 <_dtoa_r+0x974>
 800b2e6:	4b65      	ldr	r3, [pc, #404]	; (800b47c <_dtoa_r+0x62c>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f7f5 f9bb 	bl	8000668 <__aeabi_dmul>
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	465b      	mov	r3, fp
 800b2f6:	f7f5 fc3d 	bl	8000b74 <__aeabi_dcmpge>
 800b2fa:	9e03      	ldr	r6, [sp, #12]
 800b2fc:	4637      	mov	r7, r6
 800b2fe:	2800      	cmp	r0, #0
 800b300:	f040 8245 	bne.w	800b78e <_dtoa_r+0x93e>
 800b304:	9d01      	ldr	r5, [sp, #4]
 800b306:	2331      	movs	r3, #49	; 0x31
 800b308:	f805 3b01 	strb.w	r3, [r5], #1
 800b30c:	9b00      	ldr	r3, [sp, #0]
 800b30e:	3301      	adds	r3, #1
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	e240      	b.n	800b796 <_dtoa_r+0x946>
 800b314:	07f2      	lsls	r2, r6, #31
 800b316:	d505      	bpl.n	800b324 <_dtoa_r+0x4d4>
 800b318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b31c:	f7f5 f9a4 	bl	8000668 <__aeabi_dmul>
 800b320:	3501      	adds	r5, #1
 800b322:	2301      	movs	r3, #1
 800b324:	1076      	asrs	r6, r6, #1
 800b326:	3708      	adds	r7, #8
 800b328:	e777      	b.n	800b21a <_dtoa_r+0x3ca>
 800b32a:	2502      	movs	r5, #2
 800b32c:	e779      	b.n	800b222 <_dtoa_r+0x3d2>
 800b32e:	9f00      	ldr	r7, [sp, #0]
 800b330:	9e03      	ldr	r6, [sp, #12]
 800b332:	e794      	b.n	800b25e <_dtoa_r+0x40e>
 800b334:	9901      	ldr	r1, [sp, #4]
 800b336:	4b4c      	ldr	r3, [pc, #304]	; (800b468 <_dtoa_r+0x618>)
 800b338:	4431      	add	r1, r6
 800b33a:	910d      	str	r1, [sp, #52]	; 0x34
 800b33c:	9908      	ldr	r1, [sp, #32]
 800b33e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b346:	2900      	cmp	r1, #0
 800b348:	d043      	beq.n	800b3d2 <_dtoa_r+0x582>
 800b34a:	494d      	ldr	r1, [pc, #308]	; (800b480 <_dtoa_r+0x630>)
 800b34c:	2000      	movs	r0, #0
 800b34e:	f7f5 fab5 	bl	80008bc <__aeabi_ddiv>
 800b352:	4652      	mov	r2, sl
 800b354:	465b      	mov	r3, fp
 800b356:	f7f4 ffcf 	bl	80002f8 <__aeabi_dsub>
 800b35a:	9d01      	ldr	r5, [sp, #4]
 800b35c:	4682      	mov	sl, r0
 800b35e:	468b      	mov	fp, r1
 800b360:	4649      	mov	r1, r9
 800b362:	4640      	mov	r0, r8
 800b364:	f7f5 fc30 	bl	8000bc8 <__aeabi_d2iz>
 800b368:	4606      	mov	r6, r0
 800b36a:	f7f5 f913 	bl	8000594 <__aeabi_i2d>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f4 ffbf 	bl	80002f8 <__aeabi_dsub>
 800b37a:	3630      	adds	r6, #48	; 0x30
 800b37c:	f805 6b01 	strb.w	r6, [r5], #1
 800b380:	4652      	mov	r2, sl
 800b382:	465b      	mov	r3, fp
 800b384:	4680      	mov	r8, r0
 800b386:	4689      	mov	r9, r1
 800b388:	f7f5 fbe0 	bl	8000b4c <__aeabi_dcmplt>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d163      	bne.n	800b458 <_dtoa_r+0x608>
 800b390:	4642      	mov	r2, r8
 800b392:	464b      	mov	r3, r9
 800b394:	4936      	ldr	r1, [pc, #216]	; (800b470 <_dtoa_r+0x620>)
 800b396:	2000      	movs	r0, #0
 800b398:	f7f4 ffae 	bl	80002f8 <__aeabi_dsub>
 800b39c:	4652      	mov	r2, sl
 800b39e:	465b      	mov	r3, fp
 800b3a0:	f7f5 fbd4 	bl	8000b4c <__aeabi_dcmplt>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	f040 80b5 	bne.w	800b514 <_dtoa_r+0x6c4>
 800b3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ac:	429d      	cmp	r5, r3
 800b3ae:	d081      	beq.n	800b2b4 <_dtoa_r+0x464>
 800b3b0:	4b30      	ldr	r3, [pc, #192]	; (800b474 <_dtoa_r+0x624>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	4650      	mov	r0, sl
 800b3b6:	4659      	mov	r1, fp
 800b3b8:	f7f5 f956 	bl	8000668 <__aeabi_dmul>
 800b3bc:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <_dtoa_r+0x624>)
 800b3be:	4682      	mov	sl, r0
 800b3c0:	468b      	mov	fp, r1
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f7f5 f94e 	bl	8000668 <__aeabi_dmul>
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	4689      	mov	r9, r1
 800b3d0:	e7c6      	b.n	800b360 <_dtoa_r+0x510>
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	4659      	mov	r1, fp
 800b3d6:	f7f5 f947 	bl	8000668 <__aeabi_dmul>
 800b3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3dc:	9d01      	ldr	r5, [sp, #4]
 800b3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	468b      	mov	fp, r1
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	f7f5 fbee 	bl	8000bc8 <__aeabi_d2iz>
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	f7f5 f8d1 	bl	8000594 <__aeabi_i2d>
 800b3f2:	3630      	adds	r6, #48	; 0x30
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	4649      	mov	r1, r9
 800b3fc:	f7f4 ff7c 	bl	80002f8 <__aeabi_dsub>
 800b400:	f805 6b01 	strb.w	r6, [r5], #1
 800b404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b406:	429d      	cmp	r5, r3
 800b408:	4680      	mov	r8, r0
 800b40a:	4689      	mov	r9, r1
 800b40c:	f04f 0200 	mov.w	r2, #0
 800b410:	d124      	bne.n	800b45c <_dtoa_r+0x60c>
 800b412:	4b1b      	ldr	r3, [pc, #108]	; (800b480 <_dtoa_r+0x630>)
 800b414:	4650      	mov	r0, sl
 800b416:	4659      	mov	r1, fp
 800b418:	f7f4 ff70 	bl	80002fc <__adddf3>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	4640      	mov	r0, r8
 800b422:	4649      	mov	r1, r9
 800b424:	f7f5 fbb0 	bl	8000b88 <__aeabi_dcmpgt>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d173      	bne.n	800b514 <_dtoa_r+0x6c4>
 800b42c:	4652      	mov	r2, sl
 800b42e:	465b      	mov	r3, fp
 800b430:	4913      	ldr	r1, [pc, #76]	; (800b480 <_dtoa_r+0x630>)
 800b432:	2000      	movs	r0, #0
 800b434:	f7f4 ff60 	bl	80002f8 <__aeabi_dsub>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4640      	mov	r0, r8
 800b43e:	4649      	mov	r1, r9
 800b440:	f7f5 fb84 	bl	8000b4c <__aeabi_dcmplt>
 800b444:	2800      	cmp	r0, #0
 800b446:	f43f af35 	beq.w	800b2b4 <_dtoa_r+0x464>
 800b44a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b44c:	1e6b      	subs	r3, r5, #1
 800b44e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b454:	2b30      	cmp	r3, #48	; 0x30
 800b456:	d0f8      	beq.n	800b44a <_dtoa_r+0x5fa>
 800b458:	9700      	str	r7, [sp, #0]
 800b45a:	e049      	b.n	800b4f0 <_dtoa_r+0x6a0>
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <_dtoa_r+0x624>)
 800b45e:	f7f5 f903 	bl	8000668 <__aeabi_dmul>
 800b462:	4680      	mov	r8, r0
 800b464:	4689      	mov	r9, r1
 800b466:	e7bd      	b.n	800b3e4 <_dtoa_r+0x594>
 800b468:	0800d8b0 	.word	0x0800d8b0
 800b46c:	0800d888 	.word	0x0800d888
 800b470:	3ff00000 	.word	0x3ff00000
 800b474:	40240000 	.word	0x40240000
 800b478:	401c0000 	.word	0x401c0000
 800b47c:	40140000 	.word	0x40140000
 800b480:	3fe00000 	.word	0x3fe00000
 800b484:	9d01      	ldr	r5, [sp, #4]
 800b486:	4656      	mov	r6, sl
 800b488:	465f      	mov	r7, fp
 800b48a:	4642      	mov	r2, r8
 800b48c:	464b      	mov	r3, r9
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f5 fa13 	bl	80008bc <__aeabi_ddiv>
 800b496:	f7f5 fb97 	bl	8000bc8 <__aeabi_d2iz>
 800b49a:	4682      	mov	sl, r0
 800b49c:	f7f5 f87a 	bl	8000594 <__aeabi_i2d>
 800b4a0:	4642      	mov	r2, r8
 800b4a2:	464b      	mov	r3, r9
 800b4a4:	f7f5 f8e0 	bl	8000668 <__aeabi_dmul>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b4b4:	f7f4 ff20 	bl	80002f8 <__aeabi_dsub>
 800b4b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b4bc:	9e01      	ldr	r6, [sp, #4]
 800b4be:	9f03      	ldr	r7, [sp, #12]
 800b4c0:	1bae      	subs	r6, r5, r6
 800b4c2:	42b7      	cmp	r7, r6
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	d135      	bne.n	800b536 <_dtoa_r+0x6e6>
 800b4ca:	f7f4 ff17 	bl	80002fc <__adddf3>
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	f7f5 fb57 	bl	8000b88 <__aeabi_dcmpgt>
 800b4da:	b9d0      	cbnz	r0, 800b512 <_dtoa_r+0x6c2>
 800b4dc:	4642      	mov	r2, r8
 800b4de:	464b      	mov	r3, r9
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	f7f5 fb28 	bl	8000b38 <__aeabi_dcmpeq>
 800b4e8:	b110      	cbz	r0, 800b4f0 <_dtoa_r+0x6a0>
 800b4ea:	f01a 0f01 	tst.w	sl, #1
 800b4ee:	d110      	bne.n	800b512 <_dtoa_r+0x6c2>
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	ee18 1a10 	vmov	r1, s16
 800b4f6:	f000 fb05 	bl	800bb04 <_Bfree>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9800      	ldr	r0, [sp, #0]
 800b4fe:	702b      	strb	r3, [r5, #0]
 800b500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b502:	3001      	adds	r0, #1
 800b504:	6018      	str	r0, [r3, #0]
 800b506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f43f acf1 	beq.w	800aef0 <_dtoa_r+0xa0>
 800b50e:	601d      	str	r5, [r3, #0]
 800b510:	e4ee      	b.n	800aef0 <_dtoa_r+0xa0>
 800b512:	9f00      	ldr	r7, [sp, #0]
 800b514:	462b      	mov	r3, r5
 800b516:	461d      	mov	r5, r3
 800b518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b51c:	2a39      	cmp	r2, #57	; 0x39
 800b51e:	d106      	bne.n	800b52e <_dtoa_r+0x6de>
 800b520:	9a01      	ldr	r2, [sp, #4]
 800b522:	429a      	cmp	r2, r3
 800b524:	d1f7      	bne.n	800b516 <_dtoa_r+0x6c6>
 800b526:	9901      	ldr	r1, [sp, #4]
 800b528:	2230      	movs	r2, #48	; 0x30
 800b52a:	3701      	adds	r7, #1
 800b52c:	700a      	strb	r2, [r1, #0]
 800b52e:	781a      	ldrb	r2, [r3, #0]
 800b530:	3201      	adds	r2, #1
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	e790      	b.n	800b458 <_dtoa_r+0x608>
 800b536:	4ba6      	ldr	r3, [pc, #664]	; (800b7d0 <_dtoa_r+0x980>)
 800b538:	2200      	movs	r2, #0
 800b53a:	f7f5 f895 	bl	8000668 <__aeabi_dmul>
 800b53e:	2200      	movs	r2, #0
 800b540:	2300      	movs	r3, #0
 800b542:	4606      	mov	r6, r0
 800b544:	460f      	mov	r7, r1
 800b546:	f7f5 faf7 	bl	8000b38 <__aeabi_dcmpeq>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d09d      	beq.n	800b48a <_dtoa_r+0x63a>
 800b54e:	e7cf      	b.n	800b4f0 <_dtoa_r+0x6a0>
 800b550:	9a08      	ldr	r2, [sp, #32]
 800b552:	2a00      	cmp	r2, #0
 800b554:	f000 80d7 	beq.w	800b706 <_dtoa_r+0x8b6>
 800b558:	9a06      	ldr	r2, [sp, #24]
 800b55a:	2a01      	cmp	r2, #1
 800b55c:	f300 80ba 	bgt.w	800b6d4 <_dtoa_r+0x884>
 800b560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b562:	2a00      	cmp	r2, #0
 800b564:	f000 80b2 	beq.w	800b6cc <_dtoa_r+0x87c>
 800b568:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b56c:	9e07      	ldr	r6, [sp, #28]
 800b56e:	9d04      	ldr	r5, [sp, #16]
 800b570:	9a04      	ldr	r2, [sp, #16]
 800b572:	441a      	add	r2, r3
 800b574:	9204      	str	r2, [sp, #16]
 800b576:	9a05      	ldr	r2, [sp, #20]
 800b578:	2101      	movs	r1, #1
 800b57a:	441a      	add	r2, r3
 800b57c:	4620      	mov	r0, r4
 800b57e:	9205      	str	r2, [sp, #20]
 800b580:	f000 fb78 	bl	800bc74 <__i2b>
 800b584:	4607      	mov	r7, r0
 800b586:	2d00      	cmp	r5, #0
 800b588:	dd0c      	ble.n	800b5a4 <_dtoa_r+0x754>
 800b58a:	9b05      	ldr	r3, [sp, #20]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dd09      	ble.n	800b5a4 <_dtoa_r+0x754>
 800b590:	42ab      	cmp	r3, r5
 800b592:	9a04      	ldr	r2, [sp, #16]
 800b594:	bfa8      	it	ge
 800b596:	462b      	movge	r3, r5
 800b598:	1ad2      	subs	r2, r2, r3
 800b59a:	9204      	str	r2, [sp, #16]
 800b59c:	9a05      	ldr	r2, [sp, #20]
 800b59e:	1aed      	subs	r5, r5, r3
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	9305      	str	r3, [sp, #20]
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	b31b      	cbz	r3, 800b5f0 <_dtoa_r+0x7a0>
 800b5a8:	9b08      	ldr	r3, [sp, #32]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 80af 	beq.w	800b70e <_dtoa_r+0x8be>
 800b5b0:	2e00      	cmp	r6, #0
 800b5b2:	dd13      	ble.n	800b5dc <_dtoa_r+0x78c>
 800b5b4:	4639      	mov	r1, r7
 800b5b6:	4632      	mov	r2, r6
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 fc1b 	bl	800bdf4 <__pow5mult>
 800b5be:	ee18 2a10 	vmov	r2, s16
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 fb6a 	bl	800bca0 <__multiply>
 800b5cc:	ee18 1a10 	vmov	r1, s16
 800b5d0:	4680      	mov	r8, r0
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 fa96 	bl	800bb04 <_Bfree>
 800b5d8:	ee08 8a10 	vmov	s16, r8
 800b5dc:	9b07      	ldr	r3, [sp, #28]
 800b5de:	1b9a      	subs	r2, r3, r6
 800b5e0:	d006      	beq.n	800b5f0 <_dtoa_r+0x7a0>
 800b5e2:	ee18 1a10 	vmov	r1, s16
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f000 fc04 	bl	800bdf4 <__pow5mult>
 800b5ec:	ee08 0a10 	vmov	s16, r0
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 fb3e 	bl	800bc74 <__i2b>
 800b5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	f340 8088 	ble.w	800b712 <_dtoa_r+0x8c2>
 800b602:	461a      	mov	r2, r3
 800b604:	4601      	mov	r1, r0
 800b606:	4620      	mov	r0, r4
 800b608:	f000 fbf4 	bl	800bdf4 <__pow5mult>
 800b60c:	9b06      	ldr	r3, [sp, #24]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	4606      	mov	r6, r0
 800b612:	f340 8081 	ble.w	800b718 <_dtoa_r+0x8c8>
 800b616:	f04f 0800 	mov.w	r8, #0
 800b61a:	6933      	ldr	r3, [r6, #16]
 800b61c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b620:	6918      	ldr	r0, [r3, #16]
 800b622:	f000 fad7 	bl	800bbd4 <__hi0bits>
 800b626:	f1c0 0020 	rsb	r0, r0, #32
 800b62a:	9b05      	ldr	r3, [sp, #20]
 800b62c:	4418      	add	r0, r3
 800b62e:	f010 001f 	ands.w	r0, r0, #31
 800b632:	f000 8092 	beq.w	800b75a <_dtoa_r+0x90a>
 800b636:	f1c0 0320 	rsb	r3, r0, #32
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	f340 808a 	ble.w	800b754 <_dtoa_r+0x904>
 800b640:	f1c0 001c 	rsb	r0, r0, #28
 800b644:	9b04      	ldr	r3, [sp, #16]
 800b646:	4403      	add	r3, r0
 800b648:	9304      	str	r3, [sp, #16]
 800b64a:	9b05      	ldr	r3, [sp, #20]
 800b64c:	4403      	add	r3, r0
 800b64e:	4405      	add	r5, r0
 800b650:	9305      	str	r3, [sp, #20]
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	dd07      	ble.n	800b668 <_dtoa_r+0x818>
 800b658:	ee18 1a10 	vmov	r1, s16
 800b65c:	461a      	mov	r2, r3
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 fc22 	bl	800bea8 <__lshift>
 800b664:	ee08 0a10 	vmov	s16, r0
 800b668:	9b05      	ldr	r3, [sp, #20]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	dd05      	ble.n	800b67a <_dtoa_r+0x82a>
 800b66e:	4631      	mov	r1, r6
 800b670:	461a      	mov	r2, r3
 800b672:	4620      	mov	r0, r4
 800b674:	f000 fc18 	bl	800bea8 <__lshift>
 800b678:	4606      	mov	r6, r0
 800b67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d06e      	beq.n	800b75e <_dtoa_r+0x90e>
 800b680:	ee18 0a10 	vmov	r0, s16
 800b684:	4631      	mov	r1, r6
 800b686:	f000 fc7f 	bl	800bf88 <__mcmp>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	da67      	bge.n	800b75e <_dtoa_r+0x90e>
 800b68e:	9b00      	ldr	r3, [sp, #0]
 800b690:	3b01      	subs	r3, #1
 800b692:	ee18 1a10 	vmov	r1, s16
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	220a      	movs	r2, #10
 800b69a:	2300      	movs	r3, #0
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fa53 	bl	800bb48 <__multadd>
 800b6a2:	9b08      	ldr	r3, [sp, #32]
 800b6a4:	ee08 0a10 	vmov	s16, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 81b1 	beq.w	800ba10 <_dtoa_r+0xbc0>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	220a      	movs	r2, #10
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f000 fa47 	bl	800bb48 <__multadd>
 800b6ba:	9b02      	ldr	r3, [sp, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	4607      	mov	r7, r0
 800b6c0:	f300 808e 	bgt.w	800b7e0 <_dtoa_r+0x990>
 800b6c4:	9b06      	ldr	r3, [sp, #24]
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	dc51      	bgt.n	800b76e <_dtoa_r+0x91e>
 800b6ca:	e089      	b.n	800b7e0 <_dtoa_r+0x990>
 800b6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6d2:	e74b      	b.n	800b56c <_dtoa_r+0x71c>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	1e5e      	subs	r6, r3, #1
 800b6d8:	9b07      	ldr	r3, [sp, #28]
 800b6da:	42b3      	cmp	r3, r6
 800b6dc:	bfbf      	itttt	lt
 800b6de:	9b07      	ldrlt	r3, [sp, #28]
 800b6e0:	9607      	strlt	r6, [sp, #28]
 800b6e2:	1af2      	sublt	r2, r6, r3
 800b6e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b6e6:	bfb6      	itet	lt
 800b6e8:	189b      	addlt	r3, r3, r2
 800b6ea:	1b9e      	subge	r6, r3, r6
 800b6ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b6ee:	9b03      	ldr	r3, [sp, #12]
 800b6f0:	bfb8      	it	lt
 800b6f2:	2600      	movlt	r6, #0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	bfb7      	itett	lt
 800b6f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b6fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b700:	1a9d      	sublt	r5, r3, r2
 800b702:	2300      	movlt	r3, #0
 800b704:	e734      	b.n	800b570 <_dtoa_r+0x720>
 800b706:	9e07      	ldr	r6, [sp, #28]
 800b708:	9d04      	ldr	r5, [sp, #16]
 800b70a:	9f08      	ldr	r7, [sp, #32]
 800b70c:	e73b      	b.n	800b586 <_dtoa_r+0x736>
 800b70e:	9a07      	ldr	r2, [sp, #28]
 800b710:	e767      	b.n	800b5e2 <_dtoa_r+0x792>
 800b712:	9b06      	ldr	r3, [sp, #24]
 800b714:	2b01      	cmp	r3, #1
 800b716:	dc18      	bgt.n	800b74a <_dtoa_r+0x8fa>
 800b718:	f1ba 0f00 	cmp.w	sl, #0
 800b71c:	d115      	bne.n	800b74a <_dtoa_r+0x8fa>
 800b71e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b722:	b993      	cbnz	r3, 800b74a <_dtoa_r+0x8fa>
 800b724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b728:	0d1b      	lsrs	r3, r3, #20
 800b72a:	051b      	lsls	r3, r3, #20
 800b72c:	b183      	cbz	r3, 800b750 <_dtoa_r+0x900>
 800b72e:	9b04      	ldr	r3, [sp, #16]
 800b730:	3301      	adds	r3, #1
 800b732:	9304      	str	r3, [sp, #16]
 800b734:	9b05      	ldr	r3, [sp, #20]
 800b736:	3301      	adds	r3, #1
 800b738:	9305      	str	r3, [sp, #20]
 800b73a:	f04f 0801 	mov.w	r8, #1
 800b73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b740:	2b00      	cmp	r3, #0
 800b742:	f47f af6a 	bne.w	800b61a <_dtoa_r+0x7ca>
 800b746:	2001      	movs	r0, #1
 800b748:	e76f      	b.n	800b62a <_dtoa_r+0x7da>
 800b74a:	f04f 0800 	mov.w	r8, #0
 800b74e:	e7f6      	b.n	800b73e <_dtoa_r+0x8ee>
 800b750:	4698      	mov	r8, r3
 800b752:	e7f4      	b.n	800b73e <_dtoa_r+0x8ee>
 800b754:	f43f af7d 	beq.w	800b652 <_dtoa_r+0x802>
 800b758:	4618      	mov	r0, r3
 800b75a:	301c      	adds	r0, #28
 800b75c:	e772      	b.n	800b644 <_dtoa_r+0x7f4>
 800b75e:	9b03      	ldr	r3, [sp, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	dc37      	bgt.n	800b7d4 <_dtoa_r+0x984>
 800b764:	9b06      	ldr	r3, [sp, #24]
 800b766:	2b02      	cmp	r3, #2
 800b768:	dd34      	ble.n	800b7d4 <_dtoa_r+0x984>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	9302      	str	r3, [sp, #8]
 800b76e:	9b02      	ldr	r3, [sp, #8]
 800b770:	b96b      	cbnz	r3, 800b78e <_dtoa_r+0x93e>
 800b772:	4631      	mov	r1, r6
 800b774:	2205      	movs	r2, #5
 800b776:	4620      	mov	r0, r4
 800b778:	f000 f9e6 	bl	800bb48 <__multadd>
 800b77c:	4601      	mov	r1, r0
 800b77e:	4606      	mov	r6, r0
 800b780:	ee18 0a10 	vmov	r0, s16
 800b784:	f000 fc00 	bl	800bf88 <__mcmp>
 800b788:	2800      	cmp	r0, #0
 800b78a:	f73f adbb 	bgt.w	800b304 <_dtoa_r+0x4b4>
 800b78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b790:	9d01      	ldr	r5, [sp, #4]
 800b792:	43db      	mvns	r3, r3
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	f04f 0800 	mov.w	r8, #0
 800b79a:	4631      	mov	r1, r6
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 f9b1 	bl	800bb04 <_Bfree>
 800b7a2:	2f00      	cmp	r7, #0
 800b7a4:	f43f aea4 	beq.w	800b4f0 <_dtoa_r+0x6a0>
 800b7a8:	f1b8 0f00 	cmp.w	r8, #0
 800b7ac:	d005      	beq.n	800b7ba <_dtoa_r+0x96a>
 800b7ae:	45b8      	cmp	r8, r7
 800b7b0:	d003      	beq.n	800b7ba <_dtoa_r+0x96a>
 800b7b2:	4641      	mov	r1, r8
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 f9a5 	bl	800bb04 <_Bfree>
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 f9a1 	bl	800bb04 <_Bfree>
 800b7c2:	e695      	b.n	800b4f0 <_dtoa_r+0x6a0>
 800b7c4:	2600      	movs	r6, #0
 800b7c6:	4637      	mov	r7, r6
 800b7c8:	e7e1      	b.n	800b78e <_dtoa_r+0x93e>
 800b7ca:	9700      	str	r7, [sp, #0]
 800b7cc:	4637      	mov	r7, r6
 800b7ce:	e599      	b.n	800b304 <_dtoa_r+0x4b4>
 800b7d0:	40240000 	.word	0x40240000
 800b7d4:	9b08      	ldr	r3, [sp, #32]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 80ca 	beq.w	800b970 <_dtoa_r+0xb20>
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	9302      	str	r3, [sp, #8]
 800b7e0:	2d00      	cmp	r5, #0
 800b7e2:	dd05      	ble.n	800b7f0 <_dtoa_r+0x9a0>
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	462a      	mov	r2, r5
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f000 fb5d 	bl	800bea8 <__lshift>
 800b7ee:	4607      	mov	r7, r0
 800b7f0:	f1b8 0f00 	cmp.w	r8, #0
 800b7f4:	d05b      	beq.n	800b8ae <_dtoa_r+0xa5e>
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f000 f943 	bl	800ba84 <_Balloc>
 800b7fe:	4605      	mov	r5, r0
 800b800:	b928      	cbnz	r0, 800b80e <_dtoa_r+0x9be>
 800b802:	4b87      	ldr	r3, [pc, #540]	; (800ba20 <_dtoa_r+0xbd0>)
 800b804:	4602      	mov	r2, r0
 800b806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b80a:	f7ff bb3b 	b.w	800ae84 <_dtoa_r+0x34>
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	3202      	adds	r2, #2
 800b812:	0092      	lsls	r2, r2, #2
 800b814:	f107 010c 	add.w	r1, r7, #12
 800b818:	300c      	adds	r0, #12
 800b81a:	f000 f925 	bl	800ba68 <memcpy>
 800b81e:	2201      	movs	r2, #1
 800b820:	4629      	mov	r1, r5
 800b822:	4620      	mov	r0, r4
 800b824:	f000 fb40 	bl	800bea8 <__lshift>
 800b828:	9b01      	ldr	r3, [sp, #4]
 800b82a:	f103 0901 	add.w	r9, r3, #1
 800b82e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b832:	4413      	add	r3, r2
 800b834:	9305      	str	r3, [sp, #20]
 800b836:	f00a 0301 	and.w	r3, sl, #1
 800b83a:	46b8      	mov	r8, r7
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	4607      	mov	r7, r0
 800b840:	4631      	mov	r1, r6
 800b842:	ee18 0a10 	vmov	r0, s16
 800b846:	f7ff fa77 	bl	800ad38 <quorem>
 800b84a:	4641      	mov	r1, r8
 800b84c:	9002      	str	r0, [sp, #8]
 800b84e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b852:	ee18 0a10 	vmov	r0, s16
 800b856:	f000 fb97 	bl	800bf88 <__mcmp>
 800b85a:	463a      	mov	r2, r7
 800b85c:	9003      	str	r0, [sp, #12]
 800b85e:	4631      	mov	r1, r6
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fbad 	bl	800bfc0 <__mdiff>
 800b866:	68c2      	ldr	r2, [r0, #12]
 800b868:	f109 3bff 	add.w	fp, r9, #4294967295
 800b86c:	4605      	mov	r5, r0
 800b86e:	bb02      	cbnz	r2, 800b8b2 <_dtoa_r+0xa62>
 800b870:	4601      	mov	r1, r0
 800b872:	ee18 0a10 	vmov	r0, s16
 800b876:	f000 fb87 	bl	800bf88 <__mcmp>
 800b87a:	4602      	mov	r2, r0
 800b87c:	4629      	mov	r1, r5
 800b87e:	4620      	mov	r0, r4
 800b880:	9207      	str	r2, [sp, #28]
 800b882:	f000 f93f 	bl	800bb04 <_Bfree>
 800b886:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b88a:	ea43 0102 	orr.w	r1, r3, r2
 800b88e:	9b04      	ldr	r3, [sp, #16]
 800b890:	430b      	orrs	r3, r1
 800b892:	464d      	mov	r5, r9
 800b894:	d10f      	bne.n	800b8b6 <_dtoa_r+0xa66>
 800b896:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b89a:	d02a      	beq.n	800b8f2 <_dtoa_r+0xaa2>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dd02      	ble.n	800b8a8 <_dtoa_r+0xa58>
 800b8a2:	9b02      	ldr	r3, [sp, #8]
 800b8a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b8a8:	f88b a000 	strb.w	sl, [fp]
 800b8ac:	e775      	b.n	800b79a <_dtoa_r+0x94a>
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	e7ba      	b.n	800b828 <_dtoa_r+0x9d8>
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	e7e2      	b.n	800b87c <_dtoa_r+0xa2c>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	db04      	blt.n	800b8c6 <_dtoa_r+0xa76>
 800b8bc:	9906      	ldr	r1, [sp, #24]
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	9904      	ldr	r1, [sp, #16]
 800b8c2:	430b      	orrs	r3, r1
 800b8c4:	d122      	bne.n	800b90c <_dtoa_r+0xabc>
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	ddee      	ble.n	800b8a8 <_dtoa_r+0xa58>
 800b8ca:	ee18 1a10 	vmov	r1, s16
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 fae9 	bl	800bea8 <__lshift>
 800b8d6:	4631      	mov	r1, r6
 800b8d8:	ee08 0a10 	vmov	s16, r0
 800b8dc:	f000 fb54 	bl	800bf88 <__mcmp>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	dc03      	bgt.n	800b8ec <_dtoa_r+0xa9c>
 800b8e4:	d1e0      	bne.n	800b8a8 <_dtoa_r+0xa58>
 800b8e6:	f01a 0f01 	tst.w	sl, #1
 800b8ea:	d0dd      	beq.n	800b8a8 <_dtoa_r+0xa58>
 800b8ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8f0:	d1d7      	bne.n	800b8a2 <_dtoa_r+0xa52>
 800b8f2:	2339      	movs	r3, #57	; 0x39
 800b8f4:	f88b 3000 	strb.w	r3, [fp]
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	461d      	mov	r5, r3
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b902:	2a39      	cmp	r2, #57	; 0x39
 800b904:	d071      	beq.n	800b9ea <_dtoa_r+0xb9a>
 800b906:	3201      	adds	r2, #1
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	e746      	b.n	800b79a <_dtoa_r+0x94a>
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	dd07      	ble.n	800b920 <_dtoa_r+0xad0>
 800b910:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b914:	d0ed      	beq.n	800b8f2 <_dtoa_r+0xaa2>
 800b916:	f10a 0301 	add.w	r3, sl, #1
 800b91a:	f88b 3000 	strb.w	r3, [fp]
 800b91e:	e73c      	b.n	800b79a <_dtoa_r+0x94a>
 800b920:	9b05      	ldr	r3, [sp, #20]
 800b922:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b926:	4599      	cmp	r9, r3
 800b928:	d047      	beq.n	800b9ba <_dtoa_r+0xb6a>
 800b92a:	ee18 1a10 	vmov	r1, s16
 800b92e:	2300      	movs	r3, #0
 800b930:	220a      	movs	r2, #10
 800b932:	4620      	mov	r0, r4
 800b934:	f000 f908 	bl	800bb48 <__multadd>
 800b938:	45b8      	cmp	r8, r7
 800b93a:	ee08 0a10 	vmov	s16, r0
 800b93e:	f04f 0300 	mov.w	r3, #0
 800b942:	f04f 020a 	mov.w	r2, #10
 800b946:	4641      	mov	r1, r8
 800b948:	4620      	mov	r0, r4
 800b94a:	d106      	bne.n	800b95a <_dtoa_r+0xb0a>
 800b94c:	f000 f8fc 	bl	800bb48 <__multadd>
 800b950:	4680      	mov	r8, r0
 800b952:	4607      	mov	r7, r0
 800b954:	f109 0901 	add.w	r9, r9, #1
 800b958:	e772      	b.n	800b840 <_dtoa_r+0x9f0>
 800b95a:	f000 f8f5 	bl	800bb48 <__multadd>
 800b95e:	4639      	mov	r1, r7
 800b960:	4680      	mov	r8, r0
 800b962:	2300      	movs	r3, #0
 800b964:	220a      	movs	r2, #10
 800b966:	4620      	mov	r0, r4
 800b968:	f000 f8ee 	bl	800bb48 <__multadd>
 800b96c:	4607      	mov	r7, r0
 800b96e:	e7f1      	b.n	800b954 <_dtoa_r+0xb04>
 800b970:	9b03      	ldr	r3, [sp, #12]
 800b972:	9302      	str	r3, [sp, #8]
 800b974:	9d01      	ldr	r5, [sp, #4]
 800b976:	ee18 0a10 	vmov	r0, s16
 800b97a:	4631      	mov	r1, r6
 800b97c:	f7ff f9dc 	bl	800ad38 <quorem>
 800b980:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b984:	9b01      	ldr	r3, [sp, #4]
 800b986:	f805 ab01 	strb.w	sl, [r5], #1
 800b98a:	1aea      	subs	r2, r5, r3
 800b98c:	9b02      	ldr	r3, [sp, #8]
 800b98e:	4293      	cmp	r3, r2
 800b990:	dd09      	ble.n	800b9a6 <_dtoa_r+0xb56>
 800b992:	ee18 1a10 	vmov	r1, s16
 800b996:	2300      	movs	r3, #0
 800b998:	220a      	movs	r2, #10
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 f8d4 	bl	800bb48 <__multadd>
 800b9a0:	ee08 0a10 	vmov	s16, r0
 800b9a4:	e7e7      	b.n	800b976 <_dtoa_r+0xb26>
 800b9a6:	9b02      	ldr	r3, [sp, #8]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfc8      	it	gt
 800b9ac:	461d      	movgt	r5, r3
 800b9ae:	9b01      	ldr	r3, [sp, #4]
 800b9b0:	bfd8      	it	le
 800b9b2:	2501      	movle	r5, #1
 800b9b4:	441d      	add	r5, r3
 800b9b6:	f04f 0800 	mov.w	r8, #0
 800b9ba:	ee18 1a10 	vmov	r1, s16
 800b9be:	2201      	movs	r2, #1
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f000 fa71 	bl	800bea8 <__lshift>
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	ee08 0a10 	vmov	s16, r0
 800b9cc:	f000 fadc 	bl	800bf88 <__mcmp>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	dc91      	bgt.n	800b8f8 <_dtoa_r+0xaa8>
 800b9d4:	d102      	bne.n	800b9dc <_dtoa_r+0xb8c>
 800b9d6:	f01a 0f01 	tst.w	sl, #1
 800b9da:	d18d      	bne.n	800b8f8 <_dtoa_r+0xaa8>
 800b9dc:	462b      	mov	r3, r5
 800b9de:	461d      	mov	r5, r3
 800b9e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9e4:	2a30      	cmp	r2, #48	; 0x30
 800b9e6:	d0fa      	beq.n	800b9de <_dtoa_r+0xb8e>
 800b9e8:	e6d7      	b.n	800b79a <_dtoa_r+0x94a>
 800b9ea:	9a01      	ldr	r2, [sp, #4]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d184      	bne.n	800b8fa <_dtoa_r+0xaaa>
 800b9f0:	9b00      	ldr	r3, [sp, #0]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	2331      	movs	r3, #49	; 0x31
 800b9f8:	7013      	strb	r3, [r2, #0]
 800b9fa:	e6ce      	b.n	800b79a <_dtoa_r+0x94a>
 800b9fc:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <_dtoa_r+0xbd4>)
 800b9fe:	f7ff ba95 	b.w	800af2c <_dtoa_r+0xdc>
 800ba02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f47f aa6e 	bne.w	800aee6 <_dtoa_r+0x96>
 800ba0a:	4b07      	ldr	r3, [pc, #28]	; (800ba28 <_dtoa_r+0xbd8>)
 800ba0c:	f7ff ba8e 	b.w	800af2c <_dtoa_r+0xdc>
 800ba10:	9b02      	ldr	r3, [sp, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	dcae      	bgt.n	800b974 <_dtoa_r+0xb24>
 800ba16:	9b06      	ldr	r3, [sp, #24]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	f73f aea8 	bgt.w	800b76e <_dtoa_r+0x91e>
 800ba1e:	e7a9      	b.n	800b974 <_dtoa_r+0xb24>
 800ba20:	0800d815 	.word	0x0800d815
 800ba24:	0800d5d8 	.word	0x0800d5d8
 800ba28:	0800d7ad 	.word	0x0800d7ad

0800ba2c <fiprintf>:
 800ba2c:	b40e      	push	{r1, r2, r3}
 800ba2e:	b503      	push	{r0, r1, lr}
 800ba30:	4601      	mov	r1, r0
 800ba32:	ab03      	add	r3, sp, #12
 800ba34:	4805      	ldr	r0, [pc, #20]	; (800ba4c <fiprintf+0x20>)
 800ba36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3a:	6800      	ldr	r0, [r0, #0]
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	f000 fe21 	bl	800c684 <_vfiprintf_r>
 800ba42:	b002      	add	sp, #8
 800ba44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba48:	b003      	add	sp, #12
 800ba4a:	4770      	bx	lr
 800ba4c:	2000001c 	.word	0x2000001c

0800ba50 <_localeconv_r>:
 800ba50:	4800      	ldr	r0, [pc, #0]	; (800ba54 <_localeconv_r+0x4>)
 800ba52:	4770      	bx	lr
 800ba54:	20000170 	.word	0x20000170

0800ba58 <malloc>:
 800ba58:	4b02      	ldr	r3, [pc, #8]	; (800ba64 <malloc+0xc>)
 800ba5a:	4601      	mov	r1, r0
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	f000 bc17 	b.w	800c290 <_malloc_r>
 800ba62:	bf00      	nop
 800ba64:	2000001c 	.word	0x2000001c

0800ba68 <memcpy>:
 800ba68:	440a      	add	r2, r1
 800ba6a:	4291      	cmp	r1, r2
 800ba6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba70:	d100      	bne.n	800ba74 <memcpy+0xc>
 800ba72:	4770      	bx	lr
 800ba74:	b510      	push	{r4, lr}
 800ba76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba7e:	4291      	cmp	r1, r2
 800ba80:	d1f9      	bne.n	800ba76 <memcpy+0xe>
 800ba82:	bd10      	pop	{r4, pc}

0800ba84 <_Balloc>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	b976      	cbnz	r6, 800baac <_Balloc+0x28>
 800ba8e:	2010      	movs	r0, #16
 800ba90:	f7ff ffe2 	bl	800ba58 <malloc>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6260      	str	r0, [r4, #36]	; 0x24
 800ba98:	b920      	cbnz	r0, 800baa4 <_Balloc+0x20>
 800ba9a:	4b18      	ldr	r3, [pc, #96]	; (800bafc <_Balloc+0x78>)
 800ba9c:	4818      	ldr	r0, [pc, #96]	; (800bb00 <_Balloc+0x7c>)
 800ba9e:	2166      	movs	r1, #102	; 0x66
 800baa0:	f7ff f92c 	bl	800acfc <__assert_func>
 800baa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baa8:	6006      	str	r6, [r0, #0]
 800baaa:	60c6      	str	r6, [r0, #12]
 800baac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800baae:	68f3      	ldr	r3, [r6, #12]
 800bab0:	b183      	cbz	r3, 800bad4 <_Balloc+0x50>
 800bab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baba:	b9b8      	cbnz	r0, 800baec <_Balloc+0x68>
 800babc:	2101      	movs	r1, #1
 800babe:	fa01 f605 	lsl.w	r6, r1, r5
 800bac2:	1d72      	adds	r2, r6, #5
 800bac4:	0092      	lsls	r2, r2, #2
 800bac6:	4620      	mov	r0, r4
 800bac8:	f000 fb60 	bl	800c18c <_calloc_r>
 800bacc:	b160      	cbz	r0, 800bae8 <_Balloc+0x64>
 800bace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bad2:	e00e      	b.n	800baf2 <_Balloc+0x6e>
 800bad4:	2221      	movs	r2, #33	; 0x21
 800bad6:	2104      	movs	r1, #4
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 fb57 	bl	800c18c <_calloc_r>
 800bade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bae0:	60f0      	str	r0, [r6, #12]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1e4      	bne.n	800bab2 <_Balloc+0x2e>
 800bae8:	2000      	movs	r0, #0
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	6802      	ldr	r2, [r0, #0]
 800baee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baf2:	2300      	movs	r3, #0
 800baf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baf8:	e7f7      	b.n	800baea <_Balloc+0x66>
 800bafa:	bf00      	nop
 800bafc:	0800d5fc 	.word	0x0800d5fc
 800bb00:	0800d826 	.word	0x0800d826

0800bb04 <_Bfree>:
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb08:	4605      	mov	r5, r0
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	b976      	cbnz	r6, 800bb2c <_Bfree+0x28>
 800bb0e:	2010      	movs	r0, #16
 800bb10:	f7ff ffa2 	bl	800ba58 <malloc>
 800bb14:	4602      	mov	r2, r0
 800bb16:	6268      	str	r0, [r5, #36]	; 0x24
 800bb18:	b920      	cbnz	r0, 800bb24 <_Bfree+0x20>
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <_Bfree+0x3c>)
 800bb1c:	4809      	ldr	r0, [pc, #36]	; (800bb44 <_Bfree+0x40>)
 800bb1e:	218a      	movs	r1, #138	; 0x8a
 800bb20:	f7ff f8ec 	bl	800acfc <__assert_func>
 800bb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb28:	6006      	str	r6, [r0, #0]
 800bb2a:	60c6      	str	r6, [r0, #12]
 800bb2c:	b13c      	cbz	r4, 800bb3e <_Bfree+0x3a>
 800bb2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb30:	6862      	ldr	r2, [r4, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb38:	6021      	str	r1, [r4, #0]
 800bb3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
 800bb40:	0800d5fc 	.word	0x0800d5fc
 800bb44:	0800d826 	.word	0x0800d826

0800bb48 <__multadd>:
 800bb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4c:	690d      	ldr	r5, [r1, #16]
 800bb4e:	4607      	mov	r7, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	461e      	mov	r6, r3
 800bb54:	f101 0c14 	add.w	ip, r1, #20
 800bb58:	2000      	movs	r0, #0
 800bb5a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb5e:	b299      	uxth	r1, r3
 800bb60:	fb02 6101 	mla	r1, r2, r1, r6
 800bb64:	0c1e      	lsrs	r6, r3, #16
 800bb66:	0c0b      	lsrs	r3, r1, #16
 800bb68:	fb02 3306 	mla	r3, r2, r6, r3
 800bb6c:	b289      	uxth	r1, r1
 800bb6e:	3001      	adds	r0, #1
 800bb70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb74:	4285      	cmp	r5, r0
 800bb76:	f84c 1b04 	str.w	r1, [ip], #4
 800bb7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb7e:	dcec      	bgt.n	800bb5a <__multadd+0x12>
 800bb80:	b30e      	cbz	r6, 800bbc6 <__multadd+0x7e>
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dc19      	bgt.n	800bbbc <__multadd+0x74>
 800bb88:	6861      	ldr	r1, [r4, #4]
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	3101      	adds	r1, #1
 800bb8e:	f7ff ff79 	bl	800ba84 <_Balloc>
 800bb92:	4680      	mov	r8, r0
 800bb94:	b928      	cbnz	r0, 800bba2 <__multadd+0x5a>
 800bb96:	4602      	mov	r2, r0
 800bb98:	4b0c      	ldr	r3, [pc, #48]	; (800bbcc <__multadd+0x84>)
 800bb9a:	480d      	ldr	r0, [pc, #52]	; (800bbd0 <__multadd+0x88>)
 800bb9c:	21b5      	movs	r1, #181	; 0xb5
 800bb9e:	f7ff f8ad 	bl	800acfc <__assert_func>
 800bba2:	6922      	ldr	r2, [r4, #16]
 800bba4:	3202      	adds	r2, #2
 800bba6:	f104 010c 	add.w	r1, r4, #12
 800bbaa:	0092      	lsls	r2, r2, #2
 800bbac:	300c      	adds	r0, #12
 800bbae:	f7ff ff5b 	bl	800ba68 <memcpy>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	f7ff ffa5 	bl	800bb04 <_Bfree>
 800bbba:	4644      	mov	r4, r8
 800bbbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	615e      	str	r6, [r3, #20]
 800bbc4:	6125      	str	r5, [r4, #16]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	0800d815 	.word	0x0800d815
 800bbd0:	0800d826 	.word	0x0800d826

0800bbd4 <__hi0bits>:
 800bbd4:	0c03      	lsrs	r3, r0, #16
 800bbd6:	041b      	lsls	r3, r3, #16
 800bbd8:	b9d3      	cbnz	r3, 800bc10 <__hi0bits+0x3c>
 800bbda:	0400      	lsls	r0, r0, #16
 800bbdc:	2310      	movs	r3, #16
 800bbde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbe2:	bf04      	itt	eq
 800bbe4:	0200      	lsleq	r0, r0, #8
 800bbe6:	3308      	addeq	r3, #8
 800bbe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbec:	bf04      	itt	eq
 800bbee:	0100      	lsleq	r0, r0, #4
 800bbf0:	3304      	addeq	r3, #4
 800bbf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbf6:	bf04      	itt	eq
 800bbf8:	0080      	lsleq	r0, r0, #2
 800bbfa:	3302      	addeq	r3, #2
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	db05      	blt.n	800bc0c <__hi0bits+0x38>
 800bc00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc04:	f103 0301 	add.w	r3, r3, #1
 800bc08:	bf08      	it	eq
 800bc0a:	2320      	moveq	r3, #32
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	4770      	bx	lr
 800bc10:	2300      	movs	r3, #0
 800bc12:	e7e4      	b.n	800bbde <__hi0bits+0xa>

0800bc14 <__lo0bits>:
 800bc14:	6803      	ldr	r3, [r0, #0]
 800bc16:	f013 0207 	ands.w	r2, r3, #7
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	d00b      	beq.n	800bc36 <__lo0bits+0x22>
 800bc1e:	07da      	lsls	r2, r3, #31
 800bc20:	d423      	bmi.n	800bc6a <__lo0bits+0x56>
 800bc22:	0798      	lsls	r0, r3, #30
 800bc24:	bf49      	itett	mi
 800bc26:	085b      	lsrmi	r3, r3, #1
 800bc28:	089b      	lsrpl	r3, r3, #2
 800bc2a:	2001      	movmi	r0, #1
 800bc2c:	600b      	strmi	r3, [r1, #0]
 800bc2e:	bf5c      	itt	pl
 800bc30:	600b      	strpl	r3, [r1, #0]
 800bc32:	2002      	movpl	r0, #2
 800bc34:	4770      	bx	lr
 800bc36:	b298      	uxth	r0, r3
 800bc38:	b9a8      	cbnz	r0, 800bc66 <__lo0bits+0x52>
 800bc3a:	0c1b      	lsrs	r3, r3, #16
 800bc3c:	2010      	movs	r0, #16
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	b90a      	cbnz	r2, 800bc46 <__lo0bits+0x32>
 800bc42:	3008      	adds	r0, #8
 800bc44:	0a1b      	lsrs	r3, r3, #8
 800bc46:	071a      	lsls	r2, r3, #28
 800bc48:	bf04      	itt	eq
 800bc4a:	091b      	lsreq	r3, r3, #4
 800bc4c:	3004      	addeq	r0, #4
 800bc4e:	079a      	lsls	r2, r3, #30
 800bc50:	bf04      	itt	eq
 800bc52:	089b      	lsreq	r3, r3, #2
 800bc54:	3002      	addeq	r0, #2
 800bc56:	07da      	lsls	r2, r3, #31
 800bc58:	d403      	bmi.n	800bc62 <__lo0bits+0x4e>
 800bc5a:	085b      	lsrs	r3, r3, #1
 800bc5c:	f100 0001 	add.w	r0, r0, #1
 800bc60:	d005      	beq.n	800bc6e <__lo0bits+0x5a>
 800bc62:	600b      	str	r3, [r1, #0]
 800bc64:	4770      	bx	lr
 800bc66:	4610      	mov	r0, r2
 800bc68:	e7e9      	b.n	800bc3e <__lo0bits+0x2a>
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	4770      	bx	lr
 800bc6e:	2020      	movs	r0, #32
 800bc70:	4770      	bx	lr
	...

0800bc74 <__i2b>:
 800bc74:	b510      	push	{r4, lr}
 800bc76:	460c      	mov	r4, r1
 800bc78:	2101      	movs	r1, #1
 800bc7a:	f7ff ff03 	bl	800ba84 <_Balloc>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	b928      	cbnz	r0, 800bc8e <__i2b+0x1a>
 800bc82:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <__i2b+0x24>)
 800bc84:	4805      	ldr	r0, [pc, #20]	; (800bc9c <__i2b+0x28>)
 800bc86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc8a:	f7ff f837 	bl	800acfc <__assert_func>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	6144      	str	r4, [r0, #20]
 800bc92:	6103      	str	r3, [r0, #16]
 800bc94:	bd10      	pop	{r4, pc}
 800bc96:	bf00      	nop
 800bc98:	0800d815 	.word	0x0800d815
 800bc9c:	0800d826 	.word	0x0800d826

0800bca0 <__multiply>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	4691      	mov	r9, r2
 800bca6:	690a      	ldr	r2, [r1, #16]
 800bca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	bfb8      	it	lt
 800bcb0:	460b      	movlt	r3, r1
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	bfbc      	itt	lt
 800bcb6:	464c      	movlt	r4, r9
 800bcb8:	4699      	movlt	r9, r3
 800bcba:	6927      	ldr	r7, [r4, #16]
 800bcbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcc0:	68a3      	ldr	r3, [r4, #8]
 800bcc2:	6861      	ldr	r1, [r4, #4]
 800bcc4:	eb07 060a 	add.w	r6, r7, sl
 800bcc8:	42b3      	cmp	r3, r6
 800bcca:	b085      	sub	sp, #20
 800bccc:	bfb8      	it	lt
 800bcce:	3101      	addlt	r1, #1
 800bcd0:	f7ff fed8 	bl	800ba84 <_Balloc>
 800bcd4:	b930      	cbnz	r0, 800bce4 <__multiply+0x44>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	4b44      	ldr	r3, [pc, #272]	; (800bdec <__multiply+0x14c>)
 800bcda:	4845      	ldr	r0, [pc, #276]	; (800bdf0 <__multiply+0x150>)
 800bcdc:	f240 115d 	movw	r1, #349	; 0x15d
 800bce0:	f7ff f80c 	bl	800acfc <__assert_func>
 800bce4:	f100 0514 	add.w	r5, r0, #20
 800bce8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcec:	462b      	mov	r3, r5
 800bcee:	2200      	movs	r2, #0
 800bcf0:	4543      	cmp	r3, r8
 800bcf2:	d321      	bcc.n	800bd38 <__multiply+0x98>
 800bcf4:	f104 0314 	add.w	r3, r4, #20
 800bcf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcfc:	f109 0314 	add.w	r3, r9, #20
 800bd00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd04:	9202      	str	r2, [sp, #8]
 800bd06:	1b3a      	subs	r2, r7, r4
 800bd08:	3a15      	subs	r2, #21
 800bd0a:	f022 0203 	bic.w	r2, r2, #3
 800bd0e:	3204      	adds	r2, #4
 800bd10:	f104 0115 	add.w	r1, r4, #21
 800bd14:	428f      	cmp	r7, r1
 800bd16:	bf38      	it	cc
 800bd18:	2204      	movcc	r2, #4
 800bd1a:	9201      	str	r2, [sp, #4]
 800bd1c:	9a02      	ldr	r2, [sp, #8]
 800bd1e:	9303      	str	r3, [sp, #12]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d80c      	bhi.n	800bd3e <__multiply+0x9e>
 800bd24:	2e00      	cmp	r6, #0
 800bd26:	dd03      	ble.n	800bd30 <__multiply+0x90>
 800bd28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d05a      	beq.n	800bde6 <__multiply+0x146>
 800bd30:	6106      	str	r6, [r0, #16]
 800bd32:	b005      	add	sp, #20
 800bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd38:	f843 2b04 	str.w	r2, [r3], #4
 800bd3c:	e7d8      	b.n	800bcf0 <__multiply+0x50>
 800bd3e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd42:	f1ba 0f00 	cmp.w	sl, #0
 800bd46:	d024      	beq.n	800bd92 <__multiply+0xf2>
 800bd48:	f104 0e14 	add.w	lr, r4, #20
 800bd4c:	46a9      	mov	r9, r5
 800bd4e:	f04f 0c00 	mov.w	ip, #0
 800bd52:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd56:	f8d9 1000 	ldr.w	r1, [r9]
 800bd5a:	fa1f fb82 	uxth.w	fp, r2
 800bd5e:	b289      	uxth	r1, r1
 800bd60:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd68:	f8d9 2000 	ldr.w	r2, [r9]
 800bd6c:	4461      	add	r1, ip
 800bd6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd72:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd7a:	b289      	uxth	r1, r1
 800bd7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd80:	4577      	cmp	r7, lr
 800bd82:	f849 1b04 	str.w	r1, [r9], #4
 800bd86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd8a:	d8e2      	bhi.n	800bd52 <__multiply+0xb2>
 800bd8c:	9a01      	ldr	r2, [sp, #4]
 800bd8e:	f845 c002 	str.w	ip, [r5, r2]
 800bd92:	9a03      	ldr	r2, [sp, #12]
 800bd94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	f1b9 0f00 	cmp.w	r9, #0
 800bd9e:	d020      	beq.n	800bde2 <__multiply+0x142>
 800bda0:	6829      	ldr	r1, [r5, #0]
 800bda2:	f104 0c14 	add.w	ip, r4, #20
 800bda6:	46ae      	mov	lr, r5
 800bda8:	f04f 0a00 	mov.w	sl, #0
 800bdac:	f8bc b000 	ldrh.w	fp, [ip]
 800bdb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdb4:	fb09 220b 	mla	r2, r9, fp, r2
 800bdb8:	4492      	add	sl, r2
 800bdba:	b289      	uxth	r1, r1
 800bdbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bdc0:	f84e 1b04 	str.w	r1, [lr], #4
 800bdc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdc8:	f8be 1000 	ldrh.w	r1, [lr]
 800bdcc:	0c12      	lsrs	r2, r2, #16
 800bdce:	fb09 1102 	mla	r1, r9, r2, r1
 800bdd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdd6:	4567      	cmp	r7, ip
 800bdd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bddc:	d8e6      	bhi.n	800bdac <__multiply+0x10c>
 800bdde:	9a01      	ldr	r2, [sp, #4]
 800bde0:	50a9      	str	r1, [r5, r2]
 800bde2:	3504      	adds	r5, #4
 800bde4:	e79a      	b.n	800bd1c <__multiply+0x7c>
 800bde6:	3e01      	subs	r6, #1
 800bde8:	e79c      	b.n	800bd24 <__multiply+0x84>
 800bdea:	bf00      	nop
 800bdec:	0800d815 	.word	0x0800d815
 800bdf0:	0800d826 	.word	0x0800d826

0800bdf4 <__pow5mult>:
 800bdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf8:	4615      	mov	r5, r2
 800bdfa:	f012 0203 	ands.w	r2, r2, #3
 800bdfe:	4606      	mov	r6, r0
 800be00:	460f      	mov	r7, r1
 800be02:	d007      	beq.n	800be14 <__pow5mult+0x20>
 800be04:	4c25      	ldr	r4, [pc, #148]	; (800be9c <__pow5mult+0xa8>)
 800be06:	3a01      	subs	r2, #1
 800be08:	2300      	movs	r3, #0
 800be0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be0e:	f7ff fe9b 	bl	800bb48 <__multadd>
 800be12:	4607      	mov	r7, r0
 800be14:	10ad      	asrs	r5, r5, #2
 800be16:	d03d      	beq.n	800be94 <__pow5mult+0xa0>
 800be18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be1a:	b97c      	cbnz	r4, 800be3c <__pow5mult+0x48>
 800be1c:	2010      	movs	r0, #16
 800be1e:	f7ff fe1b 	bl	800ba58 <malloc>
 800be22:	4602      	mov	r2, r0
 800be24:	6270      	str	r0, [r6, #36]	; 0x24
 800be26:	b928      	cbnz	r0, 800be34 <__pow5mult+0x40>
 800be28:	4b1d      	ldr	r3, [pc, #116]	; (800bea0 <__pow5mult+0xac>)
 800be2a:	481e      	ldr	r0, [pc, #120]	; (800bea4 <__pow5mult+0xb0>)
 800be2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be30:	f7fe ff64 	bl	800acfc <__assert_func>
 800be34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be38:	6004      	str	r4, [r0, #0]
 800be3a:	60c4      	str	r4, [r0, #12]
 800be3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be44:	b94c      	cbnz	r4, 800be5a <__pow5mult+0x66>
 800be46:	f240 2171 	movw	r1, #625	; 0x271
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7ff ff12 	bl	800bc74 <__i2b>
 800be50:	2300      	movs	r3, #0
 800be52:	f8c8 0008 	str.w	r0, [r8, #8]
 800be56:	4604      	mov	r4, r0
 800be58:	6003      	str	r3, [r0, #0]
 800be5a:	f04f 0900 	mov.w	r9, #0
 800be5e:	07eb      	lsls	r3, r5, #31
 800be60:	d50a      	bpl.n	800be78 <__pow5mult+0x84>
 800be62:	4639      	mov	r1, r7
 800be64:	4622      	mov	r2, r4
 800be66:	4630      	mov	r0, r6
 800be68:	f7ff ff1a 	bl	800bca0 <__multiply>
 800be6c:	4639      	mov	r1, r7
 800be6e:	4680      	mov	r8, r0
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff fe47 	bl	800bb04 <_Bfree>
 800be76:	4647      	mov	r7, r8
 800be78:	106d      	asrs	r5, r5, #1
 800be7a:	d00b      	beq.n	800be94 <__pow5mult+0xa0>
 800be7c:	6820      	ldr	r0, [r4, #0]
 800be7e:	b938      	cbnz	r0, 800be90 <__pow5mult+0x9c>
 800be80:	4622      	mov	r2, r4
 800be82:	4621      	mov	r1, r4
 800be84:	4630      	mov	r0, r6
 800be86:	f7ff ff0b 	bl	800bca0 <__multiply>
 800be8a:	6020      	str	r0, [r4, #0]
 800be8c:	f8c0 9000 	str.w	r9, [r0]
 800be90:	4604      	mov	r4, r0
 800be92:	e7e4      	b.n	800be5e <__pow5mult+0x6a>
 800be94:	4638      	mov	r0, r7
 800be96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9a:	bf00      	nop
 800be9c:	0800d978 	.word	0x0800d978
 800bea0:	0800d5fc 	.word	0x0800d5fc
 800bea4:	0800d826 	.word	0x0800d826

0800bea8 <__lshift>:
 800bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	460c      	mov	r4, r1
 800beae:	6849      	ldr	r1, [r1, #4]
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beb6:	68a3      	ldr	r3, [r4, #8]
 800beb8:	4607      	mov	r7, r0
 800beba:	4691      	mov	r9, r2
 800bebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bec0:	f108 0601 	add.w	r6, r8, #1
 800bec4:	42b3      	cmp	r3, r6
 800bec6:	db0b      	blt.n	800bee0 <__lshift+0x38>
 800bec8:	4638      	mov	r0, r7
 800beca:	f7ff fddb 	bl	800ba84 <_Balloc>
 800bece:	4605      	mov	r5, r0
 800bed0:	b948      	cbnz	r0, 800bee6 <__lshift+0x3e>
 800bed2:	4602      	mov	r2, r0
 800bed4:	4b2a      	ldr	r3, [pc, #168]	; (800bf80 <__lshift+0xd8>)
 800bed6:	482b      	ldr	r0, [pc, #172]	; (800bf84 <__lshift+0xdc>)
 800bed8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bedc:	f7fe ff0e 	bl	800acfc <__assert_func>
 800bee0:	3101      	adds	r1, #1
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	e7ee      	b.n	800bec4 <__lshift+0x1c>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f100 0114 	add.w	r1, r0, #20
 800beec:	f100 0210 	add.w	r2, r0, #16
 800bef0:	4618      	mov	r0, r3
 800bef2:	4553      	cmp	r3, sl
 800bef4:	db37      	blt.n	800bf66 <__lshift+0xbe>
 800bef6:	6920      	ldr	r0, [r4, #16]
 800bef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800befc:	f104 0314 	add.w	r3, r4, #20
 800bf00:	f019 091f 	ands.w	r9, r9, #31
 800bf04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf0c:	d02f      	beq.n	800bf6e <__lshift+0xc6>
 800bf0e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf12:	468a      	mov	sl, r1
 800bf14:	f04f 0c00 	mov.w	ip, #0
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	fa02 f209 	lsl.w	r2, r2, r9
 800bf1e:	ea42 020c 	orr.w	r2, r2, ip
 800bf22:	f84a 2b04 	str.w	r2, [sl], #4
 800bf26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf2a:	4298      	cmp	r0, r3
 800bf2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf30:	d8f2      	bhi.n	800bf18 <__lshift+0x70>
 800bf32:	1b03      	subs	r3, r0, r4
 800bf34:	3b15      	subs	r3, #21
 800bf36:	f023 0303 	bic.w	r3, r3, #3
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	f104 0215 	add.w	r2, r4, #21
 800bf40:	4290      	cmp	r0, r2
 800bf42:	bf38      	it	cc
 800bf44:	2304      	movcc	r3, #4
 800bf46:	f841 c003 	str.w	ip, [r1, r3]
 800bf4a:	f1bc 0f00 	cmp.w	ip, #0
 800bf4e:	d001      	beq.n	800bf54 <__lshift+0xac>
 800bf50:	f108 0602 	add.w	r6, r8, #2
 800bf54:	3e01      	subs	r6, #1
 800bf56:	4638      	mov	r0, r7
 800bf58:	612e      	str	r6, [r5, #16]
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	f7ff fdd2 	bl	800bb04 <_Bfree>
 800bf60:	4628      	mov	r0, r5
 800bf62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf66:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	e7c1      	b.n	800bef2 <__lshift+0x4a>
 800bf6e:	3904      	subs	r1, #4
 800bf70:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf74:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf78:	4298      	cmp	r0, r3
 800bf7a:	d8f9      	bhi.n	800bf70 <__lshift+0xc8>
 800bf7c:	e7ea      	b.n	800bf54 <__lshift+0xac>
 800bf7e:	bf00      	nop
 800bf80:	0800d815 	.word	0x0800d815
 800bf84:	0800d826 	.word	0x0800d826

0800bf88 <__mcmp>:
 800bf88:	b530      	push	{r4, r5, lr}
 800bf8a:	6902      	ldr	r2, [r0, #16]
 800bf8c:	690c      	ldr	r4, [r1, #16]
 800bf8e:	1b12      	subs	r2, r2, r4
 800bf90:	d10e      	bne.n	800bfb0 <__mcmp+0x28>
 800bf92:	f100 0314 	add.w	r3, r0, #20
 800bf96:	3114      	adds	r1, #20
 800bf98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfa8:	42a5      	cmp	r5, r4
 800bfaa:	d003      	beq.n	800bfb4 <__mcmp+0x2c>
 800bfac:	d305      	bcc.n	800bfba <__mcmp+0x32>
 800bfae:	2201      	movs	r2, #1
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	bd30      	pop	{r4, r5, pc}
 800bfb4:	4283      	cmp	r3, r0
 800bfb6:	d3f3      	bcc.n	800bfa0 <__mcmp+0x18>
 800bfb8:	e7fa      	b.n	800bfb0 <__mcmp+0x28>
 800bfba:	f04f 32ff 	mov.w	r2, #4294967295
 800bfbe:	e7f7      	b.n	800bfb0 <__mcmp+0x28>

0800bfc0 <__mdiff>:
 800bfc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	4611      	mov	r1, r2
 800bfca:	4620      	mov	r0, r4
 800bfcc:	4690      	mov	r8, r2
 800bfce:	f7ff ffdb 	bl	800bf88 <__mcmp>
 800bfd2:	1e05      	subs	r5, r0, #0
 800bfd4:	d110      	bne.n	800bff8 <__mdiff+0x38>
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7ff fd53 	bl	800ba84 <_Balloc>
 800bfde:	b930      	cbnz	r0, 800bfee <__mdiff+0x2e>
 800bfe0:	4b3a      	ldr	r3, [pc, #232]	; (800c0cc <__mdiff+0x10c>)
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	f240 2132 	movw	r1, #562	; 0x232
 800bfe8:	4839      	ldr	r0, [pc, #228]	; (800c0d0 <__mdiff+0x110>)
 800bfea:	f7fe fe87 	bl	800acfc <__assert_func>
 800bfee:	2301      	movs	r3, #1
 800bff0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff8:	bfa4      	itt	ge
 800bffa:	4643      	movge	r3, r8
 800bffc:	46a0      	movge	r8, r4
 800bffe:	4630      	mov	r0, r6
 800c000:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c004:	bfa6      	itte	ge
 800c006:	461c      	movge	r4, r3
 800c008:	2500      	movge	r5, #0
 800c00a:	2501      	movlt	r5, #1
 800c00c:	f7ff fd3a 	bl	800ba84 <_Balloc>
 800c010:	b920      	cbnz	r0, 800c01c <__mdiff+0x5c>
 800c012:	4b2e      	ldr	r3, [pc, #184]	; (800c0cc <__mdiff+0x10c>)
 800c014:	4602      	mov	r2, r0
 800c016:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c01a:	e7e5      	b.n	800bfe8 <__mdiff+0x28>
 800c01c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c020:	6926      	ldr	r6, [r4, #16]
 800c022:	60c5      	str	r5, [r0, #12]
 800c024:	f104 0914 	add.w	r9, r4, #20
 800c028:	f108 0514 	add.w	r5, r8, #20
 800c02c:	f100 0e14 	add.w	lr, r0, #20
 800c030:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c034:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c038:	f108 0210 	add.w	r2, r8, #16
 800c03c:	46f2      	mov	sl, lr
 800c03e:	2100      	movs	r1, #0
 800c040:	f859 3b04 	ldr.w	r3, [r9], #4
 800c044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c048:	fa1f f883 	uxth.w	r8, r3
 800c04c:	fa11 f18b 	uxtah	r1, r1, fp
 800c050:	0c1b      	lsrs	r3, r3, #16
 800c052:	eba1 0808 	sub.w	r8, r1, r8
 800c056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c05a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c05e:	fa1f f888 	uxth.w	r8, r8
 800c062:	1419      	asrs	r1, r3, #16
 800c064:	454e      	cmp	r6, r9
 800c066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c06a:	f84a 3b04 	str.w	r3, [sl], #4
 800c06e:	d8e7      	bhi.n	800c040 <__mdiff+0x80>
 800c070:	1b33      	subs	r3, r6, r4
 800c072:	3b15      	subs	r3, #21
 800c074:	f023 0303 	bic.w	r3, r3, #3
 800c078:	3304      	adds	r3, #4
 800c07a:	3415      	adds	r4, #21
 800c07c:	42a6      	cmp	r6, r4
 800c07e:	bf38      	it	cc
 800c080:	2304      	movcc	r3, #4
 800c082:	441d      	add	r5, r3
 800c084:	4473      	add	r3, lr
 800c086:	469e      	mov	lr, r3
 800c088:	462e      	mov	r6, r5
 800c08a:	4566      	cmp	r6, ip
 800c08c:	d30e      	bcc.n	800c0ac <__mdiff+0xec>
 800c08e:	f10c 0203 	add.w	r2, ip, #3
 800c092:	1b52      	subs	r2, r2, r5
 800c094:	f022 0203 	bic.w	r2, r2, #3
 800c098:	3d03      	subs	r5, #3
 800c09a:	45ac      	cmp	ip, r5
 800c09c:	bf38      	it	cc
 800c09e:	2200      	movcc	r2, #0
 800c0a0:	441a      	add	r2, r3
 800c0a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0a6:	b17b      	cbz	r3, 800c0c8 <__mdiff+0x108>
 800c0a8:	6107      	str	r7, [r0, #16]
 800c0aa:	e7a3      	b.n	800bff4 <__mdiff+0x34>
 800c0ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0b0:	fa11 f288 	uxtah	r2, r1, r8
 800c0b4:	1414      	asrs	r4, r2, #16
 800c0b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0ba:	b292      	uxth	r2, r2
 800c0bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0c0:	f84e 2b04 	str.w	r2, [lr], #4
 800c0c4:	1421      	asrs	r1, r4, #16
 800c0c6:	e7e0      	b.n	800c08a <__mdiff+0xca>
 800c0c8:	3f01      	subs	r7, #1
 800c0ca:	e7ea      	b.n	800c0a2 <__mdiff+0xe2>
 800c0cc:	0800d815 	.word	0x0800d815
 800c0d0:	0800d826 	.word	0x0800d826

0800c0d4 <__d2b>:
 800c0d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0d8:	4689      	mov	r9, r1
 800c0da:	2101      	movs	r1, #1
 800c0dc:	ec57 6b10 	vmov	r6, r7, d0
 800c0e0:	4690      	mov	r8, r2
 800c0e2:	f7ff fccf 	bl	800ba84 <_Balloc>
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	b930      	cbnz	r0, 800c0f8 <__d2b+0x24>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	4b25      	ldr	r3, [pc, #148]	; (800c184 <__d2b+0xb0>)
 800c0ee:	4826      	ldr	r0, [pc, #152]	; (800c188 <__d2b+0xb4>)
 800c0f0:	f240 310a 	movw	r1, #778	; 0x30a
 800c0f4:	f7fe fe02 	bl	800acfc <__assert_func>
 800c0f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c100:	bb35      	cbnz	r5, 800c150 <__d2b+0x7c>
 800c102:	2e00      	cmp	r6, #0
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	d028      	beq.n	800c15a <__d2b+0x86>
 800c108:	4668      	mov	r0, sp
 800c10a:	9600      	str	r6, [sp, #0]
 800c10c:	f7ff fd82 	bl	800bc14 <__lo0bits>
 800c110:	9900      	ldr	r1, [sp, #0]
 800c112:	b300      	cbz	r0, 800c156 <__d2b+0x82>
 800c114:	9a01      	ldr	r2, [sp, #4]
 800c116:	f1c0 0320 	rsb	r3, r0, #32
 800c11a:	fa02 f303 	lsl.w	r3, r2, r3
 800c11e:	430b      	orrs	r3, r1
 800c120:	40c2      	lsrs	r2, r0
 800c122:	6163      	str	r3, [r4, #20]
 800c124:	9201      	str	r2, [sp, #4]
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	61a3      	str	r3, [r4, #24]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	bf14      	ite	ne
 800c12e:	2202      	movne	r2, #2
 800c130:	2201      	moveq	r2, #1
 800c132:	6122      	str	r2, [r4, #16]
 800c134:	b1d5      	cbz	r5, 800c16c <__d2b+0x98>
 800c136:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c13a:	4405      	add	r5, r0
 800c13c:	f8c9 5000 	str.w	r5, [r9]
 800c140:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c144:	f8c8 0000 	str.w	r0, [r8]
 800c148:	4620      	mov	r0, r4
 800c14a:	b003      	add	sp, #12
 800c14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c154:	e7d5      	b.n	800c102 <__d2b+0x2e>
 800c156:	6161      	str	r1, [r4, #20]
 800c158:	e7e5      	b.n	800c126 <__d2b+0x52>
 800c15a:	a801      	add	r0, sp, #4
 800c15c:	f7ff fd5a 	bl	800bc14 <__lo0bits>
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	6163      	str	r3, [r4, #20]
 800c164:	2201      	movs	r2, #1
 800c166:	6122      	str	r2, [r4, #16]
 800c168:	3020      	adds	r0, #32
 800c16a:	e7e3      	b.n	800c134 <__d2b+0x60>
 800c16c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c174:	f8c9 0000 	str.w	r0, [r9]
 800c178:	6918      	ldr	r0, [r3, #16]
 800c17a:	f7ff fd2b 	bl	800bbd4 <__hi0bits>
 800c17e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c182:	e7df      	b.n	800c144 <__d2b+0x70>
 800c184:	0800d815 	.word	0x0800d815
 800c188:	0800d826 	.word	0x0800d826

0800c18c <_calloc_r>:
 800c18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c18e:	fba1 2402 	umull	r2, r4, r1, r2
 800c192:	b94c      	cbnz	r4, 800c1a8 <_calloc_r+0x1c>
 800c194:	4611      	mov	r1, r2
 800c196:	9201      	str	r2, [sp, #4]
 800c198:	f000 f87a 	bl	800c290 <_malloc_r>
 800c19c:	9a01      	ldr	r2, [sp, #4]
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b930      	cbnz	r0, 800c1b0 <_calloc_r+0x24>
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	b003      	add	sp, #12
 800c1a6:	bd30      	pop	{r4, r5, pc}
 800c1a8:	220c      	movs	r2, #12
 800c1aa:	6002      	str	r2, [r0, #0]
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	e7f8      	b.n	800c1a2 <_calloc_r+0x16>
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	f7fd fff5 	bl	800a1a0 <memset>
 800c1b6:	e7f4      	b.n	800c1a2 <_calloc_r+0x16>

0800c1b8 <_free_r>:
 800c1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1ba:	2900      	cmp	r1, #0
 800c1bc:	d044      	beq.n	800c248 <_free_r+0x90>
 800c1be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c2:	9001      	str	r0, [sp, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c1ca:	bfb8      	it	lt
 800c1cc:	18e4      	addlt	r4, r4, r3
 800c1ce:	f000 fead 	bl	800cf2c <__malloc_lock>
 800c1d2:	4a1e      	ldr	r2, [pc, #120]	; (800c24c <_free_r+0x94>)
 800c1d4:	9801      	ldr	r0, [sp, #4]
 800c1d6:	6813      	ldr	r3, [r2, #0]
 800c1d8:	b933      	cbnz	r3, 800c1e8 <_free_r+0x30>
 800c1da:	6063      	str	r3, [r4, #4]
 800c1dc:	6014      	str	r4, [r2, #0]
 800c1de:	b003      	add	sp, #12
 800c1e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1e4:	f000 bea8 	b.w	800cf38 <__malloc_unlock>
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	d908      	bls.n	800c1fe <_free_r+0x46>
 800c1ec:	6825      	ldr	r5, [r4, #0]
 800c1ee:	1961      	adds	r1, r4, r5
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	bf01      	itttt	eq
 800c1f4:	6819      	ldreq	r1, [r3, #0]
 800c1f6:	685b      	ldreq	r3, [r3, #4]
 800c1f8:	1949      	addeq	r1, r1, r5
 800c1fa:	6021      	streq	r1, [r4, #0]
 800c1fc:	e7ed      	b.n	800c1da <_free_r+0x22>
 800c1fe:	461a      	mov	r2, r3
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	b10b      	cbz	r3, 800c208 <_free_r+0x50>
 800c204:	42a3      	cmp	r3, r4
 800c206:	d9fa      	bls.n	800c1fe <_free_r+0x46>
 800c208:	6811      	ldr	r1, [r2, #0]
 800c20a:	1855      	adds	r5, r2, r1
 800c20c:	42a5      	cmp	r5, r4
 800c20e:	d10b      	bne.n	800c228 <_free_r+0x70>
 800c210:	6824      	ldr	r4, [r4, #0]
 800c212:	4421      	add	r1, r4
 800c214:	1854      	adds	r4, r2, r1
 800c216:	42a3      	cmp	r3, r4
 800c218:	6011      	str	r1, [r2, #0]
 800c21a:	d1e0      	bne.n	800c1de <_free_r+0x26>
 800c21c:	681c      	ldr	r4, [r3, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	6053      	str	r3, [r2, #4]
 800c222:	4421      	add	r1, r4
 800c224:	6011      	str	r1, [r2, #0]
 800c226:	e7da      	b.n	800c1de <_free_r+0x26>
 800c228:	d902      	bls.n	800c230 <_free_r+0x78>
 800c22a:	230c      	movs	r3, #12
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	e7d6      	b.n	800c1de <_free_r+0x26>
 800c230:	6825      	ldr	r5, [r4, #0]
 800c232:	1961      	adds	r1, r4, r5
 800c234:	428b      	cmp	r3, r1
 800c236:	bf04      	itt	eq
 800c238:	6819      	ldreq	r1, [r3, #0]
 800c23a:	685b      	ldreq	r3, [r3, #4]
 800c23c:	6063      	str	r3, [r4, #4]
 800c23e:	bf04      	itt	eq
 800c240:	1949      	addeq	r1, r1, r5
 800c242:	6021      	streq	r1, [r4, #0]
 800c244:	6054      	str	r4, [r2, #4]
 800c246:	e7ca      	b.n	800c1de <_free_r+0x26>
 800c248:	b003      	add	sp, #12
 800c24a:	bd30      	pop	{r4, r5, pc}
 800c24c:	200005e0 	.word	0x200005e0

0800c250 <sbrk_aligned>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	4e0e      	ldr	r6, [pc, #56]	; (800c28c <sbrk_aligned+0x3c>)
 800c254:	460c      	mov	r4, r1
 800c256:	6831      	ldr	r1, [r6, #0]
 800c258:	4605      	mov	r5, r0
 800c25a:	b911      	cbnz	r1, 800c262 <sbrk_aligned+0x12>
 800c25c:	f000 fb42 	bl	800c8e4 <_sbrk_r>
 800c260:	6030      	str	r0, [r6, #0]
 800c262:	4621      	mov	r1, r4
 800c264:	4628      	mov	r0, r5
 800c266:	f000 fb3d 	bl	800c8e4 <_sbrk_r>
 800c26a:	1c43      	adds	r3, r0, #1
 800c26c:	d00a      	beq.n	800c284 <sbrk_aligned+0x34>
 800c26e:	1cc4      	adds	r4, r0, #3
 800c270:	f024 0403 	bic.w	r4, r4, #3
 800c274:	42a0      	cmp	r0, r4
 800c276:	d007      	beq.n	800c288 <sbrk_aligned+0x38>
 800c278:	1a21      	subs	r1, r4, r0
 800c27a:	4628      	mov	r0, r5
 800c27c:	f000 fb32 	bl	800c8e4 <_sbrk_r>
 800c280:	3001      	adds	r0, #1
 800c282:	d101      	bne.n	800c288 <sbrk_aligned+0x38>
 800c284:	f04f 34ff 	mov.w	r4, #4294967295
 800c288:	4620      	mov	r0, r4
 800c28a:	bd70      	pop	{r4, r5, r6, pc}
 800c28c:	200005e4 	.word	0x200005e4

0800c290 <_malloc_r>:
 800c290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c294:	1ccd      	adds	r5, r1, #3
 800c296:	f025 0503 	bic.w	r5, r5, #3
 800c29a:	3508      	adds	r5, #8
 800c29c:	2d0c      	cmp	r5, #12
 800c29e:	bf38      	it	cc
 800c2a0:	250c      	movcc	r5, #12
 800c2a2:	2d00      	cmp	r5, #0
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	db01      	blt.n	800c2ac <_malloc_r+0x1c>
 800c2a8:	42a9      	cmp	r1, r5
 800c2aa:	d905      	bls.n	800c2b8 <_malloc_r+0x28>
 800c2ac:	230c      	movs	r3, #12
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	2600      	movs	r6, #0
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b8:	4e2e      	ldr	r6, [pc, #184]	; (800c374 <_malloc_r+0xe4>)
 800c2ba:	f000 fe37 	bl	800cf2c <__malloc_lock>
 800c2be:	6833      	ldr	r3, [r6, #0]
 800c2c0:	461c      	mov	r4, r3
 800c2c2:	bb34      	cbnz	r4, 800c312 <_malloc_r+0x82>
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f7ff ffc2 	bl	800c250 <sbrk_aligned>
 800c2cc:	1c43      	adds	r3, r0, #1
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	d14d      	bne.n	800c36e <_malloc_r+0xde>
 800c2d2:	6834      	ldr	r4, [r6, #0]
 800c2d4:	4626      	mov	r6, r4
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d140      	bne.n	800c35c <_malloc_r+0xcc>
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4638      	mov	r0, r7
 800c2e0:	eb04 0803 	add.w	r8, r4, r3
 800c2e4:	f000 fafe 	bl	800c8e4 <_sbrk_r>
 800c2e8:	4580      	cmp	r8, r0
 800c2ea:	d13a      	bne.n	800c362 <_malloc_r+0xd2>
 800c2ec:	6821      	ldr	r1, [r4, #0]
 800c2ee:	3503      	adds	r5, #3
 800c2f0:	1a6d      	subs	r5, r5, r1
 800c2f2:	f025 0503 	bic.w	r5, r5, #3
 800c2f6:	3508      	adds	r5, #8
 800c2f8:	2d0c      	cmp	r5, #12
 800c2fa:	bf38      	it	cc
 800c2fc:	250c      	movcc	r5, #12
 800c2fe:	4629      	mov	r1, r5
 800c300:	4638      	mov	r0, r7
 800c302:	f7ff ffa5 	bl	800c250 <sbrk_aligned>
 800c306:	3001      	adds	r0, #1
 800c308:	d02b      	beq.n	800c362 <_malloc_r+0xd2>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	442b      	add	r3, r5
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	e00e      	b.n	800c330 <_malloc_r+0xa0>
 800c312:	6822      	ldr	r2, [r4, #0]
 800c314:	1b52      	subs	r2, r2, r5
 800c316:	d41e      	bmi.n	800c356 <_malloc_r+0xc6>
 800c318:	2a0b      	cmp	r2, #11
 800c31a:	d916      	bls.n	800c34a <_malloc_r+0xba>
 800c31c:	1961      	adds	r1, r4, r5
 800c31e:	42a3      	cmp	r3, r4
 800c320:	6025      	str	r5, [r4, #0]
 800c322:	bf18      	it	ne
 800c324:	6059      	strne	r1, [r3, #4]
 800c326:	6863      	ldr	r3, [r4, #4]
 800c328:	bf08      	it	eq
 800c32a:	6031      	streq	r1, [r6, #0]
 800c32c:	5162      	str	r2, [r4, r5]
 800c32e:	604b      	str	r3, [r1, #4]
 800c330:	4638      	mov	r0, r7
 800c332:	f104 060b 	add.w	r6, r4, #11
 800c336:	f000 fdff 	bl	800cf38 <__malloc_unlock>
 800c33a:	f026 0607 	bic.w	r6, r6, #7
 800c33e:	1d23      	adds	r3, r4, #4
 800c340:	1af2      	subs	r2, r6, r3
 800c342:	d0b6      	beq.n	800c2b2 <_malloc_r+0x22>
 800c344:	1b9b      	subs	r3, r3, r6
 800c346:	50a3      	str	r3, [r4, r2]
 800c348:	e7b3      	b.n	800c2b2 <_malloc_r+0x22>
 800c34a:	6862      	ldr	r2, [r4, #4]
 800c34c:	42a3      	cmp	r3, r4
 800c34e:	bf0c      	ite	eq
 800c350:	6032      	streq	r2, [r6, #0]
 800c352:	605a      	strne	r2, [r3, #4]
 800c354:	e7ec      	b.n	800c330 <_malloc_r+0xa0>
 800c356:	4623      	mov	r3, r4
 800c358:	6864      	ldr	r4, [r4, #4]
 800c35a:	e7b2      	b.n	800c2c2 <_malloc_r+0x32>
 800c35c:	4634      	mov	r4, r6
 800c35e:	6876      	ldr	r6, [r6, #4]
 800c360:	e7b9      	b.n	800c2d6 <_malloc_r+0x46>
 800c362:	230c      	movs	r3, #12
 800c364:	603b      	str	r3, [r7, #0]
 800c366:	4638      	mov	r0, r7
 800c368:	f000 fde6 	bl	800cf38 <__malloc_unlock>
 800c36c:	e7a1      	b.n	800c2b2 <_malloc_r+0x22>
 800c36e:	6025      	str	r5, [r4, #0]
 800c370:	e7de      	b.n	800c330 <_malloc_r+0xa0>
 800c372:	bf00      	nop
 800c374:	200005e0 	.word	0x200005e0

0800c378 <__ssputs_r>:
 800c378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c37c:	688e      	ldr	r6, [r1, #8]
 800c37e:	429e      	cmp	r6, r3
 800c380:	4682      	mov	sl, r0
 800c382:	460c      	mov	r4, r1
 800c384:	4690      	mov	r8, r2
 800c386:	461f      	mov	r7, r3
 800c388:	d838      	bhi.n	800c3fc <__ssputs_r+0x84>
 800c38a:	898a      	ldrh	r2, [r1, #12]
 800c38c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c390:	d032      	beq.n	800c3f8 <__ssputs_r+0x80>
 800c392:	6825      	ldr	r5, [r4, #0]
 800c394:	6909      	ldr	r1, [r1, #16]
 800c396:	eba5 0901 	sub.w	r9, r5, r1
 800c39a:	6965      	ldr	r5, [r4, #20]
 800c39c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	444b      	add	r3, r9
 800c3a8:	106d      	asrs	r5, r5, #1
 800c3aa:	429d      	cmp	r5, r3
 800c3ac:	bf38      	it	cc
 800c3ae:	461d      	movcc	r5, r3
 800c3b0:	0553      	lsls	r3, r2, #21
 800c3b2:	d531      	bpl.n	800c418 <__ssputs_r+0xa0>
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	f7ff ff6b 	bl	800c290 <_malloc_r>
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	b950      	cbnz	r0, 800c3d4 <__ssputs_r+0x5c>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	f8ca 3000 	str.w	r3, [sl]
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d4:	6921      	ldr	r1, [r4, #16]
 800c3d6:	464a      	mov	r2, r9
 800c3d8:	f7ff fb46 	bl	800ba68 <memcpy>
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	6126      	str	r6, [r4, #16]
 800c3ea:	6165      	str	r5, [r4, #20]
 800c3ec:	444e      	add	r6, r9
 800c3ee:	eba5 0509 	sub.w	r5, r5, r9
 800c3f2:	6026      	str	r6, [r4, #0]
 800c3f4:	60a5      	str	r5, [r4, #8]
 800c3f6:	463e      	mov	r6, r7
 800c3f8:	42be      	cmp	r6, r7
 800c3fa:	d900      	bls.n	800c3fe <__ssputs_r+0x86>
 800c3fc:	463e      	mov	r6, r7
 800c3fe:	6820      	ldr	r0, [r4, #0]
 800c400:	4632      	mov	r2, r6
 800c402:	4641      	mov	r1, r8
 800c404:	f000 fd78 	bl	800cef8 <memmove>
 800c408:	68a3      	ldr	r3, [r4, #8]
 800c40a:	1b9b      	subs	r3, r3, r6
 800c40c:	60a3      	str	r3, [r4, #8]
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	4433      	add	r3, r6
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	2000      	movs	r0, #0
 800c416:	e7db      	b.n	800c3d0 <__ssputs_r+0x58>
 800c418:	462a      	mov	r2, r5
 800c41a:	f000 fd93 	bl	800cf44 <_realloc_r>
 800c41e:	4606      	mov	r6, r0
 800c420:	2800      	cmp	r0, #0
 800c422:	d1e1      	bne.n	800c3e8 <__ssputs_r+0x70>
 800c424:	6921      	ldr	r1, [r4, #16]
 800c426:	4650      	mov	r0, sl
 800c428:	f7ff fec6 	bl	800c1b8 <_free_r>
 800c42c:	e7c7      	b.n	800c3be <__ssputs_r+0x46>
	...

0800c430 <_svfiprintf_r>:
 800c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	4698      	mov	r8, r3
 800c436:	898b      	ldrh	r3, [r1, #12]
 800c438:	061b      	lsls	r3, r3, #24
 800c43a:	b09d      	sub	sp, #116	; 0x74
 800c43c:	4607      	mov	r7, r0
 800c43e:	460d      	mov	r5, r1
 800c440:	4614      	mov	r4, r2
 800c442:	d50e      	bpl.n	800c462 <_svfiprintf_r+0x32>
 800c444:	690b      	ldr	r3, [r1, #16]
 800c446:	b963      	cbnz	r3, 800c462 <_svfiprintf_r+0x32>
 800c448:	2140      	movs	r1, #64	; 0x40
 800c44a:	f7ff ff21 	bl	800c290 <_malloc_r>
 800c44e:	6028      	str	r0, [r5, #0]
 800c450:	6128      	str	r0, [r5, #16]
 800c452:	b920      	cbnz	r0, 800c45e <_svfiprintf_r+0x2e>
 800c454:	230c      	movs	r3, #12
 800c456:	603b      	str	r3, [r7, #0]
 800c458:	f04f 30ff 	mov.w	r0, #4294967295
 800c45c:	e0d1      	b.n	800c602 <_svfiprintf_r+0x1d2>
 800c45e:	2340      	movs	r3, #64	; 0x40
 800c460:	616b      	str	r3, [r5, #20]
 800c462:	2300      	movs	r3, #0
 800c464:	9309      	str	r3, [sp, #36]	; 0x24
 800c466:	2320      	movs	r3, #32
 800c468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c46c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c470:	2330      	movs	r3, #48	; 0x30
 800c472:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c61c <_svfiprintf_r+0x1ec>
 800c476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c47a:	f04f 0901 	mov.w	r9, #1
 800c47e:	4623      	mov	r3, r4
 800c480:	469a      	mov	sl, r3
 800c482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c486:	b10a      	cbz	r2, 800c48c <_svfiprintf_r+0x5c>
 800c488:	2a25      	cmp	r2, #37	; 0x25
 800c48a:	d1f9      	bne.n	800c480 <_svfiprintf_r+0x50>
 800c48c:	ebba 0b04 	subs.w	fp, sl, r4
 800c490:	d00b      	beq.n	800c4aa <_svfiprintf_r+0x7a>
 800c492:	465b      	mov	r3, fp
 800c494:	4622      	mov	r2, r4
 800c496:	4629      	mov	r1, r5
 800c498:	4638      	mov	r0, r7
 800c49a:	f7ff ff6d 	bl	800c378 <__ssputs_r>
 800c49e:	3001      	adds	r0, #1
 800c4a0:	f000 80aa 	beq.w	800c5f8 <_svfiprintf_r+0x1c8>
 800c4a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4a6:	445a      	add	r2, fp
 800c4a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f000 80a2 	beq.w	800c5f8 <_svfiprintf_r+0x1c8>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4be:	f10a 0a01 	add.w	sl, sl, #1
 800c4c2:	9304      	str	r3, [sp, #16]
 800c4c4:	9307      	str	r3, [sp, #28]
 800c4c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c4cc:	4654      	mov	r4, sl
 800c4ce:	2205      	movs	r2, #5
 800c4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d4:	4851      	ldr	r0, [pc, #324]	; (800c61c <_svfiprintf_r+0x1ec>)
 800c4d6:	f7f3 febb 	bl	8000250 <memchr>
 800c4da:	9a04      	ldr	r2, [sp, #16]
 800c4dc:	b9d8      	cbnz	r0, 800c516 <_svfiprintf_r+0xe6>
 800c4de:	06d0      	lsls	r0, r2, #27
 800c4e0:	bf44      	itt	mi
 800c4e2:	2320      	movmi	r3, #32
 800c4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e8:	0711      	lsls	r1, r2, #28
 800c4ea:	bf44      	itt	mi
 800c4ec:	232b      	movmi	r3, #43	; 0x2b
 800c4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4f8:	d015      	beq.n	800c526 <_svfiprintf_r+0xf6>
 800c4fa:	9a07      	ldr	r2, [sp, #28]
 800c4fc:	4654      	mov	r4, sl
 800c4fe:	2000      	movs	r0, #0
 800c500:	f04f 0c0a 	mov.w	ip, #10
 800c504:	4621      	mov	r1, r4
 800c506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c50a:	3b30      	subs	r3, #48	; 0x30
 800c50c:	2b09      	cmp	r3, #9
 800c50e:	d94e      	bls.n	800c5ae <_svfiprintf_r+0x17e>
 800c510:	b1b0      	cbz	r0, 800c540 <_svfiprintf_r+0x110>
 800c512:	9207      	str	r2, [sp, #28]
 800c514:	e014      	b.n	800c540 <_svfiprintf_r+0x110>
 800c516:	eba0 0308 	sub.w	r3, r0, r8
 800c51a:	fa09 f303 	lsl.w	r3, r9, r3
 800c51e:	4313      	orrs	r3, r2
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	46a2      	mov	sl, r4
 800c524:	e7d2      	b.n	800c4cc <_svfiprintf_r+0x9c>
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	1d19      	adds	r1, r3, #4
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	9103      	str	r1, [sp, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bfbb      	ittet	lt
 800c532:	425b      	neglt	r3, r3
 800c534:	f042 0202 	orrlt.w	r2, r2, #2
 800c538:	9307      	strge	r3, [sp, #28]
 800c53a:	9307      	strlt	r3, [sp, #28]
 800c53c:	bfb8      	it	lt
 800c53e:	9204      	strlt	r2, [sp, #16]
 800c540:	7823      	ldrb	r3, [r4, #0]
 800c542:	2b2e      	cmp	r3, #46	; 0x2e
 800c544:	d10c      	bne.n	800c560 <_svfiprintf_r+0x130>
 800c546:	7863      	ldrb	r3, [r4, #1]
 800c548:	2b2a      	cmp	r3, #42	; 0x2a
 800c54a:	d135      	bne.n	800c5b8 <_svfiprintf_r+0x188>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	1d1a      	adds	r2, r3, #4
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	9203      	str	r2, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfb8      	it	lt
 800c558:	f04f 33ff 	movlt.w	r3, #4294967295
 800c55c:	3402      	adds	r4, #2
 800c55e:	9305      	str	r3, [sp, #20]
 800c560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c62c <_svfiprintf_r+0x1fc>
 800c564:	7821      	ldrb	r1, [r4, #0]
 800c566:	2203      	movs	r2, #3
 800c568:	4650      	mov	r0, sl
 800c56a:	f7f3 fe71 	bl	8000250 <memchr>
 800c56e:	b140      	cbz	r0, 800c582 <_svfiprintf_r+0x152>
 800c570:	2340      	movs	r3, #64	; 0x40
 800c572:	eba0 000a 	sub.w	r0, r0, sl
 800c576:	fa03 f000 	lsl.w	r0, r3, r0
 800c57a:	9b04      	ldr	r3, [sp, #16]
 800c57c:	4303      	orrs	r3, r0
 800c57e:	3401      	adds	r4, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c586:	4826      	ldr	r0, [pc, #152]	; (800c620 <_svfiprintf_r+0x1f0>)
 800c588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c58c:	2206      	movs	r2, #6
 800c58e:	f7f3 fe5f 	bl	8000250 <memchr>
 800c592:	2800      	cmp	r0, #0
 800c594:	d038      	beq.n	800c608 <_svfiprintf_r+0x1d8>
 800c596:	4b23      	ldr	r3, [pc, #140]	; (800c624 <_svfiprintf_r+0x1f4>)
 800c598:	bb1b      	cbnz	r3, 800c5e2 <_svfiprintf_r+0x1b2>
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	3307      	adds	r3, #7
 800c59e:	f023 0307 	bic.w	r3, r3, #7
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	9303      	str	r3, [sp, #12]
 800c5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a8:	4433      	add	r3, r6
 800c5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ac:	e767      	b.n	800c47e <_svfiprintf_r+0x4e>
 800c5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	2001      	movs	r0, #1
 800c5b6:	e7a5      	b.n	800c504 <_svfiprintf_r+0xd4>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	3401      	adds	r4, #1
 800c5bc:	9305      	str	r3, [sp, #20]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	f04f 0c0a 	mov.w	ip, #10
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ca:	3a30      	subs	r2, #48	; 0x30
 800c5cc:	2a09      	cmp	r2, #9
 800c5ce:	d903      	bls.n	800c5d8 <_svfiprintf_r+0x1a8>
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d0c5      	beq.n	800c560 <_svfiprintf_r+0x130>
 800c5d4:	9105      	str	r1, [sp, #20]
 800c5d6:	e7c3      	b.n	800c560 <_svfiprintf_r+0x130>
 800c5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5dc:	4604      	mov	r4, r0
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e7f0      	b.n	800c5c4 <_svfiprintf_r+0x194>
 800c5e2:	ab03      	add	r3, sp, #12
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	462a      	mov	r2, r5
 800c5e8:	4b0f      	ldr	r3, [pc, #60]	; (800c628 <_svfiprintf_r+0x1f8>)
 800c5ea:	a904      	add	r1, sp, #16
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7fd fe7f 	bl	800a2f0 <_printf_float>
 800c5f2:	1c42      	adds	r2, r0, #1
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	d1d6      	bne.n	800c5a6 <_svfiprintf_r+0x176>
 800c5f8:	89ab      	ldrh	r3, [r5, #12]
 800c5fa:	065b      	lsls	r3, r3, #25
 800c5fc:	f53f af2c 	bmi.w	800c458 <_svfiprintf_r+0x28>
 800c600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c602:	b01d      	add	sp, #116	; 0x74
 800c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c608:	ab03      	add	r3, sp, #12
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	462a      	mov	r2, r5
 800c60e:	4b06      	ldr	r3, [pc, #24]	; (800c628 <_svfiprintf_r+0x1f8>)
 800c610:	a904      	add	r1, sp, #16
 800c612:	4638      	mov	r0, r7
 800c614:	f7fe f910 	bl	800a838 <_printf_i>
 800c618:	e7eb      	b.n	800c5f2 <_svfiprintf_r+0x1c2>
 800c61a:	bf00      	nop
 800c61c:	0800d984 	.word	0x0800d984
 800c620:	0800d98e 	.word	0x0800d98e
 800c624:	0800a2f1 	.word	0x0800a2f1
 800c628:	0800c379 	.word	0x0800c379
 800c62c:	0800d98a 	.word	0x0800d98a

0800c630 <__sfputc_r>:
 800c630:	6893      	ldr	r3, [r2, #8]
 800c632:	3b01      	subs	r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	b410      	push	{r4}
 800c638:	6093      	str	r3, [r2, #8]
 800c63a:	da08      	bge.n	800c64e <__sfputc_r+0x1e>
 800c63c:	6994      	ldr	r4, [r2, #24]
 800c63e:	42a3      	cmp	r3, r4
 800c640:	db01      	blt.n	800c646 <__sfputc_r+0x16>
 800c642:	290a      	cmp	r1, #10
 800c644:	d103      	bne.n	800c64e <__sfputc_r+0x1e>
 800c646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c64a:	f000 b95b 	b.w	800c904 <__swbuf_r>
 800c64e:	6813      	ldr	r3, [r2, #0]
 800c650:	1c58      	adds	r0, r3, #1
 800c652:	6010      	str	r0, [r2, #0]
 800c654:	7019      	strb	r1, [r3, #0]
 800c656:	4608      	mov	r0, r1
 800c658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c65c:	4770      	bx	lr

0800c65e <__sfputs_r>:
 800c65e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c660:	4606      	mov	r6, r0
 800c662:	460f      	mov	r7, r1
 800c664:	4614      	mov	r4, r2
 800c666:	18d5      	adds	r5, r2, r3
 800c668:	42ac      	cmp	r4, r5
 800c66a:	d101      	bne.n	800c670 <__sfputs_r+0x12>
 800c66c:	2000      	movs	r0, #0
 800c66e:	e007      	b.n	800c680 <__sfputs_r+0x22>
 800c670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c674:	463a      	mov	r2, r7
 800c676:	4630      	mov	r0, r6
 800c678:	f7ff ffda 	bl	800c630 <__sfputc_r>
 800c67c:	1c43      	adds	r3, r0, #1
 800c67e:	d1f3      	bne.n	800c668 <__sfputs_r+0xa>
 800c680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c684 <_vfiprintf_r>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	460d      	mov	r5, r1
 800c68a:	b09d      	sub	sp, #116	; 0x74
 800c68c:	4614      	mov	r4, r2
 800c68e:	4698      	mov	r8, r3
 800c690:	4606      	mov	r6, r0
 800c692:	b118      	cbz	r0, 800c69c <_vfiprintf_r+0x18>
 800c694:	6983      	ldr	r3, [r0, #24]
 800c696:	b90b      	cbnz	r3, 800c69c <_vfiprintf_r+0x18>
 800c698:	f000 fb16 	bl	800ccc8 <__sinit>
 800c69c:	4b89      	ldr	r3, [pc, #548]	; (800c8c4 <_vfiprintf_r+0x240>)
 800c69e:	429d      	cmp	r5, r3
 800c6a0:	d11b      	bne.n	800c6da <_vfiprintf_r+0x56>
 800c6a2:	6875      	ldr	r5, [r6, #4]
 800c6a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6a6:	07d9      	lsls	r1, r3, #31
 800c6a8:	d405      	bmi.n	800c6b6 <_vfiprintf_r+0x32>
 800c6aa:	89ab      	ldrh	r3, [r5, #12]
 800c6ac:	059a      	lsls	r2, r3, #22
 800c6ae:	d402      	bmi.n	800c6b6 <_vfiprintf_r+0x32>
 800c6b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6b2:	f000 fba7 	bl	800ce04 <__retarget_lock_acquire_recursive>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	071b      	lsls	r3, r3, #28
 800c6ba:	d501      	bpl.n	800c6c0 <_vfiprintf_r+0x3c>
 800c6bc:	692b      	ldr	r3, [r5, #16]
 800c6be:	b9eb      	cbnz	r3, 800c6fc <_vfiprintf_r+0x78>
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	4630      	mov	r0, r6
 800c6c4:	f000 f970 	bl	800c9a8 <__swsetup_r>
 800c6c8:	b1c0      	cbz	r0, 800c6fc <_vfiprintf_r+0x78>
 800c6ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6cc:	07dc      	lsls	r4, r3, #31
 800c6ce:	d50e      	bpl.n	800c6ee <_vfiprintf_r+0x6a>
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	b01d      	add	sp, #116	; 0x74
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	4b7b      	ldr	r3, [pc, #492]	; (800c8c8 <_vfiprintf_r+0x244>)
 800c6dc:	429d      	cmp	r5, r3
 800c6de:	d101      	bne.n	800c6e4 <_vfiprintf_r+0x60>
 800c6e0:	68b5      	ldr	r5, [r6, #8]
 800c6e2:	e7df      	b.n	800c6a4 <_vfiprintf_r+0x20>
 800c6e4:	4b79      	ldr	r3, [pc, #484]	; (800c8cc <_vfiprintf_r+0x248>)
 800c6e6:	429d      	cmp	r5, r3
 800c6e8:	bf08      	it	eq
 800c6ea:	68f5      	ldreq	r5, [r6, #12]
 800c6ec:	e7da      	b.n	800c6a4 <_vfiprintf_r+0x20>
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	0598      	lsls	r0, r3, #22
 800c6f2:	d4ed      	bmi.n	800c6d0 <_vfiprintf_r+0x4c>
 800c6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6f6:	f000 fb86 	bl	800ce06 <__retarget_lock_release_recursive>
 800c6fa:	e7e9      	b.n	800c6d0 <_vfiprintf_r+0x4c>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c700:	2320      	movs	r3, #32
 800c702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c706:	f8cd 800c 	str.w	r8, [sp, #12]
 800c70a:	2330      	movs	r3, #48	; 0x30
 800c70c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8d0 <_vfiprintf_r+0x24c>
 800c710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c714:	f04f 0901 	mov.w	r9, #1
 800c718:	4623      	mov	r3, r4
 800c71a:	469a      	mov	sl, r3
 800c71c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c720:	b10a      	cbz	r2, 800c726 <_vfiprintf_r+0xa2>
 800c722:	2a25      	cmp	r2, #37	; 0x25
 800c724:	d1f9      	bne.n	800c71a <_vfiprintf_r+0x96>
 800c726:	ebba 0b04 	subs.w	fp, sl, r4
 800c72a:	d00b      	beq.n	800c744 <_vfiprintf_r+0xc0>
 800c72c:	465b      	mov	r3, fp
 800c72e:	4622      	mov	r2, r4
 800c730:	4629      	mov	r1, r5
 800c732:	4630      	mov	r0, r6
 800c734:	f7ff ff93 	bl	800c65e <__sfputs_r>
 800c738:	3001      	adds	r0, #1
 800c73a:	f000 80aa 	beq.w	800c892 <_vfiprintf_r+0x20e>
 800c73e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c740:	445a      	add	r2, fp
 800c742:	9209      	str	r2, [sp, #36]	; 0x24
 800c744:	f89a 3000 	ldrb.w	r3, [sl]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 80a2 	beq.w	800c892 <_vfiprintf_r+0x20e>
 800c74e:	2300      	movs	r3, #0
 800c750:	f04f 32ff 	mov.w	r2, #4294967295
 800c754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c758:	f10a 0a01 	add.w	sl, sl, #1
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	9307      	str	r3, [sp, #28]
 800c760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c764:	931a      	str	r3, [sp, #104]	; 0x68
 800c766:	4654      	mov	r4, sl
 800c768:	2205      	movs	r2, #5
 800c76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76e:	4858      	ldr	r0, [pc, #352]	; (800c8d0 <_vfiprintf_r+0x24c>)
 800c770:	f7f3 fd6e 	bl	8000250 <memchr>
 800c774:	9a04      	ldr	r2, [sp, #16]
 800c776:	b9d8      	cbnz	r0, 800c7b0 <_vfiprintf_r+0x12c>
 800c778:	06d1      	lsls	r1, r2, #27
 800c77a:	bf44      	itt	mi
 800c77c:	2320      	movmi	r3, #32
 800c77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c782:	0713      	lsls	r3, r2, #28
 800c784:	bf44      	itt	mi
 800c786:	232b      	movmi	r3, #43	; 0x2b
 800c788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c78c:	f89a 3000 	ldrb.w	r3, [sl]
 800c790:	2b2a      	cmp	r3, #42	; 0x2a
 800c792:	d015      	beq.n	800c7c0 <_vfiprintf_r+0x13c>
 800c794:	9a07      	ldr	r2, [sp, #28]
 800c796:	4654      	mov	r4, sl
 800c798:	2000      	movs	r0, #0
 800c79a:	f04f 0c0a 	mov.w	ip, #10
 800c79e:	4621      	mov	r1, r4
 800c7a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a4:	3b30      	subs	r3, #48	; 0x30
 800c7a6:	2b09      	cmp	r3, #9
 800c7a8:	d94e      	bls.n	800c848 <_vfiprintf_r+0x1c4>
 800c7aa:	b1b0      	cbz	r0, 800c7da <_vfiprintf_r+0x156>
 800c7ac:	9207      	str	r2, [sp, #28]
 800c7ae:	e014      	b.n	800c7da <_vfiprintf_r+0x156>
 800c7b0:	eba0 0308 	sub.w	r3, r0, r8
 800c7b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	46a2      	mov	sl, r4
 800c7be:	e7d2      	b.n	800c766 <_vfiprintf_r+0xe2>
 800c7c0:	9b03      	ldr	r3, [sp, #12]
 800c7c2:	1d19      	adds	r1, r3, #4
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	9103      	str	r1, [sp, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	bfbb      	ittet	lt
 800c7cc:	425b      	neglt	r3, r3
 800c7ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d2:	9307      	strge	r3, [sp, #28]
 800c7d4:	9307      	strlt	r3, [sp, #28]
 800c7d6:	bfb8      	it	lt
 800c7d8:	9204      	strlt	r2, [sp, #16]
 800c7da:	7823      	ldrb	r3, [r4, #0]
 800c7dc:	2b2e      	cmp	r3, #46	; 0x2e
 800c7de:	d10c      	bne.n	800c7fa <_vfiprintf_r+0x176>
 800c7e0:	7863      	ldrb	r3, [r4, #1]
 800c7e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e4:	d135      	bne.n	800c852 <_vfiprintf_r+0x1ce>
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	1d1a      	adds	r2, r3, #4
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	9203      	str	r2, [sp, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	bfb8      	it	lt
 800c7f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7f6:	3402      	adds	r4, #2
 800c7f8:	9305      	str	r3, [sp, #20]
 800c7fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8e0 <_vfiprintf_r+0x25c>
 800c7fe:	7821      	ldrb	r1, [r4, #0]
 800c800:	2203      	movs	r2, #3
 800c802:	4650      	mov	r0, sl
 800c804:	f7f3 fd24 	bl	8000250 <memchr>
 800c808:	b140      	cbz	r0, 800c81c <_vfiprintf_r+0x198>
 800c80a:	2340      	movs	r3, #64	; 0x40
 800c80c:	eba0 000a 	sub.w	r0, r0, sl
 800c810:	fa03 f000 	lsl.w	r0, r3, r0
 800c814:	9b04      	ldr	r3, [sp, #16]
 800c816:	4303      	orrs	r3, r0
 800c818:	3401      	adds	r4, #1
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c820:	482c      	ldr	r0, [pc, #176]	; (800c8d4 <_vfiprintf_r+0x250>)
 800c822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c826:	2206      	movs	r2, #6
 800c828:	f7f3 fd12 	bl	8000250 <memchr>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d03f      	beq.n	800c8b0 <_vfiprintf_r+0x22c>
 800c830:	4b29      	ldr	r3, [pc, #164]	; (800c8d8 <_vfiprintf_r+0x254>)
 800c832:	bb1b      	cbnz	r3, 800c87c <_vfiprintf_r+0x1f8>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	3307      	adds	r3, #7
 800c838:	f023 0307 	bic.w	r3, r3, #7
 800c83c:	3308      	adds	r3, #8
 800c83e:	9303      	str	r3, [sp, #12]
 800c840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c842:	443b      	add	r3, r7
 800c844:	9309      	str	r3, [sp, #36]	; 0x24
 800c846:	e767      	b.n	800c718 <_vfiprintf_r+0x94>
 800c848:	fb0c 3202 	mla	r2, ip, r2, r3
 800c84c:	460c      	mov	r4, r1
 800c84e:	2001      	movs	r0, #1
 800c850:	e7a5      	b.n	800c79e <_vfiprintf_r+0x11a>
 800c852:	2300      	movs	r3, #0
 800c854:	3401      	adds	r4, #1
 800c856:	9305      	str	r3, [sp, #20]
 800c858:	4619      	mov	r1, r3
 800c85a:	f04f 0c0a 	mov.w	ip, #10
 800c85e:	4620      	mov	r0, r4
 800c860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c864:	3a30      	subs	r2, #48	; 0x30
 800c866:	2a09      	cmp	r2, #9
 800c868:	d903      	bls.n	800c872 <_vfiprintf_r+0x1ee>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d0c5      	beq.n	800c7fa <_vfiprintf_r+0x176>
 800c86e:	9105      	str	r1, [sp, #20]
 800c870:	e7c3      	b.n	800c7fa <_vfiprintf_r+0x176>
 800c872:	fb0c 2101 	mla	r1, ip, r1, r2
 800c876:	4604      	mov	r4, r0
 800c878:	2301      	movs	r3, #1
 800c87a:	e7f0      	b.n	800c85e <_vfiprintf_r+0x1da>
 800c87c:	ab03      	add	r3, sp, #12
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	462a      	mov	r2, r5
 800c882:	4b16      	ldr	r3, [pc, #88]	; (800c8dc <_vfiprintf_r+0x258>)
 800c884:	a904      	add	r1, sp, #16
 800c886:	4630      	mov	r0, r6
 800c888:	f7fd fd32 	bl	800a2f0 <_printf_float>
 800c88c:	4607      	mov	r7, r0
 800c88e:	1c78      	adds	r0, r7, #1
 800c890:	d1d6      	bne.n	800c840 <_vfiprintf_r+0x1bc>
 800c892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c894:	07d9      	lsls	r1, r3, #31
 800c896:	d405      	bmi.n	800c8a4 <_vfiprintf_r+0x220>
 800c898:	89ab      	ldrh	r3, [r5, #12]
 800c89a:	059a      	lsls	r2, r3, #22
 800c89c:	d402      	bmi.n	800c8a4 <_vfiprintf_r+0x220>
 800c89e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8a0:	f000 fab1 	bl	800ce06 <__retarget_lock_release_recursive>
 800c8a4:	89ab      	ldrh	r3, [r5, #12]
 800c8a6:	065b      	lsls	r3, r3, #25
 800c8a8:	f53f af12 	bmi.w	800c6d0 <_vfiprintf_r+0x4c>
 800c8ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8ae:	e711      	b.n	800c6d4 <_vfiprintf_r+0x50>
 800c8b0:	ab03      	add	r3, sp, #12
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	462a      	mov	r2, r5
 800c8b6:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <_vfiprintf_r+0x258>)
 800c8b8:	a904      	add	r1, sp, #16
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f7fd ffbc 	bl	800a838 <_printf_i>
 800c8c0:	e7e4      	b.n	800c88c <_vfiprintf_r+0x208>
 800c8c2:	bf00      	nop
 800c8c4:	0800d9b8 	.word	0x0800d9b8
 800c8c8:	0800d9d8 	.word	0x0800d9d8
 800c8cc:	0800d998 	.word	0x0800d998
 800c8d0:	0800d984 	.word	0x0800d984
 800c8d4:	0800d98e 	.word	0x0800d98e
 800c8d8:	0800a2f1 	.word	0x0800a2f1
 800c8dc:	0800c65f 	.word	0x0800c65f
 800c8e0:	0800d98a 	.word	0x0800d98a

0800c8e4 <_sbrk_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d06      	ldr	r5, [pc, #24]	; (800c900 <_sbrk_r+0x1c>)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f7f5 fba2 	bl	8002038 <_sbrk>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_sbrk_r+0x1a>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_sbrk_r+0x1a>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	200005ec 	.word	0x200005ec

0800c904 <__swbuf_r>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	460e      	mov	r6, r1
 800c908:	4614      	mov	r4, r2
 800c90a:	4605      	mov	r5, r0
 800c90c:	b118      	cbz	r0, 800c916 <__swbuf_r+0x12>
 800c90e:	6983      	ldr	r3, [r0, #24]
 800c910:	b90b      	cbnz	r3, 800c916 <__swbuf_r+0x12>
 800c912:	f000 f9d9 	bl	800ccc8 <__sinit>
 800c916:	4b21      	ldr	r3, [pc, #132]	; (800c99c <__swbuf_r+0x98>)
 800c918:	429c      	cmp	r4, r3
 800c91a:	d12b      	bne.n	800c974 <__swbuf_r+0x70>
 800c91c:	686c      	ldr	r4, [r5, #4]
 800c91e:	69a3      	ldr	r3, [r4, #24]
 800c920:	60a3      	str	r3, [r4, #8]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	071a      	lsls	r2, r3, #28
 800c926:	d52f      	bpl.n	800c988 <__swbuf_r+0x84>
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	b36b      	cbz	r3, 800c988 <__swbuf_r+0x84>
 800c92c:	6923      	ldr	r3, [r4, #16]
 800c92e:	6820      	ldr	r0, [r4, #0]
 800c930:	1ac0      	subs	r0, r0, r3
 800c932:	6963      	ldr	r3, [r4, #20]
 800c934:	b2f6      	uxtb	r6, r6
 800c936:	4283      	cmp	r3, r0
 800c938:	4637      	mov	r7, r6
 800c93a:	dc04      	bgt.n	800c946 <__swbuf_r+0x42>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4628      	mov	r0, r5
 800c940:	f000 f92e 	bl	800cba0 <_fflush_r>
 800c944:	bb30      	cbnz	r0, 800c994 <__swbuf_r+0x90>
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	3b01      	subs	r3, #1
 800c94a:	60a3      	str	r3, [r4, #8]
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	6022      	str	r2, [r4, #0]
 800c952:	701e      	strb	r6, [r3, #0]
 800c954:	6963      	ldr	r3, [r4, #20]
 800c956:	3001      	adds	r0, #1
 800c958:	4283      	cmp	r3, r0
 800c95a:	d004      	beq.n	800c966 <__swbuf_r+0x62>
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	07db      	lsls	r3, r3, #31
 800c960:	d506      	bpl.n	800c970 <__swbuf_r+0x6c>
 800c962:	2e0a      	cmp	r6, #10
 800c964:	d104      	bne.n	800c970 <__swbuf_r+0x6c>
 800c966:	4621      	mov	r1, r4
 800c968:	4628      	mov	r0, r5
 800c96a:	f000 f919 	bl	800cba0 <_fflush_r>
 800c96e:	b988      	cbnz	r0, 800c994 <__swbuf_r+0x90>
 800c970:	4638      	mov	r0, r7
 800c972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c974:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <__swbuf_r+0x9c>)
 800c976:	429c      	cmp	r4, r3
 800c978:	d101      	bne.n	800c97e <__swbuf_r+0x7a>
 800c97a:	68ac      	ldr	r4, [r5, #8]
 800c97c:	e7cf      	b.n	800c91e <__swbuf_r+0x1a>
 800c97e:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <__swbuf_r+0xa0>)
 800c980:	429c      	cmp	r4, r3
 800c982:	bf08      	it	eq
 800c984:	68ec      	ldreq	r4, [r5, #12]
 800c986:	e7ca      	b.n	800c91e <__swbuf_r+0x1a>
 800c988:	4621      	mov	r1, r4
 800c98a:	4628      	mov	r0, r5
 800c98c:	f000 f80c 	bl	800c9a8 <__swsetup_r>
 800c990:	2800      	cmp	r0, #0
 800c992:	d0cb      	beq.n	800c92c <__swbuf_r+0x28>
 800c994:	f04f 37ff 	mov.w	r7, #4294967295
 800c998:	e7ea      	b.n	800c970 <__swbuf_r+0x6c>
 800c99a:	bf00      	nop
 800c99c:	0800d9b8 	.word	0x0800d9b8
 800c9a0:	0800d9d8 	.word	0x0800d9d8
 800c9a4:	0800d998 	.word	0x0800d998

0800c9a8 <__swsetup_r>:
 800c9a8:	4b32      	ldr	r3, [pc, #200]	; (800ca74 <__swsetup_r+0xcc>)
 800c9aa:	b570      	push	{r4, r5, r6, lr}
 800c9ac:	681d      	ldr	r5, [r3, #0]
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	b125      	cbz	r5, 800c9be <__swsetup_r+0x16>
 800c9b4:	69ab      	ldr	r3, [r5, #24]
 800c9b6:	b913      	cbnz	r3, 800c9be <__swsetup_r+0x16>
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 f985 	bl	800ccc8 <__sinit>
 800c9be:	4b2e      	ldr	r3, [pc, #184]	; (800ca78 <__swsetup_r+0xd0>)
 800c9c0:	429c      	cmp	r4, r3
 800c9c2:	d10f      	bne.n	800c9e4 <__swsetup_r+0x3c>
 800c9c4:	686c      	ldr	r4, [r5, #4]
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9cc:	0719      	lsls	r1, r3, #28
 800c9ce:	d42c      	bmi.n	800ca2a <__swsetup_r+0x82>
 800c9d0:	06dd      	lsls	r5, r3, #27
 800c9d2:	d411      	bmi.n	800c9f8 <__swsetup_r+0x50>
 800c9d4:	2309      	movs	r3, #9
 800c9d6:	6033      	str	r3, [r6, #0]
 800c9d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9dc:	81a3      	strh	r3, [r4, #12]
 800c9de:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e2:	e03e      	b.n	800ca62 <__swsetup_r+0xba>
 800c9e4:	4b25      	ldr	r3, [pc, #148]	; (800ca7c <__swsetup_r+0xd4>)
 800c9e6:	429c      	cmp	r4, r3
 800c9e8:	d101      	bne.n	800c9ee <__swsetup_r+0x46>
 800c9ea:	68ac      	ldr	r4, [r5, #8]
 800c9ec:	e7eb      	b.n	800c9c6 <__swsetup_r+0x1e>
 800c9ee:	4b24      	ldr	r3, [pc, #144]	; (800ca80 <__swsetup_r+0xd8>)
 800c9f0:	429c      	cmp	r4, r3
 800c9f2:	bf08      	it	eq
 800c9f4:	68ec      	ldreq	r4, [r5, #12]
 800c9f6:	e7e6      	b.n	800c9c6 <__swsetup_r+0x1e>
 800c9f8:	0758      	lsls	r0, r3, #29
 800c9fa:	d512      	bpl.n	800ca22 <__swsetup_r+0x7a>
 800c9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9fe:	b141      	cbz	r1, 800ca12 <__swsetup_r+0x6a>
 800ca00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca04:	4299      	cmp	r1, r3
 800ca06:	d002      	beq.n	800ca0e <__swsetup_r+0x66>
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f7ff fbd5 	bl	800c1b8 <_free_r>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	6363      	str	r3, [r4, #52]	; 0x34
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca18:	81a3      	strh	r3, [r4, #12]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6063      	str	r3, [r4, #4]
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	f043 0308 	orr.w	r3, r3, #8
 800ca28:	81a3      	strh	r3, [r4, #12]
 800ca2a:	6923      	ldr	r3, [r4, #16]
 800ca2c:	b94b      	cbnz	r3, 800ca42 <__swsetup_r+0x9a>
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca38:	d003      	beq.n	800ca42 <__swsetup_r+0x9a>
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f000 fa09 	bl	800ce54 <__smakebuf_r>
 800ca42:	89a0      	ldrh	r0, [r4, #12]
 800ca44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca48:	f010 0301 	ands.w	r3, r0, #1
 800ca4c:	d00a      	beq.n	800ca64 <__swsetup_r+0xbc>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	6963      	ldr	r3, [r4, #20]
 800ca54:	425b      	negs	r3, r3
 800ca56:	61a3      	str	r3, [r4, #24]
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	b943      	cbnz	r3, 800ca6e <__swsetup_r+0xc6>
 800ca5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca60:	d1ba      	bne.n	800c9d8 <__swsetup_r+0x30>
 800ca62:	bd70      	pop	{r4, r5, r6, pc}
 800ca64:	0781      	lsls	r1, r0, #30
 800ca66:	bf58      	it	pl
 800ca68:	6963      	ldrpl	r3, [r4, #20]
 800ca6a:	60a3      	str	r3, [r4, #8]
 800ca6c:	e7f4      	b.n	800ca58 <__swsetup_r+0xb0>
 800ca6e:	2000      	movs	r0, #0
 800ca70:	e7f7      	b.n	800ca62 <__swsetup_r+0xba>
 800ca72:	bf00      	nop
 800ca74:	2000001c 	.word	0x2000001c
 800ca78:	0800d9b8 	.word	0x0800d9b8
 800ca7c:	0800d9d8 	.word	0x0800d9d8
 800ca80:	0800d998 	.word	0x0800d998

0800ca84 <abort>:
 800ca84:	b508      	push	{r3, lr}
 800ca86:	2006      	movs	r0, #6
 800ca88:	f000 fab4 	bl	800cff4 <raise>
 800ca8c:	2001      	movs	r0, #1
 800ca8e:	f7f5 fa5b 	bl	8001f48 <_exit>
	...

0800ca94 <__sflush_r>:
 800ca94:	898a      	ldrh	r2, [r1, #12]
 800ca96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	0710      	lsls	r0, r2, #28
 800ca9e:	460c      	mov	r4, r1
 800caa0:	d458      	bmi.n	800cb54 <__sflush_r+0xc0>
 800caa2:	684b      	ldr	r3, [r1, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	dc05      	bgt.n	800cab4 <__sflush_r+0x20>
 800caa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dc02      	bgt.n	800cab4 <__sflush_r+0x20>
 800caae:	2000      	movs	r0, #0
 800cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cab6:	2e00      	cmp	r6, #0
 800cab8:	d0f9      	beq.n	800caae <__sflush_r+0x1a>
 800caba:	2300      	movs	r3, #0
 800cabc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cac0:	682f      	ldr	r7, [r5, #0]
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	d032      	beq.n	800cb2c <__sflush_r+0x98>
 800cac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	075a      	lsls	r2, r3, #29
 800cacc:	d505      	bpl.n	800cada <__sflush_r+0x46>
 800cace:	6863      	ldr	r3, [r4, #4]
 800cad0:	1ac0      	subs	r0, r0, r3
 800cad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cad4:	b10b      	cbz	r3, 800cada <__sflush_r+0x46>
 800cad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cad8:	1ac0      	subs	r0, r0, r3
 800cada:	2300      	movs	r3, #0
 800cadc:	4602      	mov	r2, r0
 800cade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cae0:	6a21      	ldr	r1, [r4, #32]
 800cae2:	4628      	mov	r0, r5
 800cae4:	47b0      	blx	r6
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	d106      	bne.n	800cafa <__sflush_r+0x66>
 800caec:	6829      	ldr	r1, [r5, #0]
 800caee:	291d      	cmp	r1, #29
 800caf0:	d82c      	bhi.n	800cb4c <__sflush_r+0xb8>
 800caf2:	4a2a      	ldr	r2, [pc, #168]	; (800cb9c <__sflush_r+0x108>)
 800caf4:	40ca      	lsrs	r2, r1
 800caf6:	07d6      	lsls	r6, r2, #31
 800caf8:	d528      	bpl.n	800cb4c <__sflush_r+0xb8>
 800cafa:	2200      	movs	r2, #0
 800cafc:	6062      	str	r2, [r4, #4]
 800cafe:	04d9      	lsls	r1, r3, #19
 800cb00:	6922      	ldr	r2, [r4, #16]
 800cb02:	6022      	str	r2, [r4, #0]
 800cb04:	d504      	bpl.n	800cb10 <__sflush_r+0x7c>
 800cb06:	1c42      	adds	r2, r0, #1
 800cb08:	d101      	bne.n	800cb0e <__sflush_r+0x7a>
 800cb0a:	682b      	ldr	r3, [r5, #0]
 800cb0c:	b903      	cbnz	r3, 800cb10 <__sflush_r+0x7c>
 800cb0e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb12:	602f      	str	r7, [r5, #0]
 800cb14:	2900      	cmp	r1, #0
 800cb16:	d0ca      	beq.n	800caae <__sflush_r+0x1a>
 800cb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb1c:	4299      	cmp	r1, r3
 800cb1e:	d002      	beq.n	800cb26 <__sflush_r+0x92>
 800cb20:	4628      	mov	r0, r5
 800cb22:	f7ff fb49 	bl	800c1b8 <_free_r>
 800cb26:	2000      	movs	r0, #0
 800cb28:	6360      	str	r0, [r4, #52]	; 0x34
 800cb2a:	e7c1      	b.n	800cab0 <__sflush_r+0x1c>
 800cb2c:	6a21      	ldr	r1, [r4, #32]
 800cb2e:	2301      	movs	r3, #1
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b0      	blx	r6
 800cb34:	1c41      	adds	r1, r0, #1
 800cb36:	d1c7      	bne.n	800cac8 <__sflush_r+0x34>
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0c4      	beq.n	800cac8 <__sflush_r+0x34>
 800cb3e:	2b1d      	cmp	r3, #29
 800cb40:	d001      	beq.n	800cb46 <__sflush_r+0xb2>
 800cb42:	2b16      	cmp	r3, #22
 800cb44:	d101      	bne.n	800cb4a <__sflush_r+0xb6>
 800cb46:	602f      	str	r7, [r5, #0]
 800cb48:	e7b1      	b.n	800caae <__sflush_r+0x1a>
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb50:	81a3      	strh	r3, [r4, #12]
 800cb52:	e7ad      	b.n	800cab0 <__sflush_r+0x1c>
 800cb54:	690f      	ldr	r7, [r1, #16]
 800cb56:	2f00      	cmp	r7, #0
 800cb58:	d0a9      	beq.n	800caae <__sflush_r+0x1a>
 800cb5a:	0793      	lsls	r3, r2, #30
 800cb5c:	680e      	ldr	r6, [r1, #0]
 800cb5e:	bf08      	it	eq
 800cb60:	694b      	ldreq	r3, [r1, #20]
 800cb62:	600f      	str	r7, [r1, #0]
 800cb64:	bf18      	it	ne
 800cb66:	2300      	movne	r3, #0
 800cb68:	eba6 0807 	sub.w	r8, r6, r7
 800cb6c:	608b      	str	r3, [r1, #8]
 800cb6e:	f1b8 0f00 	cmp.w	r8, #0
 800cb72:	dd9c      	ble.n	800caae <__sflush_r+0x1a>
 800cb74:	6a21      	ldr	r1, [r4, #32]
 800cb76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb78:	4643      	mov	r3, r8
 800cb7a:	463a      	mov	r2, r7
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	47b0      	blx	r6
 800cb80:	2800      	cmp	r0, #0
 800cb82:	dc06      	bgt.n	800cb92 <__sflush_r+0xfe>
 800cb84:	89a3      	ldrh	r3, [r4, #12]
 800cb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb90:	e78e      	b.n	800cab0 <__sflush_r+0x1c>
 800cb92:	4407      	add	r7, r0
 800cb94:	eba8 0800 	sub.w	r8, r8, r0
 800cb98:	e7e9      	b.n	800cb6e <__sflush_r+0xda>
 800cb9a:	bf00      	nop
 800cb9c:	20400001 	.word	0x20400001

0800cba0 <_fflush_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	690b      	ldr	r3, [r1, #16]
 800cba4:	4605      	mov	r5, r0
 800cba6:	460c      	mov	r4, r1
 800cba8:	b913      	cbnz	r3, 800cbb0 <_fflush_r+0x10>
 800cbaa:	2500      	movs	r5, #0
 800cbac:	4628      	mov	r0, r5
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	b118      	cbz	r0, 800cbba <_fflush_r+0x1a>
 800cbb2:	6983      	ldr	r3, [r0, #24]
 800cbb4:	b90b      	cbnz	r3, 800cbba <_fflush_r+0x1a>
 800cbb6:	f000 f887 	bl	800ccc8 <__sinit>
 800cbba:	4b14      	ldr	r3, [pc, #80]	; (800cc0c <_fflush_r+0x6c>)
 800cbbc:	429c      	cmp	r4, r3
 800cbbe:	d11b      	bne.n	800cbf8 <_fflush_r+0x58>
 800cbc0:	686c      	ldr	r4, [r5, #4]
 800cbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d0ef      	beq.n	800cbaa <_fflush_r+0xa>
 800cbca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbcc:	07d0      	lsls	r0, r2, #31
 800cbce:	d404      	bmi.n	800cbda <_fflush_r+0x3a>
 800cbd0:	0599      	lsls	r1, r3, #22
 800cbd2:	d402      	bmi.n	800cbda <_fflush_r+0x3a>
 800cbd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbd6:	f000 f915 	bl	800ce04 <__retarget_lock_acquire_recursive>
 800cbda:	4628      	mov	r0, r5
 800cbdc:	4621      	mov	r1, r4
 800cbde:	f7ff ff59 	bl	800ca94 <__sflush_r>
 800cbe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbe4:	07da      	lsls	r2, r3, #31
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	d4e0      	bmi.n	800cbac <_fflush_r+0xc>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	059b      	lsls	r3, r3, #22
 800cbee:	d4dd      	bmi.n	800cbac <_fflush_r+0xc>
 800cbf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbf2:	f000 f908 	bl	800ce06 <__retarget_lock_release_recursive>
 800cbf6:	e7d9      	b.n	800cbac <_fflush_r+0xc>
 800cbf8:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <_fflush_r+0x70>)
 800cbfa:	429c      	cmp	r4, r3
 800cbfc:	d101      	bne.n	800cc02 <_fflush_r+0x62>
 800cbfe:	68ac      	ldr	r4, [r5, #8]
 800cc00:	e7df      	b.n	800cbc2 <_fflush_r+0x22>
 800cc02:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <_fflush_r+0x74>)
 800cc04:	429c      	cmp	r4, r3
 800cc06:	bf08      	it	eq
 800cc08:	68ec      	ldreq	r4, [r5, #12]
 800cc0a:	e7da      	b.n	800cbc2 <_fflush_r+0x22>
 800cc0c:	0800d9b8 	.word	0x0800d9b8
 800cc10:	0800d9d8 	.word	0x0800d9d8
 800cc14:	0800d998 	.word	0x0800d998

0800cc18 <std>:
 800cc18:	2300      	movs	r3, #0
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc26:	6083      	str	r3, [r0, #8]
 800cc28:	8181      	strh	r1, [r0, #12]
 800cc2a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc2c:	81c2      	strh	r2, [r0, #14]
 800cc2e:	6183      	str	r3, [r0, #24]
 800cc30:	4619      	mov	r1, r3
 800cc32:	2208      	movs	r2, #8
 800cc34:	305c      	adds	r0, #92	; 0x5c
 800cc36:	f7fd fab3 	bl	800a1a0 <memset>
 800cc3a:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <std+0x38>)
 800cc3c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <std+0x3c>)
 800cc40:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc42:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <std+0x40>)
 800cc44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc46:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <std+0x44>)
 800cc48:	6224      	str	r4, [r4, #32]
 800cc4a:	6323      	str	r3, [r4, #48]	; 0x30
 800cc4c:	bd10      	pop	{r4, pc}
 800cc4e:	bf00      	nop
 800cc50:	0800d02d 	.word	0x0800d02d
 800cc54:	0800d04f 	.word	0x0800d04f
 800cc58:	0800d087 	.word	0x0800d087
 800cc5c:	0800d0ab 	.word	0x0800d0ab

0800cc60 <_cleanup_r>:
 800cc60:	4901      	ldr	r1, [pc, #4]	; (800cc68 <_cleanup_r+0x8>)
 800cc62:	f000 b8af 	b.w	800cdc4 <_fwalk_reent>
 800cc66:	bf00      	nop
 800cc68:	0800cba1 	.word	0x0800cba1

0800cc6c <__sfmoreglue>:
 800cc6c:	b570      	push	{r4, r5, r6, lr}
 800cc6e:	2268      	movs	r2, #104	; 0x68
 800cc70:	1e4d      	subs	r5, r1, #1
 800cc72:	4355      	muls	r5, r2
 800cc74:	460e      	mov	r6, r1
 800cc76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc7a:	f7ff fb09 	bl	800c290 <_malloc_r>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	b140      	cbz	r0, 800cc94 <__sfmoreglue+0x28>
 800cc82:	2100      	movs	r1, #0
 800cc84:	e9c0 1600 	strd	r1, r6, [r0]
 800cc88:	300c      	adds	r0, #12
 800cc8a:	60a0      	str	r0, [r4, #8]
 800cc8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc90:	f7fd fa86 	bl	800a1a0 <memset>
 800cc94:	4620      	mov	r0, r4
 800cc96:	bd70      	pop	{r4, r5, r6, pc}

0800cc98 <__sfp_lock_acquire>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__sfp_lock_acquire+0x8>)
 800cc9a:	f000 b8b3 	b.w	800ce04 <__retarget_lock_acquire_recursive>
 800cc9e:	bf00      	nop
 800cca0:	200005e9 	.word	0x200005e9

0800cca4 <__sfp_lock_release>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__sfp_lock_release+0x8>)
 800cca6:	f000 b8ae 	b.w	800ce06 <__retarget_lock_release_recursive>
 800ccaa:	bf00      	nop
 800ccac:	200005e9 	.word	0x200005e9

0800ccb0 <__sinit_lock_acquire>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	; (800ccb8 <__sinit_lock_acquire+0x8>)
 800ccb2:	f000 b8a7 	b.w	800ce04 <__retarget_lock_acquire_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	200005ea 	.word	0x200005ea

0800ccbc <__sinit_lock_release>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	; (800ccc4 <__sinit_lock_release+0x8>)
 800ccbe:	f000 b8a2 	b.w	800ce06 <__retarget_lock_release_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	200005ea 	.word	0x200005ea

0800ccc8 <__sinit>:
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	4604      	mov	r4, r0
 800cccc:	f7ff fff0 	bl	800ccb0 <__sinit_lock_acquire>
 800ccd0:	69a3      	ldr	r3, [r4, #24]
 800ccd2:	b11b      	cbz	r3, 800ccdc <__sinit+0x14>
 800ccd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd8:	f7ff bff0 	b.w	800ccbc <__sinit_lock_release>
 800ccdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cce0:	6523      	str	r3, [r4, #80]	; 0x50
 800cce2:	4b13      	ldr	r3, [pc, #76]	; (800cd30 <__sinit+0x68>)
 800cce4:	4a13      	ldr	r2, [pc, #76]	; (800cd34 <__sinit+0x6c>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccea:	42a3      	cmp	r3, r4
 800ccec:	bf04      	itt	eq
 800ccee:	2301      	moveq	r3, #1
 800ccf0:	61a3      	streq	r3, [r4, #24]
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f000 f820 	bl	800cd38 <__sfp>
 800ccf8:	6060      	str	r0, [r4, #4]
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 f81c 	bl	800cd38 <__sfp>
 800cd00:	60a0      	str	r0, [r4, #8]
 800cd02:	4620      	mov	r0, r4
 800cd04:	f000 f818 	bl	800cd38 <__sfp>
 800cd08:	2200      	movs	r2, #0
 800cd0a:	60e0      	str	r0, [r4, #12]
 800cd0c:	2104      	movs	r1, #4
 800cd0e:	6860      	ldr	r0, [r4, #4]
 800cd10:	f7ff ff82 	bl	800cc18 <std>
 800cd14:	68a0      	ldr	r0, [r4, #8]
 800cd16:	2201      	movs	r2, #1
 800cd18:	2109      	movs	r1, #9
 800cd1a:	f7ff ff7d 	bl	800cc18 <std>
 800cd1e:	68e0      	ldr	r0, [r4, #12]
 800cd20:	2202      	movs	r2, #2
 800cd22:	2112      	movs	r1, #18
 800cd24:	f7ff ff78 	bl	800cc18 <std>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	61a3      	str	r3, [r4, #24]
 800cd2c:	e7d2      	b.n	800ccd4 <__sinit+0xc>
 800cd2e:	bf00      	nop
 800cd30:	0800d5c4 	.word	0x0800d5c4
 800cd34:	0800cc61 	.word	0x0800cc61

0800cd38 <__sfp>:
 800cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	f7ff ffac 	bl	800cc98 <__sfp_lock_acquire>
 800cd40:	4b1e      	ldr	r3, [pc, #120]	; (800cdbc <__sfp+0x84>)
 800cd42:	681e      	ldr	r6, [r3, #0]
 800cd44:	69b3      	ldr	r3, [r6, #24]
 800cd46:	b913      	cbnz	r3, 800cd4e <__sfp+0x16>
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7ff ffbd 	bl	800ccc8 <__sinit>
 800cd4e:	3648      	adds	r6, #72	; 0x48
 800cd50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	d503      	bpl.n	800cd60 <__sfp+0x28>
 800cd58:	6833      	ldr	r3, [r6, #0]
 800cd5a:	b30b      	cbz	r3, 800cda0 <__sfp+0x68>
 800cd5c:	6836      	ldr	r6, [r6, #0]
 800cd5e:	e7f7      	b.n	800cd50 <__sfp+0x18>
 800cd60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd64:	b9d5      	cbnz	r5, 800cd9c <__sfp+0x64>
 800cd66:	4b16      	ldr	r3, [pc, #88]	; (800cdc0 <__sfp+0x88>)
 800cd68:	60e3      	str	r3, [r4, #12]
 800cd6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd6e:	6665      	str	r5, [r4, #100]	; 0x64
 800cd70:	f000 f847 	bl	800ce02 <__retarget_lock_init_recursive>
 800cd74:	f7ff ff96 	bl	800cca4 <__sfp_lock_release>
 800cd78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd80:	6025      	str	r5, [r4, #0]
 800cd82:	61a5      	str	r5, [r4, #24]
 800cd84:	2208      	movs	r2, #8
 800cd86:	4629      	mov	r1, r5
 800cd88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd8c:	f7fd fa08 	bl	800a1a0 <memset>
 800cd90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd98:	4620      	mov	r0, r4
 800cd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd9c:	3468      	adds	r4, #104	; 0x68
 800cd9e:	e7d9      	b.n	800cd54 <__sfp+0x1c>
 800cda0:	2104      	movs	r1, #4
 800cda2:	4638      	mov	r0, r7
 800cda4:	f7ff ff62 	bl	800cc6c <__sfmoreglue>
 800cda8:	4604      	mov	r4, r0
 800cdaa:	6030      	str	r0, [r6, #0]
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d1d5      	bne.n	800cd5c <__sfp+0x24>
 800cdb0:	f7ff ff78 	bl	800cca4 <__sfp_lock_release>
 800cdb4:	230c      	movs	r3, #12
 800cdb6:	603b      	str	r3, [r7, #0]
 800cdb8:	e7ee      	b.n	800cd98 <__sfp+0x60>
 800cdba:	bf00      	nop
 800cdbc:	0800d5c4 	.word	0x0800d5c4
 800cdc0:	ffff0001 	.word	0xffff0001

0800cdc4 <_fwalk_reent>:
 800cdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc8:	4606      	mov	r6, r0
 800cdca:	4688      	mov	r8, r1
 800cdcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdd0:	2700      	movs	r7, #0
 800cdd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdd6:	f1b9 0901 	subs.w	r9, r9, #1
 800cdda:	d505      	bpl.n	800cde8 <_fwalk_reent+0x24>
 800cddc:	6824      	ldr	r4, [r4, #0]
 800cdde:	2c00      	cmp	r4, #0
 800cde0:	d1f7      	bne.n	800cdd2 <_fwalk_reent+0xe>
 800cde2:	4638      	mov	r0, r7
 800cde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde8:	89ab      	ldrh	r3, [r5, #12]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d907      	bls.n	800cdfe <_fwalk_reent+0x3a>
 800cdee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	d003      	beq.n	800cdfe <_fwalk_reent+0x3a>
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	47c0      	blx	r8
 800cdfc:	4307      	orrs	r7, r0
 800cdfe:	3568      	adds	r5, #104	; 0x68
 800ce00:	e7e9      	b.n	800cdd6 <_fwalk_reent+0x12>

0800ce02 <__retarget_lock_init_recursive>:
 800ce02:	4770      	bx	lr

0800ce04 <__retarget_lock_acquire_recursive>:
 800ce04:	4770      	bx	lr

0800ce06 <__retarget_lock_release_recursive>:
 800ce06:	4770      	bx	lr

0800ce08 <__swhatbuf_r>:
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	460e      	mov	r6, r1
 800ce0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce10:	2900      	cmp	r1, #0
 800ce12:	b096      	sub	sp, #88	; 0x58
 800ce14:	4614      	mov	r4, r2
 800ce16:	461d      	mov	r5, r3
 800ce18:	da08      	bge.n	800ce2c <__swhatbuf_r+0x24>
 800ce1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	602a      	str	r2, [r5, #0]
 800ce22:	061a      	lsls	r2, r3, #24
 800ce24:	d410      	bmi.n	800ce48 <__swhatbuf_r+0x40>
 800ce26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce2a:	e00e      	b.n	800ce4a <__swhatbuf_r+0x42>
 800ce2c:	466a      	mov	r2, sp
 800ce2e:	f000 f96f 	bl	800d110 <_fstat_r>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	dbf1      	blt.n	800ce1a <__swhatbuf_r+0x12>
 800ce36:	9a01      	ldr	r2, [sp, #4]
 800ce38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce40:	425a      	negs	r2, r3
 800ce42:	415a      	adcs	r2, r3
 800ce44:	602a      	str	r2, [r5, #0]
 800ce46:	e7ee      	b.n	800ce26 <__swhatbuf_r+0x1e>
 800ce48:	2340      	movs	r3, #64	; 0x40
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	b016      	add	sp, #88	; 0x58
 800ce50:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce54 <__smakebuf_r>:
 800ce54:	898b      	ldrh	r3, [r1, #12]
 800ce56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce58:	079d      	lsls	r5, r3, #30
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	460c      	mov	r4, r1
 800ce5e:	d507      	bpl.n	800ce70 <__smakebuf_r+0x1c>
 800ce60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	6123      	str	r3, [r4, #16]
 800ce68:	2301      	movs	r3, #1
 800ce6a:	6163      	str	r3, [r4, #20]
 800ce6c:	b002      	add	sp, #8
 800ce6e:	bd70      	pop	{r4, r5, r6, pc}
 800ce70:	ab01      	add	r3, sp, #4
 800ce72:	466a      	mov	r2, sp
 800ce74:	f7ff ffc8 	bl	800ce08 <__swhatbuf_r>
 800ce78:	9900      	ldr	r1, [sp, #0]
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7ff fa07 	bl	800c290 <_malloc_r>
 800ce82:	b948      	cbnz	r0, 800ce98 <__smakebuf_r+0x44>
 800ce84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce88:	059a      	lsls	r2, r3, #22
 800ce8a:	d4ef      	bmi.n	800ce6c <__smakebuf_r+0x18>
 800ce8c:	f023 0303 	bic.w	r3, r3, #3
 800ce90:	f043 0302 	orr.w	r3, r3, #2
 800ce94:	81a3      	strh	r3, [r4, #12]
 800ce96:	e7e3      	b.n	800ce60 <__smakebuf_r+0xc>
 800ce98:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <__smakebuf_r+0x7c>)
 800ce9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	6020      	str	r0, [r4, #0]
 800cea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cea4:	81a3      	strh	r3, [r4, #12]
 800cea6:	9b00      	ldr	r3, [sp, #0]
 800cea8:	6163      	str	r3, [r4, #20]
 800ceaa:	9b01      	ldr	r3, [sp, #4]
 800ceac:	6120      	str	r0, [r4, #16]
 800ceae:	b15b      	cbz	r3, 800cec8 <__smakebuf_r+0x74>
 800ceb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f000 f93d 	bl	800d134 <_isatty_r>
 800ceba:	b128      	cbz	r0, 800cec8 <__smakebuf_r+0x74>
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	f023 0303 	bic.w	r3, r3, #3
 800cec2:	f043 0301 	orr.w	r3, r3, #1
 800cec6:	81a3      	strh	r3, [r4, #12]
 800cec8:	89a0      	ldrh	r0, [r4, #12]
 800ceca:	4305      	orrs	r5, r0
 800cecc:	81a5      	strh	r5, [r4, #12]
 800cece:	e7cd      	b.n	800ce6c <__smakebuf_r+0x18>
 800ced0:	0800cc61 	.word	0x0800cc61

0800ced4 <__ascii_mbtowc>:
 800ced4:	b082      	sub	sp, #8
 800ced6:	b901      	cbnz	r1, 800ceda <__ascii_mbtowc+0x6>
 800ced8:	a901      	add	r1, sp, #4
 800ceda:	b142      	cbz	r2, 800ceee <__ascii_mbtowc+0x1a>
 800cedc:	b14b      	cbz	r3, 800cef2 <__ascii_mbtowc+0x1e>
 800cede:	7813      	ldrb	r3, [r2, #0]
 800cee0:	600b      	str	r3, [r1, #0]
 800cee2:	7812      	ldrb	r2, [r2, #0]
 800cee4:	1e10      	subs	r0, r2, #0
 800cee6:	bf18      	it	ne
 800cee8:	2001      	movne	r0, #1
 800ceea:	b002      	add	sp, #8
 800ceec:	4770      	bx	lr
 800ceee:	4610      	mov	r0, r2
 800cef0:	e7fb      	b.n	800ceea <__ascii_mbtowc+0x16>
 800cef2:	f06f 0001 	mvn.w	r0, #1
 800cef6:	e7f8      	b.n	800ceea <__ascii_mbtowc+0x16>

0800cef8 <memmove>:
 800cef8:	4288      	cmp	r0, r1
 800cefa:	b510      	push	{r4, lr}
 800cefc:	eb01 0402 	add.w	r4, r1, r2
 800cf00:	d902      	bls.n	800cf08 <memmove+0x10>
 800cf02:	4284      	cmp	r4, r0
 800cf04:	4623      	mov	r3, r4
 800cf06:	d807      	bhi.n	800cf18 <memmove+0x20>
 800cf08:	1e43      	subs	r3, r0, #1
 800cf0a:	42a1      	cmp	r1, r4
 800cf0c:	d008      	beq.n	800cf20 <memmove+0x28>
 800cf0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf16:	e7f8      	b.n	800cf0a <memmove+0x12>
 800cf18:	4402      	add	r2, r0
 800cf1a:	4601      	mov	r1, r0
 800cf1c:	428a      	cmp	r2, r1
 800cf1e:	d100      	bne.n	800cf22 <memmove+0x2a>
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf2a:	e7f7      	b.n	800cf1c <memmove+0x24>

0800cf2c <__malloc_lock>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	; (800cf34 <__malloc_lock+0x8>)
 800cf2e:	f7ff bf69 	b.w	800ce04 <__retarget_lock_acquire_recursive>
 800cf32:	bf00      	nop
 800cf34:	200005e8 	.word	0x200005e8

0800cf38 <__malloc_unlock>:
 800cf38:	4801      	ldr	r0, [pc, #4]	; (800cf40 <__malloc_unlock+0x8>)
 800cf3a:	f7ff bf64 	b.w	800ce06 <__retarget_lock_release_recursive>
 800cf3e:	bf00      	nop
 800cf40:	200005e8 	.word	0x200005e8

0800cf44 <_realloc_r>:
 800cf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf48:	4680      	mov	r8, r0
 800cf4a:	4614      	mov	r4, r2
 800cf4c:	460e      	mov	r6, r1
 800cf4e:	b921      	cbnz	r1, 800cf5a <_realloc_r+0x16>
 800cf50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf54:	4611      	mov	r1, r2
 800cf56:	f7ff b99b 	b.w	800c290 <_malloc_r>
 800cf5a:	b92a      	cbnz	r2, 800cf68 <_realloc_r+0x24>
 800cf5c:	f7ff f92c 	bl	800c1b8 <_free_r>
 800cf60:	4625      	mov	r5, r4
 800cf62:	4628      	mov	r0, r5
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	f000 f906 	bl	800d178 <_malloc_usable_size_r>
 800cf6c:	4284      	cmp	r4, r0
 800cf6e:	4607      	mov	r7, r0
 800cf70:	d802      	bhi.n	800cf78 <_realloc_r+0x34>
 800cf72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf76:	d812      	bhi.n	800cf9e <_realloc_r+0x5a>
 800cf78:	4621      	mov	r1, r4
 800cf7a:	4640      	mov	r0, r8
 800cf7c:	f7ff f988 	bl	800c290 <_malloc_r>
 800cf80:	4605      	mov	r5, r0
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d0ed      	beq.n	800cf62 <_realloc_r+0x1e>
 800cf86:	42bc      	cmp	r4, r7
 800cf88:	4622      	mov	r2, r4
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	bf28      	it	cs
 800cf8e:	463a      	movcs	r2, r7
 800cf90:	f7fe fd6a 	bl	800ba68 <memcpy>
 800cf94:	4631      	mov	r1, r6
 800cf96:	4640      	mov	r0, r8
 800cf98:	f7ff f90e 	bl	800c1b8 <_free_r>
 800cf9c:	e7e1      	b.n	800cf62 <_realloc_r+0x1e>
 800cf9e:	4635      	mov	r5, r6
 800cfa0:	e7df      	b.n	800cf62 <_realloc_r+0x1e>

0800cfa2 <_raise_r>:
 800cfa2:	291f      	cmp	r1, #31
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	d904      	bls.n	800cfb6 <_raise_r+0x14>
 800cfac:	2316      	movs	r3, #22
 800cfae:	6003      	str	r3, [r0, #0]
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	bd38      	pop	{r3, r4, r5, pc}
 800cfb6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cfb8:	b112      	cbz	r2, 800cfc0 <_raise_r+0x1e>
 800cfba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfbe:	b94b      	cbnz	r3, 800cfd4 <_raise_r+0x32>
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f000 f831 	bl	800d028 <_getpid_r>
 800cfc6:	462a      	mov	r2, r5
 800cfc8:	4601      	mov	r1, r0
 800cfca:	4620      	mov	r0, r4
 800cfcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfd0:	f000 b818 	b.w	800d004 <_kill_r>
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d00a      	beq.n	800cfee <_raise_r+0x4c>
 800cfd8:	1c59      	adds	r1, r3, #1
 800cfda:	d103      	bne.n	800cfe4 <_raise_r+0x42>
 800cfdc:	2316      	movs	r3, #22
 800cfde:	6003      	str	r3, [r0, #0]
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	e7e7      	b.n	800cfb4 <_raise_r+0x12>
 800cfe4:	2400      	movs	r4, #0
 800cfe6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfea:	4628      	mov	r0, r5
 800cfec:	4798      	blx	r3
 800cfee:	2000      	movs	r0, #0
 800cff0:	e7e0      	b.n	800cfb4 <_raise_r+0x12>
	...

0800cff4 <raise>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <raise+0xc>)
 800cff6:	4601      	mov	r1, r0
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f7ff bfd2 	b.w	800cfa2 <_raise_r>
 800cffe:	bf00      	nop
 800d000:	2000001c 	.word	0x2000001c

0800d004 <_kill_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d07      	ldr	r5, [pc, #28]	; (800d024 <_kill_r+0x20>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	4611      	mov	r1, r2
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f7f4 ff89 	bl	8001f28 <_kill>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	d102      	bne.n	800d020 <_kill_r+0x1c>
 800d01a:	682b      	ldr	r3, [r5, #0]
 800d01c:	b103      	cbz	r3, 800d020 <_kill_r+0x1c>
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	bf00      	nop
 800d024:	200005ec 	.word	0x200005ec

0800d028 <_getpid_r>:
 800d028:	f7f4 bf76 	b.w	8001f18 <_getpid>

0800d02c <__sread>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	460c      	mov	r4, r1
 800d030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d034:	f000 f8a8 	bl	800d188 <_read_r>
 800d038:	2800      	cmp	r0, #0
 800d03a:	bfab      	itete	ge
 800d03c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d03e:	89a3      	ldrhlt	r3, [r4, #12]
 800d040:	181b      	addge	r3, r3, r0
 800d042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d046:	bfac      	ite	ge
 800d048:	6563      	strge	r3, [r4, #84]	; 0x54
 800d04a:	81a3      	strhlt	r3, [r4, #12]
 800d04c:	bd10      	pop	{r4, pc}

0800d04e <__swrite>:
 800d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d052:	461f      	mov	r7, r3
 800d054:	898b      	ldrh	r3, [r1, #12]
 800d056:	05db      	lsls	r3, r3, #23
 800d058:	4605      	mov	r5, r0
 800d05a:	460c      	mov	r4, r1
 800d05c:	4616      	mov	r6, r2
 800d05e:	d505      	bpl.n	800d06c <__swrite+0x1e>
 800d060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d064:	2302      	movs	r3, #2
 800d066:	2200      	movs	r2, #0
 800d068:	f000 f874 	bl	800d154 <_lseek_r>
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d076:	81a3      	strh	r3, [r4, #12]
 800d078:	4632      	mov	r2, r6
 800d07a:	463b      	mov	r3, r7
 800d07c:	4628      	mov	r0, r5
 800d07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d082:	f000 b823 	b.w	800d0cc <_write_r>

0800d086 <__sseek>:
 800d086:	b510      	push	{r4, lr}
 800d088:	460c      	mov	r4, r1
 800d08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d08e:	f000 f861 	bl	800d154 <_lseek_r>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	bf15      	itete	ne
 800d098:	6560      	strne	r0, [r4, #84]	; 0x54
 800d09a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d09e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0a2:	81a3      	strheq	r3, [r4, #12]
 800d0a4:	bf18      	it	ne
 800d0a6:	81a3      	strhne	r3, [r4, #12]
 800d0a8:	bd10      	pop	{r4, pc}

0800d0aa <__sclose>:
 800d0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ae:	f000 b81f 	b.w	800d0f0 <_close_r>

0800d0b2 <__ascii_wctomb>:
 800d0b2:	b149      	cbz	r1, 800d0c8 <__ascii_wctomb+0x16>
 800d0b4:	2aff      	cmp	r2, #255	; 0xff
 800d0b6:	bf85      	ittet	hi
 800d0b8:	238a      	movhi	r3, #138	; 0x8a
 800d0ba:	6003      	strhi	r3, [r0, #0]
 800d0bc:	700a      	strbls	r2, [r1, #0]
 800d0be:	f04f 30ff 	movhi.w	r0, #4294967295
 800d0c2:	bf98      	it	ls
 800d0c4:	2001      	movls	r0, #1
 800d0c6:	4770      	bx	lr
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	4770      	bx	lr

0800d0cc <_write_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4d07      	ldr	r5, [pc, #28]	; (800d0ec <_write_r+0x20>)
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	4608      	mov	r0, r1
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	602a      	str	r2, [r5, #0]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	f7f4 ff5b 	bl	8001f96 <_write>
 800d0e0:	1c43      	adds	r3, r0, #1
 800d0e2:	d102      	bne.n	800d0ea <_write_r+0x1e>
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	b103      	cbz	r3, 800d0ea <_write_r+0x1e>
 800d0e8:	6023      	str	r3, [r4, #0]
 800d0ea:	bd38      	pop	{r3, r4, r5, pc}
 800d0ec:	200005ec 	.word	0x200005ec

0800d0f0 <_close_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d06      	ldr	r5, [pc, #24]	; (800d10c <_close_r+0x1c>)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	4608      	mov	r0, r1
 800d0fa:	602b      	str	r3, [r5, #0]
 800d0fc:	f7f4 ff67 	bl	8001fce <_close>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d102      	bne.n	800d10a <_close_r+0x1a>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	b103      	cbz	r3, 800d10a <_close_r+0x1a>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd38      	pop	{r3, r4, r5, pc}
 800d10c:	200005ec 	.word	0x200005ec

0800d110 <_fstat_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4d07      	ldr	r5, [pc, #28]	; (800d130 <_fstat_r+0x20>)
 800d114:	2300      	movs	r3, #0
 800d116:	4604      	mov	r4, r0
 800d118:	4608      	mov	r0, r1
 800d11a:	4611      	mov	r1, r2
 800d11c:	602b      	str	r3, [r5, #0]
 800d11e:	f7f4 ff62 	bl	8001fe6 <_fstat>
 800d122:	1c43      	adds	r3, r0, #1
 800d124:	d102      	bne.n	800d12c <_fstat_r+0x1c>
 800d126:	682b      	ldr	r3, [r5, #0]
 800d128:	b103      	cbz	r3, 800d12c <_fstat_r+0x1c>
 800d12a:	6023      	str	r3, [r4, #0]
 800d12c:	bd38      	pop	{r3, r4, r5, pc}
 800d12e:	bf00      	nop
 800d130:	200005ec 	.word	0x200005ec

0800d134 <_isatty_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4d06      	ldr	r5, [pc, #24]	; (800d150 <_isatty_r+0x1c>)
 800d138:	2300      	movs	r3, #0
 800d13a:	4604      	mov	r4, r0
 800d13c:	4608      	mov	r0, r1
 800d13e:	602b      	str	r3, [r5, #0]
 800d140:	f7f4 ff61 	bl	8002006 <_isatty>
 800d144:	1c43      	adds	r3, r0, #1
 800d146:	d102      	bne.n	800d14e <_isatty_r+0x1a>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	b103      	cbz	r3, 800d14e <_isatty_r+0x1a>
 800d14c:	6023      	str	r3, [r4, #0]
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	200005ec 	.word	0x200005ec

0800d154 <_lseek_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4d07      	ldr	r5, [pc, #28]	; (800d174 <_lseek_r+0x20>)
 800d158:	4604      	mov	r4, r0
 800d15a:	4608      	mov	r0, r1
 800d15c:	4611      	mov	r1, r2
 800d15e:	2200      	movs	r2, #0
 800d160:	602a      	str	r2, [r5, #0]
 800d162:	461a      	mov	r2, r3
 800d164:	f7f4 ff5a 	bl	800201c <_lseek>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d102      	bne.n	800d172 <_lseek_r+0x1e>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	b103      	cbz	r3, 800d172 <_lseek_r+0x1e>
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	200005ec 	.word	0x200005ec

0800d178 <_malloc_usable_size_r>:
 800d178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d17c:	1f18      	subs	r0, r3, #4
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bfbc      	itt	lt
 800d182:	580b      	ldrlt	r3, [r1, r0]
 800d184:	18c0      	addlt	r0, r0, r3
 800d186:	4770      	bx	lr

0800d188 <_read_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4d07      	ldr	r5, [pc, #28]	; (800d1a8 <_read_r+0x20>)
 800d18c:	4604      	mov	r4, r0
 800d18e:	4608      	mov	r0, r1
 800d190:	4611      	mov	r1, r2
 800d192:	2200      	movs	r2, #0
 800d194:	602a      	str	r2, [r5, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	f7f4 fee0 	bl	8001f5c <_read>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_read_r+0x1e>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_read_r+0x1e>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	200005ec 	.word	0x200005ec

0800d1ac <_init>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	bf00      	nop
 800d1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b2:	bc08      	pop	{r3}
 800d1b4:	469e      	mov	lr, r3
 800d1b6:	4770      	bx	lr

0800d1b8 <_fini>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	bf00      	nop
 800d1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1be:	bc08      	pop	{r3}
 800d1c0:	469e      	mov	lr, r3
 800d1c2:	4770      	bx	lr
