
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082d4  080082d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082dc  080082dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082e0  080082e0  000182e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080082e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000070  08008354  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08008354  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167de  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7c  00000000  00000000  0003687e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00039700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028225  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016288  00000000  00000000  00063b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd575  00000000  00000000  00079e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017738a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c0  00000000  00000000  001773dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ccc 	.word	0x08007ccc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007ccc 	.word	0x08007ccc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 f9e4 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f9de 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f001 f84e 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f001 f840 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 f831 	bl	8001710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 ff44 	bl	8001540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 ff5b 	bl	8001574 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fe23 	bl	800131e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f83a 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ff82 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006e0:	f000 fc1a 	bl	8000f18 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 fd46 	bl	8001174 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80006e8:	2201      	movs	r2, #1
 80006ea:	4915      	ldr	r1, [pc, #84]	; (8000740 <main+0x70>)
 80006ec:	4815      	ldr	r0, [pc, #84]	; (8000744 <main+0x74>)
 80006ee:	f004 f855 	bl	800479c <HAL_UART_Receive_IT>
	HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fe4a 	bl	800138c <HAL_Delay>
	shellInit();
 80006f8:	f000 f8aa 	bl	8000850 <shellInit>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80006fc:	2100      	movs	r1, #0
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0x78>)
 8000700:	f002 fb78 	bl	8002df4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8000704:	2100      	movs	r1, #0
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <main+0x78>)
 8000708:	f003 fcec 	bl	80040e4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <main+0x78>)
 8000710:	f002 fb70 	bl	8002df4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8000714:	2104      	movs	r1, #4
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <main+0x78>)
 8000718:	f003 fce4 	bl	80040e4 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <main+0x7c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0fb      	beq.n	800071c <main+0x4c>
			if(shellGetChar()){
 8000724:	f000 f8cc 	bl	80008c0 <shellGetChar>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <main+0x66>
				shellExec();
 800072e:	f000 f93b 	bl	80009a8 <shellExec>
				shellPrompt();
 8000732:	f000 f8a5 	bl	8000880 <shellPrompt>
			}
			uartRxReceived = 0;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <main+0x7c>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 800073c:	e7ee      	b.n	800071c <main+0x4c>
 800073e:	bf00      	nop
 8000740:	20000198 	.word	0x20000198
 8000744:	200001e0 	.word	0x200001e0
 8000748:	20000148 	.word	0x20000148
 800074c:	20000194 	.word	0x20000194

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	2238      	movs	r2, #56	; 0x38
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f005 ffda 	bl	8006718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000772:	2000      	movs	r0, #0
 8000774:	f001 f9a4 	bl	8001ac0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	2303      	movs	r3, #3
 8000788:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800078a:	2306      	movs	r3, #6
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800078e:	2355      	movs	r3, #85	; 0x55
 8000790:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fa40 	bl	8001c28 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007ae:	f000 f82b 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	230f      	movs	r3, #15
 80007b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2303      	movs	r3, #3
 80007b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2104      	movs	r1, #4
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fd44 	bl	8002258 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007d6:	f000 f817 	bl	8000808 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	; 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f6:	f000 fdab 	bl	8001350 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40001000 	.word	0x40001000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>

08000812 <motorPowerOn>:

/**
  * @brief  Switch on the motor driver
  * @retval None
  */
void motorPowerOn(void){
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8000816:	2120      	movs	r1, #32
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f001 f912 	bl	8001a44 <HAL_GPIO_TogglePin>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f001 f909 	bl	8001a44 <HAL_GPIO_TogglePin>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}

08000836 <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800083e:	2120      	movs	r1, #32
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f001 f8fe 	bl	8001a44 <HAL_GPIO_TogglePin>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	226c      	movs	r2, #108	; 0x6c
 800085a:	4906      	ldr	r1, [pc, #24]	; (8000874 <shellInit+0x24>)
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <shellInit+0x28>)
 800085e:	f003 ff06 	bl	800466e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	221a      	movs	r2, #26
 8000868:	4904      	ldr	r1, [pc, #16]	; (800087c <shellInit+0x2c>)
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <shellInit+0x28>)
 800086c:	f003 feff 	bl	800466e <HAL_UART_Transmit>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08007d58 	.word	0x08007d58
 8000878:	200001e0 	.word	0x200001e0
 800087c:	08007d3c 	.word	0x08007d3c

08000880 <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	221a      	movs	r2, #26
 800088a:	4903      	ldr	r1, [pc, #12]	; (8000898 <shellPrompt+0x18>)
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <shellPrompt+0x1c>)
 800088e:	f003 feee 	bl	800466e <HAL_UART_Transmit>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	08007d3c 	.word	0x08007d3c
 800089c:	200001e0 	.word	0x200001e0

080008a0 <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	2214      	movs	r2, #20
 80008aa:	4903      	ldr	r1, [pc, #12]	; (80008b8 <shellCmdNotFound+0x18>)
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <shellCmdNotFound+0x1c>)
 80008ae:	f003 fede 	bl	800466e <HAL_UART_Transmit>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08008038 	.word	0x08008038
 80008bc:	200001e0 	.word	0x200001e0

080008c0 <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <shellGetChar+0xc8>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b0d      	cmp	r3, #13
 80008d0:	d002      	beq.n	80008d8 <shellGetChar+0x18>
 80008d2:	2b7f      	cmp	r3, #127	; 0x7f
 80008d4:	d02f      	beq.n	8000936 <shellGetChar+0x76>
 80008d6:	e040      	b.n	800095a <shellGetChar+0x9a>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	2203      	movs	r2, #3
 80008de:	492b      	ldr	r1, [pc, #172]	; (800098c <shellGetChar+0xcc>)
 80008e0:	482b      	ldr	r0, [pc, #172]	; (8000990 <shellGetChar+0xd0>)
 80008e2:	f003 fec4 	bl	800466e <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <shellGetChar+0xd4>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <shellGetChar+0xd8>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	5499      	strb	r1, [r3, r2]
		argc = 0;
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <shellGetChar+0xdc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 80008f8:	4929      	ldr	r1, [pc, #164]	; (80009a0 <shellGetChar+0xe0>)
 80008fa:	4827      	ldr	r0, [pc, #156]	; (8000998 <shellGetChar+0xd8>)
 80008fc:	f005 ff48 	bl	8006790 <strtok>
 8000900:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000902:	e00f      	b.n	8000924 <shellGetChar+0x64>
			argv[argc++] = token;
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <shellGetChar+0xdc>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	b2d1      	uxtb	r1, r2
 800090c:	4a23      	ldr	r2, [pc, #140]	; (800099c <shellGetChar+0xdc>)
 800090e:	7011      	strb	r1, [r2, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	4a24      	ldr	r2, [pc, #144]	; (80009a4 <shellGetChar+0xe4>)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 800091a:	4921      	ldr	r1, [pc, #132]	; (80009a0 <shellGetChar+0xe0>)
 800091c:	2000      	movs	r0, #0
 800091e:	f005 ff37 	bl	8006790 <strtok>
 8000922:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1ec      	bne.n	8000904 <shellGetChar+0x44>
		}

		idxCmd = 0;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <shellGetChar+0xd4>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	71fb      	strb	r3, [r7, #7]
		break;
 8000934:	e023      	b.n	800097e <shellGetChar+0xbe>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <shellGetChar+0xd4>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	1e5a      	subs	r2, r3, #1
 800093c:	b2d1      	uxtb	r1, r2
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <shellGetChar+0xd4>)
 8000940:	7011      	strb	r1, [r2, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <shellGetChar+0xd8>)
 8000946:	2100      	movs	r1, #0
 8000948:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2201      	movs	r2, #1
 8000950:	490d      	ldr	r1, [pc, #52]	; (8000988 <shellGetChar+0xc8>)
 8000952:	480f      	ldr	r0, [pc, #60]	; (8000990 <shellGetChar+0xd0>)
 8000954:	f003 fe8b 	bl	800466e <HAL_UART_Transmit>
		break;
 8000958:	e011      	b.n	800097e <shellGetChar+0xbe>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <shellGetChar+0xd4>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	b2d1      	uxtb	r1, r2
 8000962:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <shellGetChar+0xd4>)
 8000964:	7011      	strb	r1, [r2, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <shellGetChar+0xc8>)
 800096a:	7819      	ldrb	r1, [r3, #0]
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <shellGetChar+0xd8>)
 800096e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	2201      	movs	r2, #1
 8000976:	4904      	ldr	r1, [pc, #16]	; (8000988 <shellGetChar+0xc8>)
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <shellGetChar+0xd0>)
 800097a:	f003 fe78 	bl	800466e <HAL_UART_Transmit>
	}

	return newCmdReady;
 800097e:	79fb      	ldrb	r3, [r7, #7]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000198 	.word	0x20000198
 800098c:	08007dc4 	.word	0x08007dc4
 8000990:	200001e0 	.word	0x200001e0
 8000994:	200000cc 	.word	0x200000cc
 8000998:	2000008c 	.word	0x2000008c
 800099c:	200000f4 	.word	0x200000f4
 80009a0:	08007ce4 	.word	0x08007ce4
 80009a4:	200000d0 	.word	0x200000d0

080009a8 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 80009ac:	4b6c      	ldr	r3, [pc, #432]	; (8000b60 <shellExec+0x1b8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	496c      	ldr	r1, [pc, #432]	; (8000b64 <shellExec+0x1bc>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc34 	bl	8000220 <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d16f      	bne.n	8000a9e <shellExec+0xf6>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 80009be:	4b68      	ldr	r3, [pc, #416]	; (8000b60 <shellExec+0x1b8>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4969      	ldr	r1, [pc, #420]	; (8000b68 <shellExec+0x1c0>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc2b 	bl	8000220 <strcmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d137      	bne.n	8000a40 <shellExec+0x98>
 80009d0:	4b63      	ldr	r3, [pc, #396]	; (8000b60 <shellExec+0x1b8>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	4965      	ldr	r1, [pc, #404]	; (8000b6c <shellExec+0x1c4>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc22 	bl	8000220 <strcmp>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d008      	beq.n	80009f4 <shellExec+0x4c>
 80009e2:	4b5f      	ldr	r3, [pc, #380]	; (8000b60 <shellExec+0x1b8>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	4962      	ldr	r1, [pc, #392]	; (8000b70 <shellExec+0x1c8>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc19 	bl	8000220 <strcmp>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d125      	bne.n	8000a40 <shellExec+0x98>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 80009f4:	4b5a      	ldr	r3, [pc, #360]	; (8000b60 <shellExec+0x1b8>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f005 fe5f 	bl	80066bc <atoi>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	2120      	movs	r1, #32
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f001 f803 	bl	8001a14 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000a0e:	4b54      	ldr	r3, [pc, #336]	; (8000b60 <shellExec+0x1b8>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fe52 	bl	80066bc <atoi>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a56      	ldr	r2, [pc, #344]	; (8000b74 <shellExec+0x1cc>)
 8000a1c:	2140      	movs	r1, #64	; 0x40
 8000a1e:	4856      	ldr	r0, [pc, #344]	; (8000b78 <shellExec+0x1d0>)
 8000a20:	f005 fe82 	bl	8006728 <sniprintf>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <shellExec+0x1d4>)
 8000a2a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000a2c:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <shellExec+0x1d4>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	4950      	ldr	r1, [pc, #320]	; (8000b78 <shellExec+0x1d0>)
 8000a38:	4851      	ldr	r0, [pc, #324]	; (8000b80 <shellExec+0x1d8>)
 8000a3a:	f003 fe18 	bl	800466e <HAL_UART_Transmit>
 8000a3e:	e08d      	b.n	8000b5c <shellExec+0x1b4>
		}
		else if(strcmp(argv[1],"speed")==0){
 8000a40:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <shellExec+0x1b8>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	494f      	ldr	r1, [pc, #316]	; (8000b84 <shellExec+0x1dc>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fbea 	bl	8000220 <strcmp>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d122      	bne.n	8000a98 <shellExec+0xf0>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8000a52:	4b43      	ldr	r3, [pc, #268]	; (8000b60 <shellExec+0x1b8>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fe30 	bl	80066bc <atoi>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d110      	bne.n	8000a84 <shellExec+0xdc>
 8000a62:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <shellExec+0x1b8>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	4941      	ldr	r1, [pc, #260]	; (8000b6c <shellExec+0x1c4>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbd9 	bl	8000220 <strcmp>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d007      	beq.n	8000a84 <shellExec+0xdc>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295
 8000a78:	2230      	movs	r2, #48	; 0x30
 8000a7a:	4943      	ldr	r1, [pc, #268]	; (8000b88 <shellExec+0x1e0>)
 8000a7c:	4840      	ldr	r0, [pc, #256]	; (8000b80 <shellExec+0x1d8>)
 8000a7e:	f003 fdf6 	bl	800466e <HAL_UART_Transmit>
 8000a82:	e06b      	b.n	8000b5c <shellExec+0x1b4>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <shellExec+0x1b8>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 fe17 	bl	80066bc <atoi>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fed0 	bl	8000836 <motorSetSpeed>
		motorPowerOff();
	}
	else{
		shellCmdNotFound();
	}
}
 8000a96:	e061      	b.n	8000b5c <shellExec+0x1b4>
			shellCmdNotFound();
 8000a98:	f7ff ff02 	bl	80008a0 <shellCmdNotFound>
}
 8000a9c:	e05e      	b.n	8000b5c <shellExec+0x1b4>
	else if(strcmp(argv[0],"help")==0)
 8000a9e:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <shellExec+0x1b8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	493a      	ldr	r1, [pc, #232]	; (8000b8c <shellExec+0x1e4>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbbb 	bl	8000220 <strcmp>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d108      	bne.n	8000ac2 <shellExec+0x11a>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000ab8:	4935      	ldr	r1, [pc, #212]	; (8000b90 <shellExec+0x1e8>)
 8000aba:	4831      	ldr	r0, [pc, #196]	; (8000b80 <shellExec+0x1d8>)
 8000abc:	f003 fdd7 	bl	800466e <HAL_UART_Transmit>
}
 8000ac0:	e04c      	b.n	8000b5c <shellExec+0x1b4>
	else if(strcmp(argv[0],"pinout")==0)
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <shellExec+0x1b8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4933      	ldr	r1, [pc, #204]	; (8000b94 <shellExec+0x1ec>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fba9 	bl	8000220 <strcmp>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d108      	bne.n	8000ae6 <shellExec+0x13e>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000adc:	492e      	ldr	r1, [pc, #184]	; (8000b98 <shellExec+0x1f0>)
 8000ade:	4828      	ldr	r0, [pc, #160]	; (8000b80 <shellExec+0x1d8>)
 8000ae0:	f003 fdc5 	bl	800466e <HAL_UART_Transmit>
}
 8000ae4:	e03a      	b.n	8000b5c <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <shellExec+0x1b8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	492c      	ldr	r1, [pc, #176]	; (8000b9c <shellExec+0x1f4>)
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fb97 	bl	8000220 <strcmp>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d112      	bne.n	8000b1e <shellExec+0x176>
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <shellExec+0x1b8>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4928      	ldr	r1, [pc, #160]	; (8000ba0 <shellExec+0x1f8>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb8e 	bl	8000220 <strcmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d109      	bne.n	8000b1e <shellExec+0x176>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	221a      	movs	r2, #26
 8000b10:	4924      	ldr	r1, [pc, #144]	; (8000ba4 <shellExec+0x1fc>)
 8000b12:	481b      	ldr	r0, [pc, #108]	; (8000b80 <shellExec+0x1d8>)
 8000b14:	f003 fdab 	bl	800466e <HAL_UART_Transmit>
		motorPowerOn();
 8000b18:	f7ff fe7b 	bl	8000812 <motorPowerOn>
 8000b1c:	e01e      	b.n	8000b5c <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <shellExec+0x1b8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	491e      	ldr	r1, [pc, #120]	; (8000b9c <shellExec+0x1f4>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fb7b 	bl	8000220 <strcmp>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d112      	bne.n	8000b56 <shellExec+0x1ae>
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <shellExec+0x1b8>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	491c      	ldr	r1, [pc, #112]	; (8000ba8 <shellExec+0x200>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fb72 	bl	8000220 <strcmp>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d109      	bne.n	8000b56 <shellExec+0x1ae>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	221b      	movs	r2, #27
 8000b48:	4918      	ldr	r1, [pc, #96]	; (8000bac <shellExec+0x204>)
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <shellExec+0x1d8>)
 8000b4c:	f003 fd8f 	bl	800466e <HAL_UART_Transmit>
		motorPowerOff();
 8000b50:	f7ff fe68 	bl	8000824 <motorPowerOff>
 8000b54:	e002      	b.n	8000b5c <shellExec+0x1b4>
		shellCmdNotFound();
 8000b56:	f7ff fea3 	bl	80008a0 <shellCmdNotFound>
}
 8000b5a:	e7ff      	b.n	8000b5c <shellExec+0x1b4>
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000d0 	.word	0x200000d0
 8000b64:	08007ce8 	.word	0x08007ce8
 8000b68:	08007cec 	.word	0x08007cec
 8000b6c:	08007cf0 	.word	0x08007cf0
 8000b70:	08007cf4 	.word	0x08007cf4
 8000b74:	08007cf8 	.word	0x08007cf8
 8000b78:	2000019c 	.word	0x2000019c
 8000b7c:	200001dc 	.word	0x200001dc
 8000b80:	200001e0 	.word	0x200001e0
 8000b84:	08007d14 	.word	0x08007d14
 8000b88:	08008008 	.word	0x08008008
 8000b8c:	08007d1c 	.word	0x08007d1c
 8000b90:	08007dc8 	.word	0x08007dc8
 8000b94:	08007d24 	.word	0x08007d24
 8000b98:	08007ecc 	.word	0x08007ecc
 8000b9c:	08007d2c 	.word	0x08007d2c
 8000ba0:	08007d34 	.word	0x08007d34
 8000ba4:	08007fd0 	.word	0x08007fd0
 8000ba8:	08007d38 	.word	0x08007d38
 8000bac:	08007fec 	.word	0x08007fec

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000be6:	f001 f80f 	bl	8001c08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <HAL_InitTick+0xcc>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a2c      	ldr	r2, [pc, #176]	; (8000cc4 <HAL_InitTick+0xcc>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <HAL_InitTick+0xcc>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fce7 	bl	8002604 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c36:	f001 fcb9 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8000c3a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_InitTick+0xd0>)
 8000c40:	fba2 2303 	umull	r2, r3, r2, r3
 8000c44:	0c9b      	lsrs	r3, r3, #18
 8000c46:	3b01      	subs	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c4c:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <HAL_InitTick+0xd8>)
 8000c4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c58:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c6c:	f001 ff90 	bl	8002b90 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d11b      	bne.n	8000cb6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <HAL_InitTick+0xd4>)
 8000c80:	f001 ffde 	bl	8002c40 <HAL_TIM_Base_Start_IT>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d111      	bne.n	8000cb6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c92:	2036      	movs	r0, #54	; 0x36
 8000c94:	f000 fc6e 	bl	8001574 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b0f      	cmp	r3, #15
 8000c9c:	d808      	bhi.n	8000cb0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	2036      	movs	r0, #54	; 0x36
 8000ca4:	f000 fc4c 	bl	8001540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_InitTick+0xdc>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e002      	b.n	8000cb6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3730      	adds	r7, #48	; 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	431bde83 	.word	0x431bde83
 8000ccc:	200000f8 	.word	0x200000f8
 8000cd0:	40001000 	.word	0x40001000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <USART2_IRQHandler+0x10>)
 8000d36:	f003 fd87 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001e0 	.word	0x200001e0

08000d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000d48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d4c:	f000 fe94 	bl	8001a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM6_DAC_IRQHandler+0x10>)
 8000d5a:	f002 f95d 	bl	8003018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000f8 	.word	0x200000f8

08000d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	return 1;
 8000d6c:	2301      	movs	r3, #1
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_kill>:

int _kill(int pid, int sig)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d82:	f005 fc9f 	bl	80066c4 <__errno>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2216      	movs	r2, #22
 8000d8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_exit>:

void _exit (int status)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe7 	bl	8000d78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000daa:	e7fe      	b.n	8000daa <_exit+0x12>

08000dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e00a      	b.n	8000dd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	60ba      	str	r2, [r7, #8]
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf0      	blt.n	8000dbe <_read+0x12>
	}

return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e009      	b.n	8000e0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf1      	blt.n	8000df8 <_write+0x12>
	}
	return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_close>:

int _close(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	return -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e46:	605a      	str	r2, [r3, #4]
	return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_isatty>:

int _isatty(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f005 fc04 	bl	80066c4 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	20000144 	.word	0x20000144
 8000ef0:	20000288 	.word	0x20000288

08000ef4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b09c      	sub	sp, #112	; 0x70
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2234      	movs	r2, #52	; 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fbe0 	bl	8006718 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f5a:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <MX_TIM1_Init+0x17c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f5e:	4b4c      	ldr	r3, [pc, #304]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5313;
 8000f6a:	4b49      	ldr	r3, [pc, #292]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f6c:	f241 42c1 	movw	r2, #5313	; 0x14c1
 8000f70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f78:	4b45      	ldr	r3, [pc, #276]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f84:	4842      	ldr	r0, [pc, #264]	; (8001090 <MX_TIM1_Init+0x178>)
 8000f86:	f001 fe03 	bl	8002b90 <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f90:	f7ff fc3a 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483b      	ldr	r0, [pc, #236]	; (8001090 <MX_TIM1_Init+0x178>)
 8000fa2:	f002 facd 	bl	8003540 <HAL_TIM_ConfigClockSource>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fac:	f7ff fc2c 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fb0:	4837      	ldr	r0, [pc, #220]	; (8001090 <MX_TIM1_Init+0x178>)
 8000fb2:	f001 febd 	bl	8002d30 <HAL_TIM_PWM_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fbc:	f7ff fc24 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482f      	ldr	r0, [pc, #188]	; (8001090 <MX_TIM1_Init+0x178>)
 8000fd4:	f003 f948 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fde:	f7ff fc13 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe2:	2360      	movs	r3, #96	; 0x60
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 4250;
 8000fe6:	f241 039a 	movw	r3, #4250	; 0x109a
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001000:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_TIM1_Init+0x178>)
 800100a:	f002 f985 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001014:	f7ff fbf8 	bl	8000808 <Error_Handler>
  }
  sConfigOC.Pulse = 1063;
 8001018:	f240 4327 	movw	r3, #1063	; 0x427
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001022:	2204      	movs	r2, #4
 8001024:	4619      	mov	r1, r3
 8001026:	481a      	ldr	r0, [pc, #104]	; (8001090 <MX_TIM1_Init+0x178>)
 8001028:	f002 f976 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001032:	f7ff fbe9 	bl	8000808 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 8001042:	23cd      	movs	r3, #205	; 0xcd
 8001044:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800105c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM1_Init+0x178>)
 8001074:	f003 f98e 	bl	8004394 <HAL_TIMEx_ConfigBreakDeadTime>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 800107e:	f7ff fbc3 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM1_Init+0x178>)
 8001084:	f000 f828 	bl	80010d8 <HAL_TIM_MspPostInit>

}
 8001088:	bf00      	nop
 800108a:	3770      	adds	r7, #112	; 0x70
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000148 	.word	0x20000148
 8001094:	40012c00 	.word	0x40012c00

08001098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_TIM_Base_MspInit+0x38>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10b      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_TIM_Base_MspInit+0x3c>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0x3c>)
 80010b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b4:	6613      	str	r3, [r2, #96]	; 0x60
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_TIM_Base_MspInit+0x3c>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40012c00 	.word	0x40012c00
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <HAL_TIM_MspPostInit+0x68>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d11d      	bne.n	8001136 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_TIM_MspPostInit+0x6c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <HAL_TIM_MspPostInit+0x6c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_TIM_MspPostInit+0x6c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001112:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001116:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001124:	2306      	movs	r3, #6
 8001126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f000 faed 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012c00 	.word	0x40012c00
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_UART_RxCpltCallback+0x20>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001156:	2201      	movs	r2, #1
 8001158:	4904      	ldr	r1, [pc, #16]	; (800116c <HAL_UART_RxCpltCallback+0x24>)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_RxCpltCallback+0x28>)
 800115c:	f003 fb1e 	bl	800479c <HAL_UART_Receive_IT>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000194 	.word	0x20000194
 800116c:	20000198 	.word	0x20000198
 8001170:	200001e0 	.word	0x200001e0

08001174 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_USART2_UART_Init+0x90>)
 800117a:	4a23      	ldr	r2, [pc, #140]	; (8001208 <MX_USART2_UART_Init+0x94>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_USART2_UART_Init+0x90>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_USART2_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_USART2_UART_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_USART2_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_USART2_UART_Init+0x90>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011be:	f003 fa06 	bl	80045ce <HAL_UART_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011c8:	f7ff fb1e 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011d0:	f005 f9a9 	bl	8006526 <HAL_UARTEx_SetTxFifoThreshold>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011da:	f7ff fb15 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011e2:	f005 f9de 	bl	80065a2 <HAL_UARTEx_SetRxFifoThreshold>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011ec:	f7ff fb0c 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_USART2_UART_Init+0x90>)
 80011f2:	f005 f95f 	bl	80064b4 <HAL_UARTEx_DisableFifoMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f7ff fb04 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001e0 	.word	0x200001e0
 8001208:	40004400 	.word	0x40004400

0800120c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09e      	sub	sp, #120	; 0x78
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2254      	movs	r2, #84	; 0x54
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f005 fa73 	bl	8006718 <memset>
  if(uartHandle->Instance==USART2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_UART_MspInit+0xb8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d13e      	bne.n	80012ba <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800123c:	2302      	movs	r3, #2
 800123e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fa53 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001254:	f7ff fad8 	bl	8000808 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_UART_MspInit+0xbc>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <HAL_UART_MspInit+0xbc>)
 800125e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001262:	6593      	str	r3, [r2, #88]	; 0x58
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_UART_MspInit+0xbc>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_UART_MspInit+0xbc>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_UART_MspInit+0xbc>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_UART_MspInit+0xbc>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001288:	230c      	movs	r3, #12
 800128a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001298:	2307      	movs	r3, #7
 800129a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f000 fa33 	bl	8001710 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2026      	movs	r0, #38	; 0x26
 80012b0:	f000 f946 	bl	8001540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012b4:	2026      	movs	r0, #38	; 0x26
 80012b6:	f000 f95d 	bl	8001574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ba:	bf00      	nop
 80012bc:	3778      	adds	r7, #120	; 0x78
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40021000 	.word	0x40021000

080012cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <LoopForever+0xe>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e8:	4c0b      	ldr	r4, [pc, #44]	; (8001318 <LoopForever+0x16>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f6:	f7ff fdfd 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f005 f9e9 	bl	80066d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fe:	f7ff f9e7 	bl	80006d0 <main>

08001302 <LoopForever>:

LoopForever:
    b LoopForever
 8001302:	e7fe      	b.n	8001302 <LoopForever>
  ldr   r0, =_estack
 8001304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001310:	080082e4 	.word	0x080082e4
  ldr r2, =_sbss
 8001314:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001318:	20000284 	.word	0x20000284

0800131c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_2_IRQHandler>

0800131e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f8fe 	bl	800152a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132e:	200f      	movs	r0, #15
 8001330:	f7ff fc62 	bl	8000bf8 <HAL_InitTick>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]
 800133e:	e001      	b.n	8001344 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001340:	f7ff fc36 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001344:	79fb      	ldrb	r3, [r7, #7]

}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x1c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x20>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_IncTick+0x1c>)
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000270 	.word	0x20000270
 8001370:	20000008 	.word	0x20000008

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000270 	.word	0x20000270

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d004      	beq.n	80013b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_Delay+0x40>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b0:	bf00      	nop
 80013b2:	f7ff ffdf 	bl	8001374 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d8f7      	bhi.n	80013b2 <HAL_Delay+0x26>
  {
  }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ff4c 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800154e:	f7ff ff63 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001552:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	6978      	ldr	r0, [r7, #20]
 800155a:	f7ff ffb3 	bl	80014c4 <NVIC_EncodePriority>
 800155e:	4602      	mov	r2, r0
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff82 	bl	8001470 <__NVIC_SetPriority>
}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff56 	bl	8001434 <__NVIC_EnableIRQ>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d005      	beq.n	80015b4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2204      	movs	r2, #4
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e037      	b.n	8001624 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020e 	bic.w	r2, r2, #14
 80015c2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015d2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001600:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001622:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d00d      	beq.n	8001676 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e047      	b.n	8001706 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020e 	bic.w	r2, r2, #14
 8001684:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 021f 	and.w	r2, r3, #31
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00c      	beq.n	80016e6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
    }
  }
  return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800171e:	e15a      	b.n	80019d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 814c 	beq.w	80019d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d005      	beq.n	8001750 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800174c:	2b02      	cmp	r3, #2
 800174e:	d130      	bne.n	80017b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001786:	2201      	movs	r2, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f003 0201 	and.w	r2, r3, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d017      	beq.n	80017ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d123      	bne.n	8001842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	6939      	ldr	r1, [r7, #16]
 800183e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0203 	and.w	r2, r3, #3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80a6 	beq.w	80019d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 8001886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001888:	4a5a      	ldr	r2, [pc, #360]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6613      	str	r3, [r2, #96]	; 0x60
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 8001892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800189c:	4a56      	ldr	r2, [pc, #344]	; (80019f8 <HAL_GPIO_Init+0x2e8>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018c6:	d01f      	beq.n	8001908 <HAL_GPIO_Init+0x1f8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d019      	beq.n	8001904 <HAL_GPIO_Init+0x1f4>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_GPIO_Init+0x1f0>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4a      	ldr	r2, [pc, #296]	; (8001a04 <HAL_GPIO_Init+0x2f4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d00d      	beq.n	80018fc <HAL_GPIO_Init+0x1ec>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <HAL_GPIO_Init+0x2f8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d007      	beq.n	80018f8 <HAL_GPIO_Init+0x1e8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a48      	ldr	r2, [pc, #288]	; (8001a0c <HAL_GPIO_Init+0x2fc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_GPIO_Init+0x1e4>
 80018f0:	2305      	movs	r3, #5
 80018f2:	e00a      	b.n	800190a <HAL_GPIO_Init+0x1fa>
 80018f4:	2306      	movs	r3, #6
 80018f6:	e008      	b.n	800190a <HAL_GPIO_Init+0x1fa>
 80018f8:	2304      	movs	r3, #4
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x1fa>
 80018fc:	2303      	movs	r3, #3
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1fa>
 8001900:	2302      	movs	r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1fa>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1fa>
 8001908:	2300      	movs	r3, #0
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191a:	4937      	ldr	r1, [pc, #220]	; (80019f8 <HAL_GPIO_Init+0x2e8>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_GPIO_Init+0x300>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800194c:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_GPIO_Init+0x300>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_GPIO_Init+0x300>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001976:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_GPIO_Init+0x300>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_GPIO_Init+0x300>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a0:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_GPIO_Init+0x300>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_GPIO_Init+0x300>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ca:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_GPIO_Init+0x300>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f47f ae9d 	bne.w	8001720 <HAL_GPIO_Init+0x10>
  }
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010000 	.word	0x40010000
 80019fc:	48000400 	.word	0x48000400
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000c00 	.word	0x48000c00
 8001a08:	48001000 	.word	0x48001000
 8001a0c:	48001400 	.word	0x48001400
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43d9      	mvns	r1, r3
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	400b      	ands	r3, r1
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f806 	bl	8001aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d141      	bne.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ada:	d131      	bne.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001adc:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ae2:	4a46      	ldr	r2, [pc, #280]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af4:	4a41      	ldr	r2, [pc, #260]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2232      	movs	r2, #50	; 0x32
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	e002      	b.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d102      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f2      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d158      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e057      	b.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b46:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b50:	e04d      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b58:	d141      	bne.n	8001bde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b66:	d131      	bne.n	8001bcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b6e:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b80:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2232      	movs	r2, #50	; 0x32
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9e:	e002      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb2:	d102      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f2      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc6:	d112      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e011      	b.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bdc:	e007      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	20000000 	.word	0x20000000
 8001c04:	431bde83 	.word	0x431bde83

08001c08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c16:	6093      	str	r3, [r2, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e306      	b.n	8002248 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d075      	beq.n	8001d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c46:	4b97      	ldr	r3, [pc, #604]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c50:	4b94      	ldr	r3, [pc, #592]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3e>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_OscConfig+0x44>
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b8d      	ldr	r3, [pc, #564]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x108>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e2e1      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x74>
 8001c8e:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a84      	ldr	r2, [pc, #528]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b7f      	ldr	r3, [pc, #508]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7e      	ldr	r2, [pc, #504]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7b      	ldr	r2, [pc, #492]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xb0>
 8001cc0:	4b78      	ldr	r3, [pc, #480]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a77      	ldr	r2, [pc, #476]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b75      	ldr	r3, [pc, #468]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a74      	ldr	r2, [pc, #464]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb48 	bl	8001374 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb44 	bl	8001374 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e2a6      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xc0>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb34 	bl	8001374 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fb30 	bl	8001374 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e292      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d22:	4b60      	ldr	r3, [pc, #384]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0xe8>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4b56      	ldr	r3, [pc, #344]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0x136>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_OscConfig+0x13c>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11f      	bne.n	8001da4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x154>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e265      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	4946      	ldr	r1, [pc, #280]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d90:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff2f 	bl	8000bf8 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d043      	beq.n	8001e28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e251      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d023      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3c      	ldr	r2, [pc, #240]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff fadc 	bl	8001374 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fad8 	bl	8001374 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e23a      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	061b      	lsls	r3, r3, #24
 8001dec:	492d      	ldr	r1, [pc, #180]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
 8001df2:	e01a      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fab8 	bl	8001374 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fab4 	bl	8001374 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e216      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1e0>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d041      	beq.n	8001eba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01c      	beq.n	8001e78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fa91 	bl	8001374 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e56:	f7ff fa8d 	bl	8001374 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1ef      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ef      	beq.n	8001e56 <HAL_RCC_OscConfig+0x22e>
 8001e76:	e020      	b.n	8001eba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_OscConfig+0x27c>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff fa74 	bl	8001374 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8e:	e00d      	b.n	8001eac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff fa70 	bl	8001374 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d906      	bls.n	8001eac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1d2      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ea      	bne.n	8001e90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80a6 	beq.w	8002014 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ecc:	4b84      	ldr	r3, [pc, #528]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_OscConfig+0x2b4>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x2b6>
 8001edc:	2300      	movs	r3, #0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00d      	beq.n	8001efe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
 8001eee:	4b7c      	ldr	r3, [pc, #496]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efe:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a75      	ldr	r2, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fa2d 	bl	8001374 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff fa29 	bl	8001374 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e18b      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f30:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x4bc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_RCC_OscConfig+0x32e>
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f54:	e024      	b.n	8001fa0 <HAL_RCC_OscConfig+0x378>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d110      	bne.n	8001f80 <HAL_RCC_OscConfig+0x358>
 8001f5e:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	4a5e      	ldr	r2, [pc, #376]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f74:	4a5a      	ldr	r2, [pc, #360]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7e:	e00f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x378>
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f9e4 	bl	8001374 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f9e0 	bl	8001374 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e140      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ed      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x388>
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7ff f9cd 	bl	8001374 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff f9c9 	bl	8001374 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e129      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ed      	bne.n	8001fde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a34      	ldr	r2, [pc, #208]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03c      	beq.n	800209a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f99c 	bl	8001374 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002040:	f7ff f998 	bl	8001374 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0fa      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCC_OscConfig+0x418>
 8002060:	e01b      	b.n	800209a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f97f 	bl	8001374 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800207a:	f7ff f97b 	bl	8001374 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0dd      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 800208e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ef      	bne.n	800207a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80d1 	beq.w	8002246 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	f000 808b 	beq.w	80021c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d15e      	bne.n	8002178 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7ff f955 	bl	8001374 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020cc:	e00c      	b.n	80020e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ce:	f7ff f951 	bl	8001374 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d905      	bls.n	80020e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0b3      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ec      	bne.n	80020ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4b56      	ldr	r3, [pc, #344]	; (8002254 <HAL_RCC_OscConfig+0x62c>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a11      	ldr	r1, [r2, #32]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002104:	3a01      	subs	r2, #1
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800210e:	0212      	lsls	r2, r2, #8
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	0552      	lsls	r2, r2, #21
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002122:	0852      	lsrs	r2, r2, #1
 8002124:	3a01      	subs	r2, #1
 8002126:	0652      	lsls	r2, r2, #25
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800212e:	06d2      	lsls	r2, r2, #27
 8002130:	430a      	orrs	r2, r1
 8002132:	4947      	ldr	r1, [pc, #284]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a44      	ldr	r2, [pc, #272]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b42      	ldr	r3, [pc, #264]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a41      	ldr	r2, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f910 	bl	8001374 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f90c 	bl	8001374 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e06e      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x530>
 8002176:	e066      	b.n	8002246 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b35      	ldr	r3, [pc, #212]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a34      	ldr	r2, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 800217e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002184:	4b32      	ldr	r3, [pc, #200]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a31      	ldr	r2, [pc, #196]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002190:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 8002196:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7ff f8e8 	bl	8001374 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f8e4 	bl	8001374 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e046      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x580>
 80021c6:	e03e      	b.n	8002246 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e039      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_RCC_OscConfig+0x628>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d12c      	bne.n	8002242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	3b01      	subs	r3, #1
 80021f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d123      	bne.n	8002242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11b      	bne.n	8002242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d113      	bne.n	8002242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d109      	bne.n	8002242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	3b01      	subs	r3, #1
 800223c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	019f800c 	.word	0x019f800c

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e11e      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b8e      	ldr	r3, [pc, #568]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 020f 	bic.w	r2, r3, #15
 8002286:	498c      	ldr	r1, [pc, #560]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b8a      	ldr	r3, [pc, #552]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e106      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d073      	beq.n	8002394 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d129      	bne.n	8002308 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0f4      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022c4:	f000 f9d0 	bl	8002668 <RCC_GetSysClockFreqFromPLLSource>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_RCC_ClockConfig+0x268>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d93f      	bls.n	8002352 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022d2:	4b7a      	ldr	r3, [pc, #488]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d033      	beq.n	8002352 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d12f      	bne.n	8002352 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022f2:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fa:	4a70      	ldr	r2, [pc, #448]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	e024      	b.n	8002352 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d107      	bne.n	8002320 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0c6      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002320:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0be      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002330:	f000 f8ce 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002334:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4a61      	ldr	r2, [pc, #388]	; (80024c0 <HAL_RCC_ClockConfig+0x268>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d909      	bls.n	8002352 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002346:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4957      	ldr	r1, [pc, #348]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7ff f806 	bl	8001374 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7ff f802 	bl	8001374 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e095      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a42      	ldr	r2, [pc, #264]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023c4:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
 80023e6:	e008      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b80      	cmp	r3, #128	; 0x80
 80023ec:	d105      	bne.n	80023fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4a32      	ldr	r2, [pc, #200]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d21d      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 020f 	bic.w	r2, r3, #15
 8002410:	4929      	ldr	r1, [pc, #164]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002418:	f7fe ffac 	bl	8001374 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe ffa8 	bl	8001374 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e03b      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d1ed      	bne.n	8002420 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4917      	ldr	r1, [pc, #92]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490f      	ldr	r1, [pc, #60]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002482:	f000 f825 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490c      	ldr	r1, [pc, #48]	; (80024c4 <HAL_RCC_ClockConfig+0x26c>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x270>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x274>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fba6 	bl	8000bf8 <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	04c4b400 	.word	0x04c4b400
 80024c4:	0800804c 	.word	0x0800804c
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e047      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f4:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	e03e      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d136      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3301      	adds	r3, #1
 800251c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d10c      	bne.n	800253e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800252e:	68d2      	ldr	r2, [r2, #12]
 8002530:	0a12      	lsrs	r2, r2, #8
 8002532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
      break;
 800253c:	e00c      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800253e:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	0a12      	lsrs	r2, r2, #8
 800254c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
      break;
 8002556:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0e5b      	lsrs	r3, r3, #25
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	3301      	adds	r3, #1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	e001      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002578:	693b      	ldr	r3, [r7, #16]
}
 800257a:	4618      	mov	r0, r3
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	00f42400 	.word	0x00f42400
 8002590:	016e3600 	.word	0x016e3600

08002594 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025b0:	f7ff fff0 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	0800805c 	.word	0x0800805c

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025dc:	f7ff ffda 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4904      	ldr	r1, [pc, #16]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	0800805c 	.word	0x0800805c

08002604 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	220f      	movs	r2, #15
 8002612:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_GetClockConfig+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	08db      	lsrs	r3, r3, #3
 800263e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_RCC_GetClockConfig+0x60>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	40022000 	.word	0x40022000

08002668 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d10c      	bne.n	80026a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002696:	68d2      	ldr	r2, [r2, #12]
 8002698:	0a12      	lsrs	r2, r2, #8
 800269a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
    break;
 80026a4:	e00c      	b.n	80026c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	0a12      	lsrs	r2, r2, #8
 80026b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    break;
 80026be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026da:	687b      	ldr	r3, [r7, #4]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40021000 	.word	0x40021000
 80026ec:	016e3600 	.word	0x016e3600
 80026f0:	00f42400 	.word	0x00f42400

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026fc:	2300      	movs	r3, #0
 80026fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002700:	2300      	movs	r3, #0
 8002702:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8098 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	4a3f      	ldr	r2, [pc, #252]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	; 0x58
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273e:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274a:	f7fe fe13 	bl	8001374 <HAL_GetTick>
 800274e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002750:	e009      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7fe fe0f 	bl	8001374 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d902      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	74fb      	strb	r3, [r7, #19]
        break;
 8002764:	e005      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ef      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d159      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01e      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	429a      	cmp	r2, r3
 8002792:	d019      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a0:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fdcf 	bl	8001374 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d8:	e00b      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fdcb 	bl	8001374 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d902      	bls.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	74fb      	strb	r3, [r7, #19]
            break;
 80027f0:	e006      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ec      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800281c:	e008      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	74bb      	strb	r3, [r7, #18]
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7c7b      	ldrb	r3, [r7, #17]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4ba7      	ldr	r3, [pc, #668]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4aa6      	ldr	r2, [pc, #664]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284e:	4ba1      	ldr	r3, [pc, #644]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f023 0203 	bic.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	499d      	ldr	r1, [pc, #628]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002870:	4b98      	ldr	r3, [pc, #608]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 020c 	bic.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4995      	ldr	r1, [pc, #596]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002892:	4b90      	ldr	r3, [pc, #576]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	498c      	ldr	r1, [pc, #560]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b4:	4b87      	ldr	r3, [pc, #540]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	4984      	ldr	r1, [pc, #528]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d6:	4b7f      	ldr	r3, [pc, #508]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	497b      	ldr	r1, [pc, #492]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f8:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4973      	ldr	r1, [pc, #460]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291a:	4b6e      	ldr	r3, [pc, #440]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	496a      	ldr	r1, [pc, #424]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800293c:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4962      	ldr	r1, [pc, #392]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295e:	4b5d      	ldr	r3, [pc, #372]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	4959      	ldr	r1, [pc, #356]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002980:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002986:	f023 0203 	bic.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	4951      	ldr	r1, [pc, #324]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029a2:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	4948      	ldr	r1, [pc, #288]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4940      	ldr	r1, [pc, #256]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e4:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a3a      	ldr	r2, [pc, #232]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029fc:	4b35      	ldr	r3, [pc, #212]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	4932      	ldr	r1, [pc, #200]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a2c      	ldr	r2, [pc, #176]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d015      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4924      	ldr	r1, [pc, #144]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a52:	d105      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a54:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d019      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4908      	ldr	r1, [pc, #32]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a02      	ldr	r2, [pc, #8]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ace:	60d3      	str	r3, [r2, #12]
 8002ad0:	e002      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ae4:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4926      	ldr	r1, [pc, #152]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b02:	d105      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	4918      	ldr	r1, [pc, #96]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b80:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e049      	b.n	8002c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe fa6e 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fdf4 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e054      	b.n	8002d02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d022      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x80>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d01d      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x80>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d018      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x80>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x80>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_TIM_Base_Start_IT+0xdc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x80>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x80>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_TIM_Base_Start_IT+0xe4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_TIM_Base_Start_IT+0x80>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_TIM_Base_Start_IT+0xe8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d115      	bne.n	8002cec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_TIM_Base_Start_IT+0xec>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d015      	beq.n	8002cfe <HAL_TIM_Base_Start_IT+0xbe>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d011      	beq.n	8002cfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	e008      	b.n	8002cfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e000      	b.n	8002d00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800
 8002d1c:	40000c00 	.word	0x40000c00
 8002d20:	40013400 	.word	0x40013400
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40015000 	.word	0x40015000
 8002d2c:	00010007 	.word	0x00010007

08002d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e049      	b.n	8002dd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f841 	bl	8002dde <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f000 fd24 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x24>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e03c      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d109      	bne.n	8002e32 <HAL_TIM_PWM_Start+0x3e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e02f      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d109      	bne.n	8002e4c <HAL_TIM_PWM_Start+0x58>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e022      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d109      	bne.n	8002e66 <HAL_TIM_PWM_Start+0x72>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e015      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d109      	bne.n	8002e80 <HAL_TIM_PWM_Start+0x8c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e008      	b.n	8002e92 <HAL_TIM_PWM_Start+0x9e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0a6      	b.n	8002fe8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start+0xb6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	e023      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0xc6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb8:	e01b      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0xd6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec8:	e013      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start+0xe6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed8:	e00b      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0xf6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee8:	e003      	b.n	8002ef2 <HAL_TIM_PWM_Start+0xfe>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 f8cc 	bl	8004098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_TIM_PWM_Start+0x1fc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d018      	beq.n	8002f3c <HAL_TIM_PWM_Start+0x148>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a39      	ldr	r2, [pc, #228]	; (8002ff4 <HAL_TIM_PWM_Start+0x200>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d013      	beq.n	8002f3c <HAL_TIM_PWM_Start+0x148>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a37      	ldr	r2, [pc, #220]	; (8002ff8 <HAL_TIM_PWM_Start+0x204>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00e      	beq.n	8002f3c <HAL_TIM_PWM_Start+0x148>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a36      	ldr	r2, [pc, #216]	; (8002ffc <HAL_TIM_PWM_Start+0x208>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_TIM_PWM_Start+0x148>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a34      	ldr	r2, [pc, #208]	; (8003000 <HAL_TIM_PWM_Start+0x20c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_PWM_Start+0x148>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a33      	ldr	r2, [pc, #204]	; (8003004 <HAL_TIM_PWM_Start+0x210>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIM_PWM_Start+0x14c>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_TIM_PWM_Start+0x14e>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <HAL_TIM_PWM_Start+0x1fc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x1b2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d01d      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x1b2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a26      	ldr	r2, [pc, #152]	; (8003008 <HAL_TIM_PWM_Start+0x214>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x1b2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a24      	ldr	r2, [pc, #144]	; (800300c <HAL_TIM_PWM_Start+0x218>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x1b2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a23      	ldr	r2, [pc, #140]	; (8003010 <HAL_TIM_PWM_Start+0x21c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x1b2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_TIM_PWM_Start+0x200>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x1b2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_TIM_PWM_Start+0x204>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_TIM_PWM_Start+0x1b2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_TIM_PWM_Start+0x210>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d115      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_TIM_PWM_Start+0x220>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b06      	cmp	r3, #6
 8002fb6:	d015      	beq.n	8002fe4 <HAL_TIM_PWM_Start+0x1f0>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbe:	d011      	beq.n	8002fe4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd0:	e008      	b.n	8002fe4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e000      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	40013400 	.word	0x40013400
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400
 8003000:	40014800 	.word	0x40014800
 8003004:	40015000 	.word	0x40015000
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800
 8003010:	40000c00 	.word	0x40000c00
 8003014:	00010007 	.word	0x00010007

08003018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d122      	bne.n	8003074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b02      	cmp	r3, #2
 800303a:	d11b      	bne.n	8003074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0202 	mvn.w	r2, #2
 8003044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fb90 	bl	8003780 <HAL_TIM_IC_CaptureCallback>
 8003060:	e005      	b.n	800306e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fb82 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fb93 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b04      	cmp	r3, #4
 8003080:	d122      	bne.n	80030c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d11b      	bne.n	80030c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0204 	mvn.w	r2, #4
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fb66 	bl	8003780 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fb58 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fb69 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d122      	bne.n	800311c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d11b      	bne.n	800311c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0208 	mvn.w	r2, #8
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2204      	movs	r2, #4
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fb3c 	bl	8003780 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fb2e 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fb3f 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b10      	cmp	r3, #16
 8003128:	d122      	bne.n	8003170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b10      	cmp	r3, #16
 8003136:	d11b      	bne.n	8003170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0210 	mvn.w	r2, #16
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2208      	movs	r2, #8
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fb12 	bl	8003780 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb04 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fb15 	bl	8003794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0201 	mvn.w	r2, #1
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fb24 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f001 f9a2 	bl	800450c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d10e      	bne.n	80031f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	2b80      	cmp	r3, #128	; 0x80
 80031e4:	d107      	bne.n	80031f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f001 f995 	bl	8004520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d10e      	bne.n	8003222 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d107      	bne.n	8003222 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800321a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fac3 	bl	80037a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b20      	cmp	r3, #32
 800322e:	d10e      	bne.n	800324e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b20      	cmp	r3, #32
 800323c:	d107      	bne.n	800324e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0220 	mvn.w	r2, #32
 8003246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f001 f955 	bl	80044f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325c:	d10f      	bne.n	800327e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326c:	d107      	bne.n	800327e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f001 f95b 	bl	8004534 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003288:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800328c:	d10f      	bne.n	80032ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329c:	d107      	bne.n	80032ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80032a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f001 f94d 	bl	8004548 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032bc:	d10f      	bne.n	80032de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d107      	bne.n	80032de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80032d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f001 f93f 	bl	800455c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ec:	d10f      	bne.n	800330e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032fc:	d107      	bne.n	800330e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f001 f931 	bl	8004570 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003332:	2302      	movs	r3, #2
 8003334:	e0ff      	b.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b14      	cmp	r3, #20
 8003342:	f200 80f0 	bhi.w	8003526 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	080033a1 	.word	0x080033a1
 8003350:	08003527 	.word	0x08003527
 8003354:	08003527 	.word	0x08003527
 8003358:	08003527 	.word	0x08003527
 800335c:	080033e1 	.word	0x080033e1
 8003360:	08003527 	.word	0x08003527
 8003364:	08003527 	.word	0x08003527
 8003368:	08003527 	.word	0x08003527
 800336c:	08003423 	.word	0x08003423
 8003370:	08003527 	.word	0x08003527
 8003374:	08003527 	.word	0x08003527
 8003378:	08003527 	.word	0x08003527
 800337c:	08003463 	.word	0x08003463
 8003380:	08003527 	.word	0x08003527
 8003384:	08003527 	.word	0x08003527
 8003388:	08003527 	.word	0x08003527
 800338c:	080034a5 	.word	0x080034a5
 8003390:	08003527 	.word	0x08003527
 8003394:	08003527 	.word	0x08003527
 8003398:	08003527 	.word	0x08003527
 800339c:	080034e5 	.word	0x080034e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fab0 	bl	800390c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
      break;
 80033de:	e0a5      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fb2a 	bl	8003a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      break;
 8003420:	e084      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fb9d 	bl	8003b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0208 	orr.w	r2, r2, #8
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0204 	bic.w	r2, r2, #4
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
      break;
 8003460:	e064      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fc0f 	bl	8003c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
      break;
 80034a2:	e043      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fc82 	bl	8003db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80034e2:	e023      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fccc 	bl	8003e88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003524:	e002      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003534:	7dfb      	ldrb	r3, [r7, #23]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop

08003540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e0f6      	b.n	800374a <HAL_TIM_ConfigClockSource+0x20a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800357a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6f      	ldr	r2, [pc, #444]	; (8003754 <HAL_TIM_ConfigClockSource+0x214>)
 8003596:	4293      	cmp	r3, r2
 8003598:	f000 80c1 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 800359c:	4a6d      	ldr	r2, [pc, #436]	; (8003754 <HAL_TIM_ConfigClockSource+0x214>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	f200 80c6 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 80035a4:	4a6c      	ldr	r2, [pc, #432]	; (8003758 <HAL_TIM_ConfigClockSource+0x218>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	f000 80b9 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 80035ac:	4a6a      	ldr	r2, [pc, #424]	; (8003758 <HAL_TIM_ConfigClockSource+0x218>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	f200 80be 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 80035b4:	4a69      	ldr	r2, [pc, #420]	; (800375c <HAL_TIM_ConfigClockSource+0x21c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f000 80b1 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 80035bc:	4a67      	ldr	r2, [pc, #412]	; (800375c <HAL_TIM_ConfigClockSource+0x21c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	f200 80b6 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 80035c4:	4a66      	ldr	r2, [pc, #408]	; (8003760 <HAL_TIM_ConfigClockSource+0x220>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f000 80a9 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 80035cc:	4a64      	ldr	r2, [pc, #400]	; (8003760 <HAL_TIM_ConfigClockSource+0x220>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f200 80ae 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 80035d4:	4a63      	ldr	r2, [pc, #396]	; (8003764 <HAL_TIM_ConfigClockSource+0x224>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f000 80a1 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 80035dc:	4a61      	ldr	r2, [pc, #388]	; (8003764 <HAL_TIM_ConfigClockSource+0x224>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f200 80a6 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 80035e4:	4a60      	ldr	r2, [pc, #384]	; (8003768 <HAL_TIM_ConfigClockSource+0x228>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f000 8099 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 80035ec:	4a5e      	ldr	r2, [pc, #376]	; (8003768 <HAL_TIM_ConfigClockSource+0x228>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f200 809e 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 80035f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80035f8:	f000 8091 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 80035fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003600:	f200 8096 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003608:	f000 8089 	beq.w	800371e <HAL_TIM_ConfigClockSource+0x1de>
 800360c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003610:	f200 808e 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003618:	d03e      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x158>
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	f200 8087 	bhi.w	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	f000 8086 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1f6>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	d87f      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003630:	2b70      	cmp	r3, #112	; 0x70
 8003632:	d01a      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x12a>
 8003634:	2b70      	cmp	r3, #112	; 0x70
 8003636:	d87b      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003638:	2b60      	cmp	r3, #96	; 0x60
 800363a:	d050      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x19e>
 800363c:	2b60      	cmp	r3, #96	; 0x60
 800363e:	d877      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003640:	2b50      	cmp	r3, #80	; 0x50
 8003642:	d03c      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x17e>
 8003644:	2b50      	cmp	r3, #80	; 0x50
 8003646:	d873      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d058      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x1be>
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d86f      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003650:	2b30      	cmp	r3, #48	; 0x30
 8003652:	d064      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x1de>
 8003654:	2b30      	cmp	r3, #48	; 0x30
 8003656:	d86b      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d060      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x1de>
 800365c:	2b20      	cmp	r3, #32
 800365e:	d867      	bhi.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05c      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x1de>
 8003664:	2b10      	cmp	r3, #16
 8003666:	d05a      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x1de>
 8003668:	e062      	b.n	8003730 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f000 fced 	bl	8004058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800368c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	609a      	str	r2, [r3, #8]
      break;
 8003696:	e04f      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6899      	ldr	r1, [r3, #8]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f000 fcd6 	bl	8004058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ba:	609a      	str	r2, [r3, #8]
      break;
 80036bc:	e03c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 fc48 	bl	8003f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2150      	movs	r1, #80	; 0x50
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fca1 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 80036dc:	e02c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 fc67 	bl	8003fbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2160      	movs	r1, #96	; 0x60
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fc91 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 80036fc:	e01c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	461a      	mov	r2, r3
 800370c:	f000 fc28 	bl	8003f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fc81 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 800371c:	e00c      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f000 fc78 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 800372e:	e003      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e000      	b.n	8003738 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00100070 	.word	0x00100070
 8003758:	00100060 	.word	0x00100060
 800375c:	00100050 	.word	0x00100050
 8003760:	00100040 	.word	0x00100040
 8003764:	00100030 	.word	0x00100030
 8003768:	00100020 	.word	0x00100020

0800376c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a46      	ldr	r2, [pc, #280]	; (80038e8 <TIM_Base_SetConfig+0x12c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d017      	beq.n	8003804 <TIM_Base_SetConfig+0x48>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d013      	beq.n	8003804 <TIM_Base_SetConfig+0x48>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a43      	ldr	r2, [pc, #268]	; (80038ec <TIM_Base_SetConfig+0x130>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00f      	beq.n	8003804 <TIM_Base_SetConfig+0x48>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a42      	ldr	r2, [pc, #264]	; (80038f0 <TIM_Base_SetConfig+0x134>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00b      	beq.n	8003804 <TIM_Base_SetConfig+0x48>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <TIM_Base_SetConfig+0x138>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d007      	beq.n	8003804 <TIM_Base_SetConfig+0x48>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <TIM_Base_SetConfig+0x13c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d003      	beq.n	8003804 <TIM_Base_SetConfig+0x48>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3f      	ldr	r2, [pc, #252]	; (80038fc <TIM_Base_SetConfig+0x140>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d108      	bne.n	8003816 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <TIM_Base_SetConfig+0x12c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d023      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d01f      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a30      	ldr	r2, [pc, #192]	; (80038ec <TIM_Base_SetConfig+0x130>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <TIM_Base_SetConfig+0x134>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <TIM_Base_SetConfig+0x138>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <TIM_Base_SetConfig+0x13c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2d      	ldr	r2, [pc, #180]	; (8003900 <TIM_Base_SetConfig+0x144>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <TIM_Base_SetConfig+0x148>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2b      	ldr	r2, [pc, #172]	; (8003908 <TIM_Base_SetConfig+0x14c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0xaa>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a26      	ldr	r2, [pc, #152]	; (80038fc <TIM_Base_SetConfig+0x140>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <TIM_Base_SetConfig+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <TIM_Base_SetConfig+0x110>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <TIM_Base_SetConfig+0x13c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00f      	beq.n	80038cc <TIM_Base_SetConfig+0x110>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <TIM_Base_SetConfig+0x144>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00b      	beq.n	80038cc <TIM_Base_SetConfig+0x110>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <TIM_Base_SetConfig+0x148>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d007      	beq.n	80038cc <TIM_Base_SetConfig+0x110>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <TIM_Base_SetConfig+0x14c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0x110>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0d      	ldr	r2, [pc, #52]	; (80038fc <TIM_Base_SetConfig+0x140>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d103      	bne.n	80038d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	615a      	str	r2, [r3, #20]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40013400 	.word	0x40013400
 80038fc:	40015000 	.word	0x40015000
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800

0800390c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0303 	bic.w	r3, r3, #3
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f023 0302 	bic.w	r3, r3, #2
 8003958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a30      	ldr	r2, [pc, #192]	; (8003a28 <TIM_OC1_SetConfig+0x11c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <TIM_OC1_SetConfig+0x88>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a2f      	ldr	r2, [pc, #188]	; (8003a2c <TIM_OC1_SetConfig+0x120>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00f      	beq.n	8003994 <TIM_OC1_SetConfig+0x88>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a2e      	ldr	r2, [pc, #184]	; (8003a30 <TIM_OC1_SetConfig+0x124>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <TIM_OC1_SetConfig+0x88>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <TIM_OC1_SetConfig+0x128>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_OC1_SetConfig+0x88>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <TIM_OC1_SetConfig+0x12c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_OC1_SetConfig+0x88>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a2b      	ldr	r2, [pc, #172]	; (8003a3c <TIM_OC1_SetConfig+0x130>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d10c      	bne.n	80039ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0308 	bic.w	r3, r3, #8
 800399a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC1_SetConfig+0x11c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <TIM_OC1_SetConfig+0xd2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <TIM_OC1_SetConfig+0x120>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00f      	beq.n	80039de <TIM_OC1_SetConfig+0xd2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <TIM_OC1_SetConfig+0x124>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <TIM_OC1_SetConfig+0xd2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <TIM_OC1_SetConfig+0x128>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_OC1_SetConfig+0xd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <TIM_OC1_SetConfig+0x12c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_OC1_SetConfig+0xd2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <TIM_OC1_SetConfig+0x130>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40013400 	.word	0x40013400
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800
 8003a3c:	40015000 	.word	0x40015000

08003a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f023 0210 	bic.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a2c      	ldr	r2, [pc, #176]	; (8003b50 <TIM_OC2_SetConfig+0x110>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_OC2_SetConfig+0x74>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <TIM_OC2_SetConfig+0x114>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_OC2_SetConfig+0x74>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <TIM_OC2_SetConfig+0x118>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d10d      	bne.n	8003ad0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <TIM_OC2_SetConfig+0x110>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <TIM_OC2_SetConfig+0xc0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <TIM_OC2_SetConfig+0x114>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00f      	beq.n	8003b00 <TIM_OC2_SetConfig+0xc0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <TIM_OC2_SetConfig+0x11c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <TIM_OC2_SetConfig+0xc0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <TIM_OC2_SetConfig+0x120>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <TIM_OC2_SetConfig+0xc0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <TIM_OC2_SetConfig+0x124>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_OC2_SetConfig+0xc0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <TIM_OC2_SetConfig+0x118>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d113      	bne.n	8003b28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40013400 	.word	0x40013400
 8003b58:	40015000 	.word	0x40015000
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800

08003b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <TIM_OC3_SetConfig+0x10c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <TIM_OC3_SetConfig+0x72>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <TIM_OC3_SetConfig+0x110>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC3_SetConfig+0x72>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <TIM_OC3_SetConfig+0x114>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10d      	bne.n	8003bf6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <TIM_OC3_SetConfig+0x10c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <TIM_OC3_SetConfig+0xbe>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <TIM_OC3_SetConfig+0x110>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00f      	beq.n	8003c26 <TIM_OC3_SetConfig+0xbe>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <TIM_OC3_SetConfig+0x118>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_OC3_SetConfig+0xbe>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <TIM_OC3_SetConfig+0x11c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_OC3_SetConfig+0xbe>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <TIM_OC3_SetConfig+0x120>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_OC3_SetConfig+0xbe>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <TIM_OC3_SetConfig+0x114>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d113      	bne.n	8003c4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	621a      	str	r2, [r3, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40013400 	.word	0x40013400
 8003c7c:	40015000 	.word	0x40015000
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800

08003c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <TIM_OC4_SetConfig+0x110>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_OC4_SetConfig+0x74>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <TIM_OC4_SetConfig+0x114>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_OC4_SetConfig+0x74>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <TIM_OC4_SetConfig+0x118>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10d      	bne.n	8003d1c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <TIM_OC4_SetConfig+0x110>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <TIM_OC4_SetConfig+0xc0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <TIM_OC4_SetConfig+0x114>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00f      	beq.n	8003d4c <TIM_OC4_SetConfig+0xc0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <TIM_OC4_SetConfig+0x11c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00b      	beq.n	8003d4c <TIM_OC4_SetConfig+0xc0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <TIM_OC4_SetConfig+0x120>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_OC4_SetConfig+0xc0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <TIM_OC4_SetConfig+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_OC4_SetConfig+0xc0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <TIM_OC4_SetConfig+0x118>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d113      	bne.n	8003d74 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40013400 	.word	0x40013400
 8003da4:	40015000 	.word	0x40015000
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800

08003db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a19      	ldr	r2, [pc, #100]	; (8003e70 <TIM_OC5_SetConfig+0xbc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <TIM_OC5_SetConfig+0x82>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a18      	ldr	r2, [pc, #96]	; (8003e74 <TIM_OC5_SetConfig+0xc0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00f      	beq.n	8003e36 <TIM_OC5_SetConfig+0x82>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <TIM_OC5_SetConfig+0xc4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_OC5_SetConfig+0x82>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <TIM_OC5_SetConfig+0xc8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_OC5_SetConfig+0x82>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <TIM_OC5_SetConfig+0xcc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_OC5_SetConfig+0x82>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <TIM_OC5_SetConfig+0xd0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d109      	bne.n	8003e4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800
 8003e84:	40015000 	.word	0x40015000

08003e88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	051b      	lsls	r3, r3, #20
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <TIM_OC6_SetConfig+0xc0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d013      	beq.n	8003f0c <TIM_OC6_SetConfig+0x84>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <TIM_OC6_SetConfig+0xc4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00f      	beq.n	8003f0c <TIM_OC6_SetConfig+0x84>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <TIM_OC6_SetConfig+0xc8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00b      	beq.n	8003f0c <TIM_OC6_SetConfig+0x84>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <TIM_OC6_SetConfig+0xcc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <TIM_OC6_SetConfig+0x84>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <TIM_OC6_SetConfig+0xd0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_OC6_SetConfig+0x84>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <TIM_OC6_SetConfig+0xd4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d109      	bne.n	8003f20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	029b      	lsls	r3, r3, #10
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40013400 	.word	0x40013400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800
 8003f5c:	40015000 	.word	0x40015000

08003f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 030a 	bic.w	r3, r3, #10
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	621a      	str	r2, [r3, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 0210 	bic.w	r2, r3, #16
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	031b      	lsls	r3, r3, #12
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ffa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	f043 0307 	orr.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	021a      	lsls	r2, r3, #8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	431a      	orrs	r2, r3
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4313      	orrs	r3, r2
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	609a      	str	r2, [r3, #8]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2201      	movs	r2, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1a      	ldr	r2, [r3, #32]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	431a      	orrs	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_TIMEx_PWMN_Start+0x24>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e022      	b.n	800414e <HAL_TIMEx_PWMN_Start+0x6a>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d109      	bne.n	8004122 <HAL_TIMEx_PWMN_Start+0x3e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e015      	b.n	800414e <HAL_TIMEx_PWMN_Start+0x6a>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d109      	bne.n	800413c <HAL_TIMEx_PWMN_Start+0x58>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e008      	b.n	800414e <HAL_TIMEx_PWMN_Start+0x6a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e073      	b.n	800423e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_TIMEx_PWMN_Start+0x82>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004164:	e013      	b.n	800418e <HAL_TIMEx_PWMN_Start+0xaa>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d104      	bne.n	8004176 <HAL_TIMEx_PWMN_Start+0x92>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004174:	e00b      	b.n	800418e <HAL_TIMEx_PWMN_Start+0xaa>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d104      	bne.n	8004186 <HAL_TIMEx_PWMN_Start+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004184:	e003      	b.n	800418e <HAL_TIMEx_PWMN_Start+0xaa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2204      	movs	r2, #4
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f9f4 	bl	8004584 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a25      	ldr	r2, [pc, #148]	; (8004248 <HAL_TIMEx_PWMN_Start+0x164>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <HAL_TIMEx_PWMN_Start+0x118>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041be:	d01d      	beq.n	80041fc <HAL_TIMEx_PWMN_Start+0x118>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <HAL_TIMEx_PWMN_Start+0x168>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <HAL_TIMEx_PWMN_Start+0x118>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a20      	ldr	r2, [pc, #128]	; (8004250 <HAL_TIMEx_PWMN_Start+0x16c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_TIMEx_PWMN_Start+0x118>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_TIMEx_PWMN_Start+0x170>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <HAL_TIMEx_PWMN_Start+0x118>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <HAL_TIMEx_PWMN_Start+0x174>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_TIMEx_PWMN_Start+0x118>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_TIMEx_PWMN_Start+0x178>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_TIMEx_PWMN_Start+0x118>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_TIMEx_PWMN_Start+0x17c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d115      	bne.n	8004228 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_TIMEx_PWMN_Start+0x180>)
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b06      	cmp	r3, #6
 800420c:	d015      	beq.n	800423a <HAL_TIMEx_PWMN_Start+0x156>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d011      	beq.n	800423a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	e008      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e000      	b.n	800423c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40013400 	.word	0x40013400
 800425c:	40014000 	.word	0x40014000
 8004260:	40015000 	.word	0x40015000
 8004264:	00010007 	.word	0x00010007

08004268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800427c:	2302      	movs	r3, #2
 800427e:	e074      	b.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a34      	ldr	r2, [pc, #208]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a33      	ldr	r2, [pc, #204]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a31      	ldr	r2, [pc, #196]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a21      	ldr	r2, [pc, #132]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d022      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d01d      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a11      	ldr	r2, [pc, #68]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10c      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4313      	orrs	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40013400 	.word	0x40013400
 8004380:	40015000 	.word	0x40015000
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40014000 	.word	0x40014000

08004394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e096      	b.n	80044de <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d106      	bne.n	8004456 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a24      	ldr	r2, [pc, #144]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d12b      	bne.n	80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	051b      	lsls	r3, r3, #20
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a11      	ldr	r2, [pc, #68]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0e      	ldr	r2, [pc, #56]	; (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d106      	bne.n	80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40015000 	.word	0x40015000

080044f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2204      	movs	r2, #4
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1a      	ldr	r2, [r3, #32]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	401a      	ands	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e042      	b.n	8004666 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc fe0a 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2224      	movs	r2, #36	; 0x24
 80045fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fc51 	bl	8004eb8 <UART_SetConfig>
 8004616:	4603      	mov	r3, r0
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e022      	b.n	8004666 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 ff41 	bl	80054b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800463c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800464c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 ffc8 	bl	80055f4 <UART_CheckIdleState>
 8004664:	4603      	mov	r3, r0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b08a      	sub	sp, #40	; 0x28
 8004672:	af02      	add	r7, sp, #8
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004684:	2b20      	cmp	r3, #32
 8004686:	f040 8083 	bne.w	8004790 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_UART_Transmit+0x28>
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07b      	b.n	8004792 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Transmit+0x3a>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e074      	b.n	8004792 <HAL_UART_Transmit+0x124>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2221      	movs	r2, #33	; 0x21
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c0:	f7fc fe58 	bl	8001374 <HAL_GetTick>
 80046c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	88fa      	ldrh	r2, [r7, #6]
 80046ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d108      	bne.n	80046f2 <HAL_UART_Transmit+0x84>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d104      	bne.n	80046f2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	e003      	b.n	80046fa <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004702:	e02c      	b.n	800475e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 ffbb 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e039      	b.n	8004792 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004732:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	3302      	adds	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e007      	b.n	800474c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3301      	adds	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1cc      	bne.n	8004704 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2140      	movs	r1, #64	; 0x40
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 ff88 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e006      	b.n	8004792 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d142      	bne.n	800483a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Receive_IT+0x24>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e03b      	b.n	800483c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Receive_IT+0x36>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e034      	b.n	800483c <HAL_UART_Receive_IT+0xa0>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <HAL_UART_Receive_IT+0xa8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01f      	beq.n	800482a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d018      	beq.n	800482a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	613b      	str	r3, [r7, #16]
   return(result);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	69f9      	ldr	r1, [r7, #28]
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	61bb      	str	r3, [r7, #24]
   return(result);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e6      	bne.n	80047f8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	461a      	mov	r2, r3
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fff3 	bl	800581c <UART_Start_Receive_IT>
 8004836:	4603      	mov	r3, r0
 8004838:	e000      	b.n	800483c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800483a:	2302      	movs	r3, #2
  }
}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	; 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40008000 	.word	0x40008000

08004848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b0ba      	sub	sp, #232	; 0xe8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800486e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004872:	f640 030f 	movw	r3, #2063	; 0x80f
 8004876:	4013      	ands	r3, r2
 8004878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800487c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d11b      	bne.n	80048bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800489c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d009      	beq.n	80048bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 82d6 	beq.w	8004e5e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
      }
      return;
 80048ba:	e2d0      	b.n	8004e5e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 811f 	beq.w	8004b04 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048ca:	4b8b      	ldr	r3, [pc, #556]	; (8004af8 <HAL_UART_IRQHandler+0x2b0>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048d6:	4b89      	ldr	r3, [pc, #548]	; (8004afc <HAL_UART_IRQHandler+0x2b4>)
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8112 	beq.w	8004b04 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d011      	beq.n	8004910 <HAL_UART_IRQHandler+0xc8>
 80048ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2201      	movs	r2, #1
 80048fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <HAL_UART_IRQHandler+0xf8>
 800491c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2202      	movs	r2, #2
 800492e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004936:	f043 0204 	orr.w	r2, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d011      	beq.n	8004970 <HAL_UART_IRQHandler+0x128>
 800494c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2204      	movs	r2, #4
 800495e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004966:	f043 0202 	orr.w	r2, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d017      	beq.n	80049ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004988:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800498c:	4b5a      	ldr	r3, [pc, #360]	; (8004af8 <HAL_UART_IRQHandler+0x2b0>)
 800498e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2208      	movs	r2, #8
 800499a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a2:	f043 0208 	orr.w	r2, r3, #8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d012      	beq.n	80049de <HAL_UART_IRQHandler+0x196>
 80049b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 823c 	beq.w	8004e62 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d013      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d105      	bne.n	8004a0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04f      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 f814 	bl	8005a70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d141      	bne.n	8004ada <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aae:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <HAL_UART_IRQHandler+0x2b8>)
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fc fdc3 	bl	8001642 <HAL_DMA_Abort_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e00f      	b.n	8004af2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9da 	bl	8004e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e00b      	b.n	8004af2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f9d6 	bl	8004e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e007      	b.n	8004af2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9d2 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004af0:	e1b7      	b.n	8004e62 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af2:	bf00      	nop
    return;
 8004af4:	e1b5      	b.n	8004e62 <HAL_UART_IRQHandler+0x61a>
 8004af6:	bf00      	nop
 8004af8:	10000001 	.word	0x10000001
 8004afc:	04000120 	.word	0x04000120
 8004b00:	08005b3d 	.word	0x08005b3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 814a 	bne.w	8004da2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8143 	beq.w	8004da2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 813c 	beq.w	8004da2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	f040 80b5 	bne.w	8004cac <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 8187 	beq.w	8004e66 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b62:	429a      	cmp	r2, r3
 8004b64:	f080 817f 	bcs.w	8004e66 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 8086 	bne.w	8004c90 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1da      	bne.n	8004b84 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e1      	bne.n	8004bce <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e3      	bne.n	8004c0a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e4      	bne.n	8004c50 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc fc80 	bl	8001590 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f8fb 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004caa:	e0dc      	b.n	8004e66 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80ce 	beq.w	8004e6a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80c9 	beq.w	8004e6a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e4      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d36:	633a      	str	r2, [r7, #48]	; 0x30
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e1      	bne.n	8004d0e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0310 	bic.w	r3, r3, #16
 8004d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e4      	bne.n	8004d5e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f880 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004da0:	e063      	b.n	8004e6a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00e      	beq.n	8004dcc <HAL_UART_IRQHandler+0x584>
 8004dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f001 fb57 	bl	8006478 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dca:	e051      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d014      	beq.n	8004e02 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d03a      	beq.n	8004e6e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
    }
    return;
 8004e00:	e035      	b.n	8004e6e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_UART_IRQHandler+0x5da>
 8004e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fea4 	bl	8005b68 <UART_EndTransmit_IT>
    return;
 8004e20:	e026      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_UART_IRQHandler+0x5fa>
 8004e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 fb30 	bl	80064a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e40:	e016      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d010      	beq.n	8004e70 <HAL_UART_IRQHandler+0x628>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da0c      	bge.n	8004e70 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 fb18 	bl	800648c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e5c:	e008      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
      return;
 8004e5e:	bf00      	nop
 8004e60:	e006      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
    return;
 8004e62:	bf00      	nop
 8004e64:	e004      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
      return;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
      return;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_UART_IRQHandler+0x628>
    return;
 8004e6e:	bf00      	nop
  }
}
 8004e70:	37e8      	adds	r7, #232	; 0xe8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop

08004e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ebc:	b08c      	sub	sp, #48	; 0x30
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4baa      	ldr	r3, [pc, #680]	; (8005190 <UART_SetConfig+0x2d8>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a9f      	ldr	r2, [pc, #636]	; (8005194 <UART_SetConfig+0x2dc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f20:	4313      	orrs	r3, r2
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	f023 010f 	bic.w	r1, r3, #15
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a90      	ldr	r2, [pc, #576]	; (8005198 <UART_SetConfig+0x2e0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d125      	bne.n	8004fa8 <UART_SetConfig+0xf0>
 8004f5c:	4b8f      	ldr	r3, [pc, #572]	; (800519c <UART_SetConfig+0x2e4>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d81a      	bhi.n	8004fa0 <UART_SetConfig+0xe8>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0xb8>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f89 	.word	0x08004f89
 8004f7c:	08004f99 	.word	0x08004f99
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f86:	e116      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8e:	e112      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f96:	e10e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9e:	e10a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e106      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7c      	ldr	r2, [pc, #496]	; (80051a0 <UART_SetConfig+0x2e8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d138      	bne.n	8005024 <UART_SetConfig+0x16c>
 8004fb2:	4b7a      	ldr	r3, [pc, #488]	; (800519c <UART_SetConfig+0x2e4>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d82d      	bhi.n	800501c <UART_SetConfig+0x164>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x110>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ffd 	.word	0x08004ffd
 8004fcc:	0800501d 	.word	0x0800501d
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	0800501d 	.word	0x0800501d
 8004fd8:	0800500d 	.word	0x0800500d
 8004fdc:	0800501d 	.word	0x0800501d
 8004fe0:	0800501d 	.word	0x0800501d
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005015 	.word	0x08005015
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005002:	e0d8      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005004:	2302      	movs	r3, #2
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500a:	e0d4      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800500c:	2304      	movs	r3, #4
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005012:	e0d0      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005014:	2308      	movs	r3, #8
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	e0cc      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800501c:	2310      	movs	r3, #16
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e0c8      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a5e      	ldr	r2, [pc, #376]	; (80051a4 <UART_SetConfig+0x2ec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d125      	bne.n	800507a <UART_SetConfig+0x1c2>
 800502e:	4b5b      	ldr	r3, [pc, #364]	; (800519c <UART_SetConfig+0x2e4>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005038:	2b30      	cmp	r3, #48	; 0x30
 800503a:	d016      	beq.n	800506a <UART_SetConfig+0x1b2>
 800503c:	2b30      	cmp	r3, #48	; 0x30
 800503e:	d818      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d00a      	beq.n	800505a <UART_SetConfig+0x1a2>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d814      	bhi.n	8005072 <UART_SetConfig+0x1ba>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <UART_SetConfig+0x19a>
 800504c:	2b10      	cmp	r3, #16
 800504e:	d008      	beq.n	8005062 <UART_SetConfig+0x1aa>
 8005050:	e00f      	b.n	8005072 <UART_SetConfig+0x1ba>
 8005052:	2300      	movs	r3, #0
 8005054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005058:	e0ad      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800505a:	2302      	movs	r3, #2
 800505c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005060:	e0a9      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005062:	2304      	movs	r3, #4
 8005064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005068:	e0a5      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800506a:	2308      	movs	r3, #8
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005070:	e0a1      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005072:	2310      	movs	r3, #16
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005078:	e09d      	b.n	80051b6 <UART_SetConfig+0x2fe>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4a      	ldr	r2, [pc, #296]	; (80051a8 <UART_SetConfig+0x2f0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d125      	bne.n	80050d0 <UART_SetConfig+0x218>
 8005084:	4b45      	ldr	r3, [pc, #276]	; (800519c <UART_SetConfig+0x2e4>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800508e:	2bc0      	cmp	r3, #192	; 0xc0
 8005090:	d016      	beq.n	80050c0 <UART_SetConfig+0x208>
 8005092:	2bc0      	cmp	r3, #192	; 0xc0
 8005094:	d818      	bhi.n	80050c8 <UART_SetConfig+0x210>
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d00a      	beq.n	80050b0 <UART_SetConfig+0x1f8>
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d814      	bhi.n	80050c8 <UART_SetConfig+0x210>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <UART_SetConfig+0x1f0>
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x200>
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x210>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ae:	e082      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b6:	e07e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050be:	e07a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c6:	e076      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ce:	e072      	b.n	80051b6 <UART_SetConfig+0x2fe>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a35      	ldr	r2, [pc, #212]	; (80051ac <UART_SetConfig+0x2f4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d12a      	bne.n	8005130 <UART_SetConfig+0x278>
 80050da:	4b30      	ldr	r3, [pc, #192]	; (800519c <UART_SetConfig+0x2e4>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e8:	d01a      	beq.n	8005120 <UART_SetConfig+0x268>
 80050ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ee:	d81b      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d00c      	beq.n	8005110 <UART_SetConfig+0x258>
 80050f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fa:	d815      	bhi.n	8005128 <UART_SetConfig+0x270>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <UART_SetConfig+0x250>
 8005100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005104:	d008      	beq.n	8005118 <UART_SetConfig+0x260>
 8005106:	e00f      	b.n	8005128 <UART_SetConfig+0x270>
 8005108:	2300      	movs	r3, #0
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e052      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005110:	2302      	movs	r3, #2
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e04e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511e:	e04a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e046      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e042      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <UART_SetConfig+0x2dc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d13a      	bne.n	80051b0 <UART_SetConfig+0x2f8>
 800513a:	4b18      	ldr	r3, [pc, #96]	; (800519c <UART_SetConfig+0x2e4>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005148:	d01a      	beq.n	8005180 <UART_SetConfig+0x2c8>
 800514a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800514e:	d81b      	bhi.n	8005188 <UART_SetConfig+0x2d0>
 8005150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005154:	d00c      	beq.n	8005170 <UART_SetConfig+0x2b8>
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d815      	bhi.n	8005188 <UART_SetConfig+0x2d0>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <UART_SetConfig+0x2b0>
 8005160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005164:	d008      	beq.n	8005178 <UART_SetConfig+0x2c0>
 8005166:	e00f      	b.n	8005188 <UART_SetConfig+0x2d0>
 8005168:	2300      	movs	r3, #0
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e022      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005170:	2302      	movs	r3, #2
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005176:	e01e      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517e:	e01a      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005186:	e016      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518e:	e012      	b.n	80051b6 <UART_SetConfig+0x2fe>
 8005190:	cfff69f3 	.word	0xcfff69f3
 8005194:	40008000 	.word	0x40008000
 8005198:	40013800 	.word	0x40013800
 800519c:	40021000 	.word	0x40021000
 80051a0:	40004400 	.word	0x40004400
 80051a4:	40004800 	.word	0x40004800
 80051a8:	40004c00 	.word	0x40004c00
 80051ac:	40005000 	.word	0x40005000
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4aae      	ldr	r2, [pc, #696]	; (8005474 <UART_SetConfig+0x5bc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	f040 8097 	bne.w	80052f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d823      	bhi.n	8005212 <UART_SetConfig+0x35a>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x318>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	08005213 	.word	0x08005213
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005213 	.word	0x08005213
 80051e0:	08005203 	.word	0x08005203
 80051e4:	08005213 	.word	0x08005213
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005213 	.word	0x08005213
 80051f0:	0800520b 	.word	0x0800520b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7fd f9da 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051fa:	e010      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051fc:	4b9e      	ldr	r3, [pc, #632]	; (8005478 <UART_SetConfig+0x5c0>)
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005200:	e00d      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005202:	f7fd f965 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005208:	e009      	b.n	800521e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005210:	e005      	b.n	800521e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800521c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8130 	beq.w	8005486 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	4a94      	ldr	r2, [pc, #592]	; (800547c <UART_SetConfig+0x5c4>)
 800522c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005230:	461a      	mov	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	fbb3 f3f2 	udiv	r3, r3, r2
 8005238:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	429a      	cmp	r2, r3
 8005248:	d305      	bcc.n	8005256 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	429a      	cmp	r2, r3
 8005254:	d903      	bls.n	800525e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800525c:	e113      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	2200      	movs	r2, #0
 8005262:	60bb      	str	r3, [r7, #8]
 8005264:	60fa      	str	r2, [r7, #12]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	4a84      	ldr	r2, [pc, #528]	; (800547c <UART_SetConfig+0x5c4>)
 800526c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005270:	b29b      	uxth	r3, r3
 8005272:	2200      	movs	r2, #0
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800527c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005280:	f7fb f82e 	bl	80002e0 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4610      	mov	r0, r2
 800528a:	4619      	mov	r1, r3
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	020b      	lsls	r3, r1, #8
 8005296:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800529a:	0202      	lsls	r2, r0, #8
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	6849      	ldr	r1, [r1, #4]
 80052a0:	0849      	lsrs	r1, r1, #1
 80052a2:	2000      	movs	r0, #0
 80052a4:	460c      	mov	r4, r1
 80052a6:	4605      	mov	r5, r0
 80052a8:	eb12 0804 	adds.w	r8, r2, r4
 80052ac:	eb43 0905 	adc.w	r9, r3, r5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	469a      	mov	sl, r3
 80052b8:	4693      	mov	fp, r2
 80052ba:	4652      	mov	r2, sl
 80052bc:	465b      	mov	r3, fp
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fb f80d 	bl	80002e0 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4613      	mov	r3, r2
 80052cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d4:	d308      	bcc.n	80052e8 <UART_SetConfig+0x430>
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052dc:	d204      	bcs.n	80052e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	e0ce      	b.n	8005486 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052ee:	e0ca      	b.n	8005486 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	d166      	bne.n	80053c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80052fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d827      	bhi.n	8005352 <UART_SetConfig+0x49a>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x450>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	08005353 	.word	0x08005353
 8005318:	08005343 	.word	0x08005343
 800531c:	08005353 	.word	0x08005353
 8005320:	08005353 	.word	0x08005353
 8005324:	08005353 	.word	0x08005353
 8005328:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fd f93e 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8005330:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005332:	e014      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fd f950 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8005338:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800533a:	e010      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b4e      	ldr	r3, [pc, #312]	; (8005478 <UART_SetConfig+0x5c0>)
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fd f8c5 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800535c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8090 	beq.w	8005486 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	4a44      	ldr	r2, [pc, #272]	; (800547c <UART_SetConfig+0x5c4>)
 800536c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005370:	461a      	mov	r2, r3
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	fbb3 f3f2 	udiv	r3, r3, r2
 8005378:	005a      	lsls	r2, r3, #1
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	441a      	add	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d916      	bls.n	80053c0 <UART_SetConfig+0x508>
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d212      	bcs.n	80053c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f023 030f 	bic.w	r3, r3, #15
 80053a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	8bfb      	ldrh	r3, [r7, #30]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	8bfa      	ldrh	r2, [r7, #30]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e062      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053c6:	e05e      	b.n	8005486 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d828      	bhi.n	8005422 <UART_SetConfig+0x56a>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x520>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005405 	.word	0x08005405
 80053e0:	0800540d 	.word	0x0800540d
 80053e4:	08005423 	.word	0x08005423
 80053e8:	08005413 	.word	0x08005413
 80053ec:	08005423 	.word	0x08005423
 80053f0:	08005423 	.word	0x08005423
 80053f4:	08005423 	.word	0x08005423
 80053f8:	0800541b 	.word	0x0800541b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fd f8d6 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8005400:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005402:	e014      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fd f8e8 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8005408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800540a:	e010      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <UART_SetConfig+0x5c0>)
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005410:	e00d      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005412:	f7fd f85d 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8005416:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005418:	e009      	b.n	800542e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800542c:	bf00      	nop
    }

    if (pclk != 0U)
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	d028      	beq.n	8005486 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	4a10      	ldr	r2, [pc, #64]	; (800547c <UART_SetConfig+0x5c4>)
 800543a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543e:	461a      	mov	r2, r3
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	fbb3 f2f2 	udiv	r2, r3, r2
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	441a      	add	r2, r3
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	fbb2 f3f3 	udiv	r3, r2, r3
 8005456:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d910      	bls.n	8005480 <UART_SetConfig+0x5c8>
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d20c      	bcs.n	8005480 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	b29a      	uxth	r2, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x5ce>
 8005472:	bf00      	nop
 8005474:	40008000 	.word	0x40008000
 8005478:	00f42400 	.word	0x00f42400
 800547c:	08008064 	.word	0x08008064
      }
      else
      {
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2201      	movs	r2, #1
 800548a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2201      	movs	r2, #1
 8005492:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2200      	movs	r2, #0
 80054a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80054a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3730      	adds	r7, #48	; 0x30
 80054aa:	46bd      	mov	sp, r7
 80054ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01a      	beq.n	80055c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ae:	d10a      	bne.n	80055c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	605a      	str	r2, [r3, #4]
  }
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005604:	f7fb feb6 	bl	8001374 <HAL_GetTick>
 8005608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d10e      	bne.n	8005636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f82f 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e025      	b.n	8005682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d10e      	bne.n	8005662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f819 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e00f      	b.n	8005682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b09c      	sub	sp, #112	; 0x70
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	e0a9      	b.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	f000 80a5 	beq.w	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a6:	f7fb fe65 	bl	8001374 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <UART_WaitOnFlagUntilTimeout+0x32>
 80056b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d140      	bne.n	800573e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d0:	667b      	str	r3, [r7, #100]	; 0x64
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80056e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	663b      	str	r3, [r7, #96]	; 0x60
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800570e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e069      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d051      	beq.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575a:	d149      	bne.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005764:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800577a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
 8005786:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800578a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e6      	bne.n	8005766 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	613b      	str	r3, [r7, #16]
   return(result);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057b8:	623a      	str	r2, [r7, #32]
 80057ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	69f9      	ldr	r1, [r7, #28]
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e5      	bne.n	8005798 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e010      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	429a      	cmp	r2, r3
 800580c:	f43f af46 	beq.w	800569c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3770      	adds	r7, #112	; 0x70
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800581c:	b480      	push	{r7}
 800581e:	b0a3      	sub	sp, #140	; 0x8c
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	d10e      	bne.n	800586e <UART_Start_Receive_IT+0x52>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <UART_Start_Receive_IT+0x48>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800585e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005862:	e02d      	b.n	80058c0 <UART_Start_Receive_IT+0xa4>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	22ff      	movs	r2, #255	; 0xff
 8005868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800586c:	e028      	b.n	80058c0 <UART_Start_Receive_IT+0xa4>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10d      	bne.n	8005892 <UART_Start_Receive_IT+0x76>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <UART_Start_Receive_IT+0x6c>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	22ff      	movs	r2, #255	; 0xff
 8005882:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005886:	e01b      	b.n	80058c0 <UART_Start_Receive_IT+0xa4>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	227f      	movs	r2, #127	; 0x7f
 800588c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005890:	e016      	b.n	80058c0 <UART_Start_Receive_IT+0xa4>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800589a:	d10d      	bne.n	80058b8 <UART_Start_Receive_IT+0x9c>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <UART_Start_Receive_IT+0x92>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	227f      	movs	r2, #127	; 0x7f
 80058a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ac:	e008      	b.n	80058c0 <UART_Start_Receive_IT+0xa4>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	223f      	movs	r2, #63	; 0x3f
 80058b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058b6:	e003      	b.n	80058c0 <UART_Start_Receive_IT+0xa4>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2222      	movs	r2, #34	; 0x22
 80058cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80058e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80058f4:	673a      	str	r2, [r7, #112]	; 0x70
 80058f6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80058fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e3      	bne.n	80058d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800590c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005910:	d153      	bne.n	80059ba <UART_Start_Receive_IT+0x19e>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005918:	88fa      	ldrh	r2, [r7, #6]
 800591a:	429a      	cmp	r2, r3
 800591c:	d34d      	bcc.n	80059ba <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005926:	d107      	bne.n	8005938 <UART_Start_Receive_IT+0x11c>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a4b      	ldr	r2, [pc, #300]	; (8005a60 <UART_Start_Receive_IT+0x244>)
 8005934:	671a      	str	r2, [r3, #112]	; 0x70
 8005936:	e002      	b.n	800593e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a4a      	ldr	r2, [pc, #296]	; (8005a64 <UART_Start_Receive_IT+0x248>)
 800593c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01a      	beq.n	8005984 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800595c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005972:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005976:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800597e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e4      	bne.n	800594e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3308      	adds	r3, #8
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3308      	adds	r3, #8
 80059a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80059a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80059a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e5      	bne.n	8005984 <UART_Start_Receive_IT+0x168>
 80059b8:	e04a      	b.n	8005a50 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c2:	d107      	bne.n	80059d4 <UART_Start_Receive_IT+0x1b8>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <UART_Start_Receive_IT+0x24c>)
 80059d0:	671a      	str	r2, [r3, #112]	; 0x70
 80059d2:	e002      	b.n	80059da <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <UART_Start_Receive_IT+0x250>)
 80059d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d019      	beq.n	8005a1e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80059fe:	677b      	str	r3, [r7, #116]	; 0x74
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e6      	bne.n	80059ea <UART_Start_Receive_IT+0x1ce>
 8005a1c:	e018      	b.n	8005a50 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f043 0320 	orr.w	r3, r3, #32
 8005a32:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e6      	bne.n	8005a1e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	378c      	adds	r7, #140	; 0x8c
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	08006179 	.word	0x08006179
 8005a64:	08005e81 	.word	0x08005e81
 8005a68:	08005d1f 	.word	0x08005d1f
 8005a6c:	08005bbf 	.word	0x08005bbf

08005a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b095      	sub	sp, #84	; 0x54
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
 8005a98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e6      	bne.n	8005a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	f023 0301 	bic.w	r3, r3, #1
 8005ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e3      	bne.n	8005aaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d118      	bne.n	8005b1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	647b      	str	r3, [r7, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6979      	ldr	r1, [r7, #20]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	613b      	str	r3, [r7, #16]
   return(result);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005b30:	bf00      	nop
 8005b32:	3754      	adds	r7, #84	; 0x54
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff f996 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6979      	ldr	r1, [r7, #20]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e6      	bne.n	8005b70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff f961 	bl	8004e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bb6:	bf00      	nop
 8005bb8:	3720      	adds	r7, #32
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b096      	sub	sp, #88	; 0x58
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd6:	2b22      	cmp	r3, #34	; 0x22
 8005bd8:	f040 8095 	bne.w	8005d06 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005be6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005bea:	b2d9      	uxtb	r1, r3
 8005bec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d178      	bne.n	8005d16 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c38:	653b      	str	r3, [r7, #80]	; 0x50
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c42:	647b      	str	r3, [r7, #68]	; 0x44
 8005c44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e6      	bne.n	8005c24 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	623b      	str	r3, [r7, #32]
   return(result);
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3308      	adds	r3, #8
 8005c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c76:	633a      	str	r2, [r7, #48]	; 0x30
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e5      	bne.n	8005c56 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d12e      	bne.n	8005cfe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0310 	bic.w	r3, r3, #16
 8005cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	69b9      	ldr	r1, [r7, #24]
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e6      	bne.n	8005ca6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d103      	bne.n	8005cee <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2210      	movs	r2, #16
 8005cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff f8d2 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cfc:	e00b      	b.n	8005d16 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fa22 	bl	8001148 <HAL_UART_RxCpltCallback>
}
 8005d04:	e007      	b.n	8005d16 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0208 	orr.w	r2, r2, #8
 8005d14:	619a      	str	r2, [r3, #24]
}
 8005d16:	bf00      	nop
 8005d18:	3758      	adds	r7, #88	; 0x58
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b096      	sub	sp, #88	; 0x58
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	2b22      	cmp	r3, #34	; 0x22
 8005d38:	f040 8095 	bne.w	8005e66 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d4c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d54:	4013      	ands	r3, r2
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	1c9a      	adds	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d178      	bne.n	8005e76 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da2:	643b      	str	r3, [r7, #64]	; 0x40
 8005da4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d12e      	bne.n	8005e5e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f023 0310 	bic.w	r3, r3, #16
 8005e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6979      	ldr	r1, [r7, #20]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	613b      	str	r3, [r7, #16]
   return(result);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e6      	bne.n	8005e06 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d103      	bne.n	8005e4e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff f822 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e5c:	e00b      	b.n	8005e76 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fb f972 	bl	8001148 <HAL_UART_RxCpltCallback>
}
 8005e64:	e007      	b.n	8005e76 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0208 	orr.w	r2, r2, #8
 8005e74:	619a      	str	r2, [r3, #24]
}
 8005e76:	bf00      	nop
 8005e78:	3758      	adds	r7, #88	; 0x58
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b0a6      	sub	sp, #152	; 0x98
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e8e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	2b22      	cmp	r3, #34	; 0x22
 8005eb8:	f040 814f 	bne.w	800615a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ec2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ec6:	e0f6      	b.n	80060b6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ed2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005ed6:	b2d9      	uxtb	r1, r3
 8005ed8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	400a      	ands	r2, r1
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d053      	beq.n	8005fc2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d011      	beq.n	8005f4a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f40:	f043 0201 	orr.w	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2202      	movs	r2, #2
 8005f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f70:	f043 0204 	orr.w	r2, r3, #4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d011      	beq.n	8005faa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2204      	movs	r2, #4
 8005f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa0:	f043 0202 	orr.w	r2, r3, #2
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d006      	beq.n	8005fc2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fe ff69 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d173      	bne.n	80060b6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ff2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005ff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e4      	bne.n	8005fce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3308      	adds	r3, #8
 800600a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3308      	adds	r3, #8
 8006026:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006028:	657a      	str	r2, [r7, #84]	; 0x54
 800602a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800602e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e3      	bne.n	8006004 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d12e      	bne.n	80060b0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	67bb      	str	r3, [r7, #120]	; 0x78
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006076:	643b      	str	r3, [r7, #64]	; 0x40
 8006078:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800607c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e6      	bne.n	8006058 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d103      	bne.n	80060a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2210      	movs	r2, #16
 800609e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fe fef9 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
 80060ae:	e002      	b.n	80060b6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fb f849 	bl	8001148 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d006      	beq.n	80060cc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80060be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f47f aefe 	bne.w	8005ec8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d045      	beq.n	800616a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d23e      	bcs.n	800616a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006102:	673b      	str	r3, [r7, #112]	; 0x70
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800610c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e5      	bne.n	80060ec <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a14      	ldr	r2, [pc, #80]	; (8006174 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006124:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	60bb      	str	r3, [r7, #8]
   return(result);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f043 0320 	orr.w	r3, r3, #32
 800613a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6979      	ldr	r1, [r7, #20]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	613b      	str	r3, [r7, #16]
   return(result);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006158:	e007      	b.n	800616a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0208 	orr.w	r2, r2, #8
 8006168:	619a      	str	r2, [r3, #24]
}
 800616a:	bf00      	nop
 800616c:	3798      	adds	r7, #152	; 0x98
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	08005bbf 	.word	0x08005bbf

08006178 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b0a8      	sub	sp, #160	; 0xa0
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006186:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	2b22      	cmp	r3, #34	; 0x22
 80061b0:	f040 8153 	bne.w	800645a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061be:	e0fa      	b.n	80063b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80061d2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80061d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80061da:	4013      	ands	r3, r2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e8:	1c9a      	adds	r2, r3, #2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800620a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	2b00      	cmp	r3, #0
 8006214:	d053      	beq.n	80062be <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d011      	beq.n	8006246 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006222:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2201      	movs	r2, #1
 8006234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800623c:	f043 0201 	orr.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00b      	beq.n	8006276 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2202      	movs	r2, #2
 8006264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d011      	beq.n	80062a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2204      	movs	r2, #4
 8006294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629c:	f043 0202 	orr.w	r2, r3, #2
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fe fdeb 	bl	8004e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d175      	bne.n	80063b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062ee:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e4      	bne.n	80062ca <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3308      	adds	r3, #8
 8006306:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006328:	65ba      	str	r2, [r7, #88]	; 0x58
 800632a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800632e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e1      	bne.n	8006300 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d12e      	bne.n	80063b0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	f023 0310 	bic.w	r3, r3, #16
 800636c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006376:	647b      	str	r3, [r7, #68]	; 0x44
 8006378:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800637c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e6      	bne.n	8006358 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b10      	cmp	r3, #16
 8006396:	d103      	bne.n	80063a0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2210      	movs	r2, #16
 800639e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fe fd79 	bl	8004ea0 <HAL_UARTEx_RxEventCallback>
 80063ae:	e002      	b.n	80063b6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fa fec9 	bl	8001148 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d006      	beq.n	80063cc <UART_RxISR_16BIT_FIFOEN+0x254>
 80063be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f47f aefa 	bne.w	80061c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063d2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d045      	beq.n	800646a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063e4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d23e      	bcs.n	800646a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	623b      	str	r3, [r7, #32]
   return(result);
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006402:	677b      	str	r3, [r7, #116]	; 0x74
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800640c:	633a      	str	r2, [r7, #48]	; 0x30
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a14      	ldr	r2, [pc, #80]	; (8006474 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006424:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	60fb      	str	r3, [r7, #12]
   return(result);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f043 0320 	orr.w	r3, r3, #32
 800643a:	673b      	str	r3, [r7, #112]	; 0x70
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	69b9      	ldr	r1, [r7, #24]
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	617b      	str	r3, [r7, #20]
   return(result);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e6      	bne.n	8006426 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006458:	e007      	b.n	800646a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0208 	orr.w	r2, r2, #8
 8006468:	619a      	str	r2, [r3, #24]
}
 800646a:	bf00      	nop
 800646c:	37a0      	adds	r7, #160	; 0xa0
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	08005d1f 	.word	0x08005d1f

08006478 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_UARTEx_DisableFifoMode+0x16>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e027      	b.n	800651a <HAL_UARTEx_DisableFifoMode+0x66>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2224      	movs	r2, #36	; 0x24
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800653a:	2302      	movs	r3, #2
 800653c:	e02d      	b.n	800659a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2224      	movs	r2, #36	; 0x24
 800654a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f850 	bl	8006620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e02d      	b.n	8006616 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2224      	movs	r2, #36	; 0x24
 80065c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f812 	bl	8006620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006640:	e031      	b.n	80066a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006642:	2308      	movs	r3, #8
 8006644:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006646:	2308      	movs	r3, #8
 8006648:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	0e5b      	lsrs	r3, r3, #25
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	0f5b      	lsrs	r3, r3, #29
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	7b3a      	ldrb	r2, [r7, #12]
 800666e:	4911      	ldr	r1, [pc, #68]	; (80066b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006670:	5c8a      	ldrb	r2, [r1, r2]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006676:	7b3a      	ldrb	r2, [r7, #12]
 8006678:	490f      	ldr	r1, [pc, #60]	; (80066b8 <UARTEx_SetNbDataToProcess+0x98>)
 800667a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800667c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	7b7a      	ldrb	r2, [r7, #13]
 800668c:	4909      	ldr	r1, [pc, #36]	; (80066b4 <UARTEx_SetNbDataToProcess+0x94>)
 800668e:	5c8a      	ldrb	r2, [r1, r2]
 8006690:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006694:	7b7a      	ldrb	r2, [r7, #13]
 8006696:	4908      	ldr	r1, [pc, #32]	; (80066b8 <UARTEx_SetNbDataToProcess+0x98>)
 8006698:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800669a:	fb93 f3f2 	sdiv	r3, r3, r2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	0800807c 	.word	0x0800807c
 80066b8:	08008084 	.word	0x08008084

080066bc <atoi>:
 80066bc:	220a      	movs	r2, #10
 80066be:	2100      	movs	r1, #0
 80066c0:	f000 b944 	b.w	800694c <strtol>

080066c4 <__errno>:
 80066c4:	4b01      	ldr	r3, [pc, #4]	; (80066cc <__errno+0x8>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	2000000c 	.word	0x2000000c

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4d0d      	ldr	r5, [pc, #52]	; (8006708 <__libc_init_array+0x38>)
 80066d4:	4c0d      	ldr	r4, [pc, #52]	; (800670c <__libc_init_array+0x3c>)
 80066d6:	1b64      	subs	r4, r4, r5
 80066d8:	10a4      	asrs	r4, r4, #2
 80066da:	2600      	movs	r6, #0
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	4d0b      	ldr	r5, [pc, #44]	; (8006710 <__libc_init_array+0x40>)
 80066e2:	4c0c      	ldr	r4, [pc, #48]	; (8006714 <__libc_init_array+0x44>)
 80066e4:	f001 faf2 	bl	8007ccc <_init>
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	2600      	movs	r6, #0
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	080082dc 	.word	0x080082dc
 800670c:	080082dc 	.word	0x080082dc
 8006710:	080082dc 	.word	0x080082dc
 8006714:	080082e0 	.word	0x080082e0

08006718 <memset>:
 8006718:	4402      	add	r2, r0
 800671a:	4603      	mov	r3, r0
 800671c:	4293      	cmp	r3, r2
 800671e:	d100      	bne.n	8006722 <memset+0xa>
 8006720:	4770      	bx	lr
 8006722:	f803 1b01 	strb.w	r1, [r3], #1
 8006726:	e7f9      	b.n	800671c <memset+0x4>

08006728 <sniprintf>:
 8006728:	b40c      	push	{r2, r3}
 800672a:	b530      	push	{r4, r5, lr}
 800672c:	4b17      	ldr	r3, [pc, #92]	; (800678c <sniprintf+0x64>)
 800672e:	1e0c      	subs	r4, r1, #0
 8006730:	681d      	ldr	r5, [r3, #0]
 8006732:	b09d      	sub	sp, #116	; 0x74
 8006734:	da08      	bge.n	8006748 <sniprintf+0x20>
 8006736:	238b      	movs	r3, #139	; 0x8b
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	f04f 30ff 	mov.w	r0, #4294967295
 800673e:	b01d      	add	sp, #116	; 0x74
 8006740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006744:	b002      	add	sp, #8
 8006746:	4770      	bx	lr
 8006748:	f44f 7302 	mov.w	r3, #520	; 0x208
 800674c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006750:	bf14      	ite	ne
 8006752:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006756:	4623      	moveq	r3, r4
 8006758:	9304      	str	r3, [sp, #16]
 800675a:	9307      	str	r3, [sp, #28]
 800675c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006760:	9002      	str	r0, [sp, #8]
 8006762:	9006      	str	r0, [sp, #24]
 8006764:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006768:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800676a:	ab21      	add	r3, sp, #132	; 0x84
 800676c:	a902      	add	r1, sp, #8
 800676e:	4628      	mov	r0, r5
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	f000 fa69 	bl	8006c48 <_svfiprintf_r>
 8006776:	1c43      	adds	r3, r0, #1
 8006778:	bfbc      	itt	lt
 800677a:	238b      	movlt	r3, #139	; 0x8b
 800677c:	602b      	strlt	r3, [r5, #0]
 800677e:	2c00      	cmp	r4, #0
 8006780:	d0dd      	beq.n	800673e <sniprintf+0x16>
 8006782:	9b02      	ldr	r3, [sp, #8]
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e7d9      	b.n	800673e <sniprintf+0x16>
 800678a:	bf00      	nop
 800678c:	2000000c 	.word	0x2000000c

08006790 <strtok>:
 8006790:	4b16      	ldr	r3, [pc, #88]	; (80067ec <strtok+0x5c>)
 8006792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006794:	681e      	ldr	r6, [r3, #0]
 8006796:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006798:	4605      	mov	r5, r0
 800679a:	b9fc      	cbnz	r4, 80067dc <strtok+0x4c>
 800679c:	2050      	movs	r0, #80	; 0x50
 800679e:	9101      	str	r1, [sp, #4]
 80067a0:	f000 f90e 	bl	80069c0 <malloc>
 80067a4:	9901      	ldr	r1, [sp, #4]
 80067a6:	65b0      	str	r0, [r6, #88]	; 0x58
 80067a8:	4602      	mov	r2, r0
 80067aa:	b920      	cbnz	r0, 80067b6 <strtok+0x26>
 80067ac:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <strtok+0x60>)
 80067ae:	4811      	ldr	r0, [pc, #68]	; (80067f4 <strtok+0x64>)
 80067b0:	2157      	movs	r1, #87	; 0x57
 80067b2:	f000 f8d5 	bl	8006960 <__assert_func>
 80067b6:	e9c0 4400 	strd	r4, r4, [r0]
 80067ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80067be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80067c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80067c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80067ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80067ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80067d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80067d6:	6184      	str	r4, [r0, #24]
 80067d8:	7704      	strb	r4, [r0, #28]
 80067da:	6244      	str	r4, [r0, #36]	; 0x24
 80067dc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80067de:	2301      	movs	r3, #1
 80067e0:	4628      	mov	r0, r5
 80067e2:	b002      	add	sp, #8
 80067e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067e8:	f000 b806 	b.w	80067f8 <__strtok_r>
 80067ec:	2000000c 	.word	0x2000000c
 80067f0:	08008090 	.word	0x08008090
 80067f4:	080080a7 	.word	0x080080a7

080067f8 <__strtok_r>:
 80067f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fa:	b908      	cbnz	r0, 8006800 <__strtok_r+0x8>
 80067fc:	6810      	ldr	r0, [r2, #0]
 80067fe:	b188      	cbz	r0, 8006824 <__strtok_r+0x2c>
 8006800:	4604      	mov	r4, r0
 8006802:	4620      	mov	r0, r4
 8006804:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006808:	460f      	mov	r7, r1
 800680a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800680e:	b91e      	cbnz	r6, 8006818 <__strtok_r+0x20>
 8006810:	b965      	cbnz	r5, 800682c <__strtok_r+0x34>
 8006812:	6015      	str	r5, [r2, #0]
 8006814:	4628      	mov	r0, r5
 8006816:	e005      	b.n	8006824 <__strtok_r+0x2c>
 8006818:	42b5      	cmp	r5, r6
 800681a:	d1f6      	bne.n	800680a <__strtok_r+0x12>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <__strtok_r+0xa>
 8006820:	6014      	str	r4, [r2, #0]
 8006822:	7003      	strb	r3, [r0, #0]
 8006824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006826:	461c      	mov	r4, r3
 8006828:	e00c      	b.n	8006844 <__strtok_r+0x4c>
 800682a:	b915      	cbnz	r5, 8006832 <__strtok_r+0x3a>
 800682c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006830:	460e      	mov	r6, r1
 8006832:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006836:	42ab      	cmp	r3, r5
 8006838:	d1f7      	bne.n	800682a <__strtok_r+0x32>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f3      	beq.n	8006826 <__strtok_r+0x2e>
 800683e:	2300      	movs	r3, #0
 8006840:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006844:	6014      	str	r4, [r2, #0]
 8006846:	e7ed      	b.n	8006824 <__strtok_r+0x2c>

08006848 <_strtol_l.constprop.0>:
 8006848:	2b01      	cmp	r3, #1
 800684a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684e:	d001      	beq.n	8006854 <_strtol_l.constprop.0+0xc>
 8006850:	2b24      	cmp	r3, #36	; 0x24
 8006852:	d906      	bls.n	8006862 <_strtol_l.constprop.0+0x1a>
 8006854:	f7ff ff36 	bl	80066c4 <__errno>
 8006858:	2316      	movs	r3, #22
 800685a:	6003      	str	r3, [r0, #0]
 800685c:	2000      	movs	r0, #0
 800685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006862:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006948 <_strtol_l.constprop.0+0x100>
 8006866:	460d      	mov	r5, r1
 8006868:	462e      	mov	r6, r5
 800686a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800686e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006872:	f017 0708 	ands.w	r7, r7, #8
 8006876:	d1f7      	bne.n	8006868 <_strtol_l.constprop.0+0x20>
 8006878:	2c2d      	cmp	r4, #45	; 0x2d
 800687a:	d132      	bne.n	80068e2 <_strtol_l.constprop.0+0x9a>
 800687c:	782c      	ldrb	r4, [r5, #0]
 800687e:	2701      	movs	r7, #1
 8006880:	1cb5      	adds	r5, r6, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d05b      	beq.n	800693e <_strtol_l.constprop.0+0xf6>
 8006886:	2b10      	cmp	r3, #16
 8006888:	d109      	bne.n	800689e <_strtol_l.constprop.0+0x56>
 800688a:	2c30      	cmp	r4, #48	; 0x30
 800688c:	d107      	bne.n	800689e <_strtol_l.constprop.0+0x56>
 800688e:	782c      	ldrb	r4, [r5, #0]
 8006890:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006894:	2c58      	cmp	r4, #88	; 0x58
 8006896:	d14d      	bne.n	8006934 <_strtol_l.constprop.0+0xec>
 8006898:	786c      	ldrb	r4, [r5, #1]
 800689a:	2310      	movs	r3, #16
 800689c:	3502      	adds	r5, #2
 800689e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80068a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80068a6:	f04f 0c00 	mov.w	ip, #0
 80068aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80068ae:	4666      	mov	r6, ip
 80068b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80068b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80068b8:	f1be 0f09 	cmp.w	lr, #9
 80068bc:	d816      	bhi.n	80068ec <_strtol_l.constprop.0+0xa4>
 80068be:	4674      	mov	r4, lr
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	dd24      	ble.n	800690e <_strtol_l.constprop.0+0xc6>
 80068c4:	f1bc 0f00 	cmp.w	ip, #0
 80068c8:	db1e      	blt.n	8006908 <_strtol_l.constprop.0+0xc0>
 80068ca:	45b1      	cmp	r9, r6
 80068cc:	d31c      	bcc.n	8006908 <_strtol_l.constprop.0+0xc0>
 80068ce:	d101      	bne.n	80068d4 <_strtol_l.constprop.0+0x8c>
 80068d0:	45a2      	cmp	sl, r4
 80068d2:	db19      	blt.n	8006908 <_strtol_l.constprop.0+0xc0>
 80068d4:	fb06 4603 	mla	r6, r6, r3, r4
 80068d8:	f04f 0c01 	mov.w	ip, #1
 80068dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068e0:	e7e8      	b.n	80068b4 <_strtol_l.constprop.0+0x6c>
 80068e2:	2c2b      	cmp	r4, #43	; 0x2b
 80068e4:	bf04      	itt	eq
 80068e6:	782c      	ldrbeq	r4, [r5, #0]
 80068e8:	1cb5      	addeq	r5, r6, #2
 80068ea:	e7ca      	b.n	8006882 <_strtol_l.constprop.0+0x3a>
 80068ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80068f0:	f1be 0f19 	cmp.w	lr, #25
 80068f4:	d801      	bhi.n	80068fa <_strtol_l.constprop.0+0xb2>
 80068f6:	3c37      	subs	r4, #55	; 0x37
 80068f8:	e7e2      	b.n	80068c0 <_strtol_l.constprop.0+0x78>
 80068fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80068fe:	f1be 0f19 	cmp.w	lr, #25
 8006902:	d804      	bhi.n	800690e <_strtol_l.constprop.0+0xc6>
 8006904:	3c57      	subs	r4, #87	; 0x57
 8006906:	e7db      	b.n	80068c0 <_strtol_l.constprop.0+0x78>
 8006908:	f04f 3cff 	mov.w	ip, #4294967295
 800690c:	e7e6      	b.n	80068dc <_strtol_l.constprop.0+0x94>
 800690e:	f1bc 0f00 	cmp.w	ip, #0
 8006912:	da05      	bge.n	8006920 <_strtol_l.constprop.0+0xd8>
 8006914:	2322      	movs	r3, #34	; 0x22
 8006916:	6003      	str	r3, [r0, #0]
 8006918:	4646      	mov	r6, r8
 800691a:	b942      	cbnz	r2, 800692e <_strtol_l.constprop.0+0xe6>
 800691c:	4630      	mov	r0, r6
 800691e:	e79e      	b.n	800685e <_strtol_l.constprop.0+0x16>
 8006920:	b107      	cbz	r7, 8006924 <_strtol_l.constprop.0+0xdc>
 8006922:	4276      	negs	r6, r6
 8006924:	2a00      	cmp	r2, #0
 8006926:	d0f9      	beq.n	800691c <_strtol_l.constprop.0+0xd4>
 8006928:	f1bc 0f00 	cmp.w	ip, #0
 800692c:	d000      	beq.n	8006930 <_strtol_l.constprop.0+0xe8>
 800692e:	1e69      	subs	r1, r5, #1
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	e7f3      	b.n	800691c <_strtol_l.constprop.0+0xd4>
 8006934:	2430      	movs	r4, #48	; 0x30
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1b1      	bne.n	800689e <_strtol_l.constprop.0+0x56>
 800693a:	2308      	movs	r3, #8
 800693c:	e7af      	b.n	800689e <_strtol_l.constprop.0+0x56>
 800693e:	2c30      	cmp	r4, #48	; 0x30
 8006940:	d0a5      	beq.n	800688e <_strtol_l.constprop.0+0x46>
 8006942:	230a      	movs	r3, #10
 8006944:	e7ab      	b.n	800689e <_strtol_l.constprop.0+0x56>
 8006946:	bf00      	nop
 8006948:	08008141 	.word	0x08008141

0800694c <strtol>:
 800694c:	4613      	mov	r3, r2
 800694e:	460a      	mov	r2, r1
 8006950:	4601      	mov	r1, r0
 8006952:	4802      	ldr	r0, [pc, #8]	; (800695c <strtol+0x10>)
 8006954:	6800      	ldr	r0, [r0, #0]
 8006956:	f7ff bf77 	b.w	8006848 <_strtol_l.constprop.0>
 800695a:	bf00      	nop
 800695c:	2000000c 	.word	0x2000000c

08006960 <__assert_func>:
 8006960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006962:	4614      	mov	r4, r2
 8006964:	461a      	mov	r2, r3
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <__assert_func+0x2c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4605      	mov	r5, r0
 800696c:	68d8      	ldr	r0, [r3, #12]
 800696e:	b14c      	cbz	r4, 8006984 <__assert_func+0x24>
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <__assert_func+0x30>)
 8006972:	9100      	str	r1, [sp, #0]
 8006974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006978:	4906      	ldr	r1, [pc, #24]	; (8006994 <__assert_func+0x34>)
 800697a:	462b      	mov	r3, r5
 800697c:	f000 f80e 	bl	800699c <fiprintf>
 8006980:	f000 fe20 	bl	80075c4 <abort>
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <__assert_func+0x38>)
 8006986:	461c      	mov	r4, r3
 8006988:	e7f3      	b.n	8006972 <__assert_func+0x12>
 800698a:	bf00      	nop
 800698c:	2000000c 	.word	0x2000000c
 8006990:	08008104 	.word	0x08008104
 8006994:	08008111 	.word	0x08008111
 8006998:	0800813f 	.word	0x0800813f

0800699c <fiprintf>:
 800699c:	b40e      	push	{r1, r2, r3}
 800699e:	b503      	push	{r0, r1, lr}
 80069a0:	4601      	mov	r1, r0
 80069a2:	ab03      	add	r3, sp, #12
 80069a4:	4805      	ldr	r0, [pc, #20]	; (80069bc <fiprintf+0x20>)
 80069a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	f000 fa75 	bl	8006e9c <_vfiprintf_r>
 80069b2:	b002      	add	sp, #8
 80069b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b8:	b003      	add	sp, #12
 80069ba:	4770      	bx	lr
 80069bc:	2000000c 	.word	0x2000000c

080069c0 <malloc>:
 80069c0:	4b02      	ldr	r3, [pc, #8]	; (80069cc <malloc+0xc>)
 80069c2:	4601      	mov	r1, r0
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f000 b86f 	b.w	8006aa8 <_malloc_r>
 80069ca:	bf00      	nop
 80069cc:	2000000c 	.word	0x2000000c

080069d0 <_free_r>:
 80069d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d044      	beq.n	8006a60 <_free_r+0x90>
 80069d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069da:	9001      	str	r0, [sp, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f1a1 0404 	sub.w	r4, r1, #4
 80069e2:	bfb8      	it	lt
 80069e4:	18e4      	addlt	r4, r4, r3
 80069e6:	f001 f83d 	bl	8007a64 <__malloc_lock>
 80069ea:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <_free_r+0x94>)
 80069ec:	9801      	ldr	r0, [sp, #4]
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	b933      	cbnz	r3, 8006a00 <_free_r+0x30>
 80069f2:	6063      	str	r3, [r4, #4]
 80069f4:	6014      	str	r4, [r2, #0]
 80069f6:	b003      	add	sp, #12
 80069f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069fc:	f001 b838 	b.w	8007a70 <__malloc_unlock>
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	d908      	bls.n	8006a16 <_free_r+0x46>
 8006a04:	6825      	ldr	r5, [r4, #0]
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	bf01      	itttt	eq
 8006a0c:	6819      	ldreq	r1, [r3, #0]
 8006a0e:	685b      	ldreq	r3, [r3, #4]
 8006a10:	1949      	addeq	r1, r1, r5
 8006a12:	6021      	streq	r1, [r4, #0]
 8006a14:	e7ed      	b.n	80069f2 <_free_r+0x22>
 8006a16:	461a      	mov	r2, r3
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	b10b      	cbz	r3, 8006a20 <_free_r+0x50>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d9fa      	bls.n	8006a16 <_free_r+0x46>
 8006a20:	6811      	ldr	r1, [r2, #0]
 8006a22:	1855      	adds	r5, r2, r1
 8006a24:	42a5      	cmp	r5, r4
 8006a26:	d10b      	bne.n	8006a40 <_free_r+0x70>
 8006a28:	6824      	ldr	r4, [r4, #0]
 8006a2a:	4421      	add	r1, r4
 8006a2c:	1854      	adds	r4, r2, r1
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	6011      	str	r1, [r2, #0]
 8006a32:	d1e0      	bne.n	80069f6 <_free_r+0x26>
 8006a34:	681c      	ldr	r4, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	6053      	str	r3, [r2, #4]
 8006a3a:	4421      	add	r1, r4
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	e7da      	b.n	80069f6 <_free_r+0x26>
 8006a40:	d902      	bls.n	8006a48 <_free_r+0x78>
 8006a42:	230c      	movs	r3, #12
 8006a44:	6003      	str	r3, [r0, #0]
 8006a46:	e7d6      	b.n	80069f6 <_free_r+0x26>
 8006a48:	6825      	ldr	r5, [r4, #0]
 8006a4a:	1961      	adds	r1, r4, r5
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	bf04      	itt	eq
 8006a50:	6819      	ldreq	r1, [r3, #0]
 8006a52:	685b      	ldreq	r3, [r3, #4]
 8006a54:	6063      	str	r3, [r4, #4]
 8006a56:	bf04      	itt	eq
 8006a58:	1949      	addeq	r1, r1, r5
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	6054      	str	r4, [r2, #4]
 8006a5e:	e7ca      	b.n	80069f6 <_free_r+0x26>
 8006a60:	b003      	add	sp, #12
 8006a62:	bd30      	pop	{r4, r5, pc}
 8006a64:	20000274 	.word	0x20000274

08006a68 <sbrk_aligned>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4e0e      	ldr	r6, [pc, #56]	; (8006aa4 <sbrk_aligned+0x3c>)
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	6831      	ldr	r1, [r6, #0]
 8006a70:	4605      	mov	r5, r0
 8006a72:	b911      	cbnz	r1, 8006a7a <sbrk_aligned+0x12>
 8006a74:	f000 fcd6 	bl	8007424 <_sbrk_r>
 8006a78:	6030      	str	r0, [r6, #0]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 fcd1 	bl	8007424 <_sbrk_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d00a      	beq.n	8006a9c <sbrk_aligned+0x34>
 8006a86:	1cc4      	adds	r4, r0, #3
 8006a88:	f024 0403 	bic.w	r4, r4, #3
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d007      	beq.n	8006aa0 <sbrk_aligned+0x38>
 8006a90:	1a21      	subs	r1, r4, r0
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 fcc6 	bl	8007424 <_sbrk_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d101      	bne.n	8006aa0 <sbrk_aligned+0x38>
 8006a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	20000278 	.word	0x20000278

08006aa8 <_malloc_r>:
 8006aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aac:	1ccd      	adds	r5, r1, #3
 8006aae:	f025 0503 	bic.w	r5, r5, #3
 8006ab2:	3508      	adds	r5, #8
 8006ab4:	2d0c      	cmp	r5, #12
 8006ab6:	bf38      	it	cc
 8006ab8:	250c      	movcc	r5, #12
 8006aba:	2d00      	cmp	r5, #0
 8006abc:	4607      	mov	r7, r0
 8006abe:	db01      	blt.n	8006ac4 <_malloc_r+0x1c>
 8006ac0:	42a9      	cmp	r1, r5
 8006ac2:	d905      	bls.n	8006ad0 <_malloc_r+0x28>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	2600      	movs	r6, #0
 8006aca:	4630      	mov	r0, r6
 8006acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad0:	4e2e      	ldr	r6, [pc, #184]	; (8006b8c <_malloc_r+0xe4>)
 8006ad2:	f000 ffc7 	bl	8007a64 <__malloc_lock>
 8006ad6:	6833      	ldr	r3, [r6, #0]
 8006ad8:	461c      	mov	r4, r3
 8006ada:	bb34      	cbnz	r4, 8006b2a <_malloc_r+0x82>
 8006adc:	4629      	mov	r1, r5
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f7ff ffc2 	bl	8006a68 <sbrk_aligned>
 8006ae4:	1c43      	adds	r3, r0, #1
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	d14d      	bne.n	8006b86 <_malloc_r+0xde>
 8006aea:	6834      	ldr	r4, [r6, #0]
 8006aec:	4626      	mov	r6, r4
 8006aee:	2e00      	cmp	r6, #0
 8006af0:	d140      	bne.n	8006b74 <_malloc_r+0xcc>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	4631      	mov	r1, r6
 8006af6:	4638      	mov	r0, r7
 8006af8:	eb04 0803 	add.w	r8, r4, r3
 8006afc:	f000 fc92 	bl	8007424 <_sbrk_r>
 8006b00:	4580      	cmp	r8, r0
 8006b02:	d13a      	bne.n	8006b7a <_malloc_r+0xd2>
 8006b04:	6821      	ldr	r1, [r4, #0]
 8006b06:	3503      	adds	r5, #3
 8006b08:	1a6d      	subs	r5, r5, r1
 8006b0a:	f025 0503 	bic.w	r5, r5, #3
 8006b0e:	3508      	adds	r5, #8
 8006b10:	2d0c      	cmp	r5, #12
 8006b12:	bf38      	it	cc
 8006b14:	250c      	movcc	r5, #12
 8006b16:	4629      	mov	r1, r5
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f7ff ffa5 	bl	8006a68 <sbrk_aligned>
 8006b1e:	3001      	adds	r0, #1
 8006b20:	d02b      	beq.n	8006b7a <_malloc_r+0xd2>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	442b      	add	r3, r5
 8006b26:	6023      	str	r3, [r4, #0]
 8006b28:	e00e      	b.n	8006b48 <_malloc_r+0xa0>
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	1b52      	subs	r2, r2, r5
 8006b2e:	d41e      	bmi.n	8006b6e <_malloc_r+0xc6>
 8006b30:	2a0b      	cmp	r2, #11
 8006b32:	d916      	bls.n	8006b62 <_malloc_r+0xba>
 8006b34:	1961      	adds	r1, r4, r5
 8006b36:	42a3      	cmp	r3, r4
 8006b38:	6025      	str	r5, [r4, #0]
 8006b3a:	bf18      	it	ne
 8006b3c:	6059      	strne	r1, [r3, #4]
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	bf08      	it	eq
 8006b42:	6031      	streq	r1, [r6, #0]
 8006b44:	5162      	str	r2, [r4, r5]
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f104 060b 	add.w	r6, r4, #11
 8006b4e:	f000 ff8f 	bl	8007a70 <__malloc_unlock>
 8006b52:	f026 0607 	bic.w	r6, r6, #7
 8006b56:	1d23      	adds	r3, r4, #4
 8006b58:	1af2      	subs	r2, r6, r3
 8006b5a:	d0b6      	beq.n	8006aca <_malloc_r+0x22>
 8006b5c:	1b9b      	subs	r3, r3, r6
 8006b5e:	50a3      	str	r3, [r4, r2]
 8006b60:	e7b3      	b.n	8006aca <_malloc_r+0x22>
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	bf0c      	ite	eq
 8006b68:	6032      	streq	r2, [r6, #0]
 8006b6a:	605a      	strne	r2, [r3, #4]
 8006b6c:	e7ec      	b.n	8006b48 <_malloc_r+0xa0>
 8006b6e:	4623      	mov	r3, r4
 8006b70:	6864      	ldr	r4, [r4, #4]
 8006b72:	e7b2      	b.n	8006ada <_malloc_r+0x32>
 8006b74:	4634      	mov	r4, r6
 8006b76:	6876      	ldr	r6, [r6, #4]
 8006b78:	e7b9      	b.n	8006aee <_malloc_r+0x46>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	603b      	str	r3, [r7, #0]
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f000 ff76 	bl	8007a70 <__malloc_unlock>
 8006b84:	e7a1      	b.n	8006aca <_malloc_r+0x22>
 8006b86:	6025      	str	r5, [r4, #0]
 8006b88:	e7de      	b.n	8006b48 <_malloc_r+0xa0>
 8006b8a:	bf00      	nop
 8006b8c:	20000274 	.word	0x20000274

08006b90 <__ssputs_r>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	688e      	ldr	r6, [r1, #8]
 8006b96:	429e      	cmp	r6, r3
 8006b98:	4682      	mov	sl, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	4690      	mov	r8, r2
 8006b9e:	461f      	mov	r7, r3
 8006ba0:	d838      	bhi.n	8006c14 <__ssputs_r+0x84>
 8006ba2:	898a      	ldrh	r2, [r1, #12]
 8006ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ba8:	d032      	beq.n	8006c10 <__ssputs_r+0x80>
 8006baa:	6825      	ldr	r5, [r4, #0]
 8006bac:	6909      	ldr	r1, [r1, #16]
 8006bae:	eba5 0901 	sub.w	r9, r5, r1
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	444b      	add	r3, r9
 8006bc0:	106d      	asrs	r5, r5, #1
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	bf38      	it	cc
 8006bc6:	461d      	movcc	r5, r3
 8006bc8:	0553      	lsls	r3, r2, #21
 8006bca:	d531      	bpl.n	8006c30 <__ssputs_r+0xa0>
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f7ff ff6b 	bl	8006aa8 <_malloc_r>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	b950      	cbnz	r0, 8006bec <__ssputs_r+0x5c>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	f8ca 3000 	str.w	r3, [sl]
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bec:	6921      	ldr	r1, [r4, #16]
 8006bee:	464a      	mov	r2, r9
 8006bf0:	f000 ff10 	bl	8007a14 <memcpy>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	6126      	str	r6, [r4, #16]
 8006c02:	6165      	str	r5, [r4, #20]
 8006c04:	444e      	add	r6, r9
 8006c06:	eba5 0509 	sub.w	r5, r5, r9
 8006c0a:	6026      	str	r6, [r4, #0]
 8006c0c:	60a5      	str	r5, [r4, #8]
 8006c0e:	463e      	mov	r6, r7
 8006c10:	42be      	cmp	r6, r7
 8006c12:	d900      	bls.n	8006c16 <__ssputs_r+0x86>
 8006c14:	463e      	mov	r6, r7
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	4632      	mov	r2, r6
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	f000 ff08 	bl	8007a30 <memmove>
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	1b9b      	subs	r3, r3, r6
 8006c24:	60a3      	str	r3, [r4, #8]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	4433      	add	r3, r6
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7db      	b.n	8006be8 <__ssputs_r+0x58>
 8006c30:	462a      	mov	r2, r5
 8006c32:	f000 ff23 	bl	8007a7c <_realloc_r>
 8006c36:	4606      	mov	r6, r0
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d1e1      	bne.n	8006c00 <__ssputs_r+0x70>
 8006c3c:	6921      	ldr	r1, [r4, #16]
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f7ff fec6 	bl	80069d0 <_free_r>
 8006c44:	e7c7      	b.n	8006bd6 <__ssputs_r+0x46>
	...

08006c48 <_svfiprintf_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	4698      	mov	r8, r3
 8006c4e:	898b      	ldrh	r3, [r1, #12]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	b09d      	sub	sp, #116	; 0x74
 8006c54:	4607      	mov	r7, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	4614      	mov	r4, r2
 8006c5a:	d50e      	bpl.n	8006c7a <_svfiprintf_r+0x32>
 8006c5c:	690b      	ldr	r3, [r1, #16]
 8006c5e:	b963      	cbnz	r3, 8006c7a <_svfiprintf_r+0x32>
 8006c60:	2140      	movs	r1, #64	; 0x40
 8006c62:	f7ff ff21 	bl	8006aa8 <_malloc_r>
 8006c66:	6028      	str	r0, [r5, #0]
 8006c68:	6128      	str	r0, [r5, #16]
 8006c6a:	b920      	cbnz	r0, 8006c76 <_svfiprintf_r+0x2e>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	e0d1      	b.n	8006e1a <_svfiprintf_r+0x1d2>
 8006c76:	2340      	movs	r3, #64	; 0x40
 8006c78:	616b      	str	r3, [r5, #20]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7e:	2320      	movs	r3, #32
 8006c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c88:	2330      	movs	r3, #48	; 0x30
 8006c8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e34 <_svfiprintf_r+0x1ec>
 8006c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c92:	f04f 0901 	mov.w	r9, #1
 8006c96:	4623      	mov	r3, r4
 8006c98:	469a      	mov	sl, r3
 8006c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c9e:	b10a      	cbz	r2, 8006ca4 <_svfiprintf_r+0x5c>
 8006ca0:	2a25      	cmp	r2, #37	; 0x25
 8006ca2:	d1f9      	bne.n	8006c98 <_svfiprintf_r+0x50>
 8006ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ca8:	d00b      	beq.n	8006cc2 <_svfiprintf_r+0x7a>
 8006caa:	465b      	mov	r3, fp
 8006cac:	4622      	mov	r2, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f7ff ff6d 	bl	8006b90 <__ssputs_r>
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f000 80aa 	beq.w	8006e10 <_svfiprintf_r+0x1c8>
 8006cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbe:	445a      	add	r2, fp
 8006cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 80a2 	beq.w	8006e10 <_svfiprintf_r+0x1c8>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd6:	f10a 0a01 	add.w	sl, sl, #1
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	9307      	str	r3, [sp, #28]
 8006cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce4:	4654      	mov	r4, sl
 8006ce6:	2205      	movs	r2, #5
 8006ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cec:	4851      	ldr	r0, [pc, #324]	; (8006e34 <_svfiprintf_r+0x1ec>)
 8006cee:	f7f9 faa7 	bl	8000240 <memchr>
 8006cf2:	9a04      	ldr	r2, [sp, #16]
 8006cf4:	b9d8      	cbnz	r0, 8006d2e <_svfiprintf_r+0xe6>
 8006cf6:	06d0      	lsls	r0, r2, #27
 8006cf8:	bf44      	itt	mi
 8006cfa:	2320      	movmi	r3, #32
 8006cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d00:	0711      	lsls	r1, r2, #28
 8006d02:	bf44      	itt	mi
 8006d04:	232b      	movmi	r3, #43	; 0x2b
 8006d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d10:	d015      	beq.n	8006d3e <_svfiprintf_r+0xf6>
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	4654      	mov	r4, sl
 8006d16:	2000      	movs	r0, #0
 8006d18:	f04f 0c0a 	mov.w	ip, #10
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d22:	3b30      	subs	r3, #48	; 0x30
 8006d24:	2b09      	cmp	r3, #9
 8006d26:	d94e      	bls.n	8006dc6 <_svfiprintf_r+0x17e>
 8006d28:	b1b0      	cbz	r0, 8006d58 <_svfiprintf_r+0x110>
 8006d2a:	9207      	str	r2, [sp, #28]
 8006d2c:	e014      	b.n	8006d58 <_svfiprintf_r+0x110>
 8006d2e:	eba0 0308 	sub.w	r3, r0, r8
 8006d32:	fa09 f303 	lsl.w	r3, r9, r3
 8006d36:	4313      	orrs	r3, r2
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	46a2      	mov	sl, r4
 8006d3c:	e7d2      	b.n	8006ce4 <_svfiprintf_r+0x9c>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	1d19      	adds	r1, r3, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	9103      	str	r1, [sp, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bfbb      	ittet	lt
 8006d4a:	425b      	neglt	r3, r3
 8006d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006d50:	9307      	strge	r3, [sp, #28]
 8006d52:	9307      	strlt	r3, [sp, #28]
 8006d54:	bfb8      	it	lt
 8006d56:	9204      	strlt	r2, [sp, #16]
 8006d58:	7823      	ldrb	r3, [r4, #0]
 8006d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d5c:	d10c      	bne.n	8006d78 <_svfiprintf_r+0x130>
 8006d5e:	7863      	ldrb	r3, [r4, #1]
 8006d60:	2b2a      	cmp	r3, #42	; 0x2a
 8006d62:	d135      	bne.n	8006dd0 <_svfiprintf_r+0x188>
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	1d1a      	adds	r2, r3, #4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	9203      	str	r2, [sp, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bfb8      	it	lt
 8006d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d74:	3402      	adds	r4, #2
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e44 <_svfiprintf_r+0x1fc>
 8006d7c:	7821      	ldrb	r1, [r4, #0]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	4650      	mov	r0, sl
 8006d82:	f7f9 fa5d 	bl	8000240 <memchr>
 8006d86:	b140      	cbz	r0, 8006d9a <_svfiprintf_r+0x152>
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	eba0 000a 	sub.w	r0, r0, sl
 8006d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	4303      	orrs	r3, r0
 8006d96:	3401      	adds	r4, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9e:	4826      	ldr	r0, [pc, #152]	; (8006e38 <_svfiprintf_r+0x1f0>)
 8006da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da4:	2206      	movs	r2, #6
 8006da6:	f7f9 fa4b 	bl	8000240 <memchr>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d038      	beq.n	8006e20 <_svfiprintf_r+0x1d8>
 8006dae:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <_svfiprintf_r+0x1f4>)
 8006db0:	bb1b      	cbnz	r3, 8006dfa <_svfiprintf_r+0x1b2>
 8006db2:	9b03      	ldr	r3, [sp, #12]
 8006db4:	3307      	adds	r3, #7
 8006db6:	f023 0307 	bic.w	r3, r3, #7
 8006dba:	3308      	adds	r3, #8
 8006dbc:	9303      	str	r3, [sp, #12]
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	4433      	add	r3, r6
 8006dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc4:	e767      	b.n	8006c96 <_svfiprintf_r+0x4e>
 8006dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dca:	460c      	mov	r4, r1
 8006dcc:	2001      	movs	r0, #1
 8006dce:	e7a5      	b.n	8006d1c <_svfiprintf_r+0xd4>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	9305      	str	r3, [sp, #20]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f04f 0c0a 	mov.w	ip, #10
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de2:	3a30      	subs	r2, #48	; 0x30
 8006de4:	2a09      	cmp	r2, #9
 8006de6:	d903      	bls.n	8006df0 <_svfiprintf_r+0x1a8>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0c5      	beq.n	8006d78 <_svfiprintf_r+0x130>
 8006dec:	9105      	str	r1, [sp, #20]
 8006dee:	e7c3      	b.n	8006d78 <_svfiprintf_r+0x130>
 8006df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df4:	4604      	mov	r4, r0
 8006df6:	2301      	movs	r3, #1
 8006df8:	e7f0      	b.n	8006ddc <_svfiprintf_r+0x194>
 8006dfa:	ab03      	add	r3, sp, #12
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	462a      	mov	r2, r5
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <_svfiprintf_r+0x1f8>)
 8006e02:	a904      	add	r1, sp, #16
 8006e04:	4638      	mov	r0, r7
 8006e06:	f3af 8000 	nop.w
 8006e0a:	1c42      	adds	r2, r0, #1
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	d1d6      	bne.n	8006dbe <_svfiprintf_r+0x176>
 8006e10:	89ab      	ldrh	r3, [r5, #12]
 8006e12:	065b      	lsls	r3, r3, #25
 8006e14:	f53f af2c 	bmi.w	8006c70 <_svfiprintf_r+0x28>
 8006e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1a:	b01d      	add	sp, #116	; 0x74
 8006e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e20:	ab03      	add	r3, sp, #12
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	462a      	mov	r2, r5
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <_svfiprintf_r+0x1f8>)
 8006e28:	a904      	add	r1, sp, #16
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f000 f9d4 	bl	80071d8 <_printf_i>
 8006e30:	e7eb      	b.n	8006e0a <_svfiprintf_r+0x1c2>
 8006e32:	bf00      	nop
 8006e34:	08008241 	.word	0x08008241
 8006e38:	0800824b 	.word	0x0800824b
 8006e3c:	00000000 	.word	0x00000000
 8006e40:	08006b91 	.word	0x08006b91
 8006e44:	08008247 	.word	0x08008247

08006e48 <__sfputc_r>:
 8006e48:	6893      	ldr	r3, [r2, #8]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	b410      	push	{r4}
 8006e50:	6093      	str	r3, [r2, #8]
 8006e52:	da08      	bge.n	8006e66 <__sfputc_r+0x1e>
 8006e54:	6994      	ldr	r4, [r2, #24]
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	db01      	blt.n	8006e5e <__sfputc_r+0x16>
 8006e5a:	290a      	cmp	r1, #10
 8006e5c:	d103      	bne.n	8006e66 <__sfputc_r+0x1e>
 8006e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e62:	f000 baef 	b.w	8007444 <__swbuf_r>
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	1c58      	adds	r0, r3, #1
 8006e6a:	6010      	str	r0, [r2, #0]
 8006e6c:	7019      	strb	r1, [r3, #0]
 8006e6e:	4608      	mov	r0, r1
 8006e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <__sfputs_r>:
 8006e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e78:	4606      	mov	r6, r0
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	18d5      	adds	r5, r2, r3
 8006e80:	42ac      	cmp	r4, r5
 8006e82:	d101      	bne.n	8006e88 <__sfputs_r+0x12>
 8006e84:	2000      	movs	r0, #0
 8006e86:	e007      	b.n	8006e98 <__sfputs_r+0x22>
 8006e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7ff ffda 	bl	8006e48 <__sfputc_r>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d1f3      	bne.n	8006e80 <__sfputs_r+0xa>
 8006e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e9c <_vfiprintf_r>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	b09d      	sub	sp, #116	; 0x74
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	4698      	mov	r8, r3
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	b118      	cbz	r0, 8006eb4 <_vfiprintf_r+0x18>
 8006eac:	6983      	ldr	r3, [r0, #24]
 8006eae:	b90b      	cbnz	r3, 8006eb4 <_vfiprintf_r+0x18>
 8006eb0:	f000 fcaa 	bl	8007808 <__sinit>
 8006eb4:	4b89      	ldr	r3, [pc, #548]	; (80070dc <_vfiprintf_r+0x240>)
 8006eb6:	429d      	cmp	r5, r3
 8006eb8:	d11b      	bne.n	8006ef2 <_vfiprintf_r+0x56>
 8006eba:	6875      	ldr	r5, [r6, #4]
 8006ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ebe:	07d9      	lsls	r1, r3, #31
 8006ec0:	d405      	bmi.n	8006ece <_vfiprintf_r+0x32>
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	059a      	lsls	r2, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_vfiprintf_r+0x32>
 8006ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eca:	f000 fd3b 	bl	8007944 <__retarget_lock_acquire_recursive>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	071b      	lsls	r3, r3, #28
 8006ed2:	d501      	bpl.n	8006ed8 <_vfiprintf_r+0x3c>
 8006ed4:	692b      	ldr	r3, [r5, #16]
 8006ed6:	b9eb      	cbnz	r3, 8006f14 <_vfiprintf_r+0x78>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 fb04 	bl	80074e8 <__swsetup_r>
 8006ee0:	b1c0      	cbz	r0, 8006f14 <_vfiprintf_r+0x78>
 8006ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee4:	07dc      	lsls	r4, r3, #31
 8006ee6:	d50e      	bpl.n	8006f06 <_vfiprintf_r+0x6a>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b01d      	add	sp, #116	; 0x74
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	4b7b      	ldr	r3, [pc, #492]	; (80070e0 <_vfiprintf_r+0x244>)
 8006ef4:	429d      	cmp	r5, r3
 8006ef6:	d101      	bne.n	8006efc <_vfiprintf_r+0x60>
 8006ef8:	68b5      	ldr	r5, [r6, #8]
 8006efa:	e7df      	b.n	8006ebc <_vfiprintf_r+0x20>
 8006efc:	4b79      	ldr	r3, [pc, #484]	; (80070e4 <_vfiprintf_r+0x248>)
 8006efe:	429d      	cmp	r5, r3
 8006f00:	bf08      	it	eq
 8006f02:	68f5      	ldreq	r5, [r6, #12]
 8006f04:	e7da      	b.n	8006ebc <_vfiprintf_r+0x20>
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	0598      	lsls	r0, r3, #22
 8006f0a:	d4ed      	bmi.n	8006ee8 <_vfiprintf_r+0x4c>
 8006f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f0e:	f000 fd1a 	bl	8007946 <__retarget_lock_release_recursive>
 8006f12:	e7e9      	b.n	8006ee8 <_vfiprintf_r+0x4c>
 8006f14:	2300      	movs	r3, #0
 8006f16:	9309      	str	r3, [sp, #36]	; 0x24
 8006f18:	2320      	movs	r3, #32
 8006f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f22:	2330      	movs	r3, #48	; 0x30
 8006f24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070e8 <_vfiprintf_r+0x24c>
 8006f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f2c:	f04f 0901 	mov.w	r9, #1
 8006f30:	4623      	mov	r3, r4
 8006f32:	469a      	mov	sl, r3
 8006f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f38:	b10a      	cbz	r2, 8006f3e <_vfiprintf_r+0xa2>
 8006f3a:	2a25      	cmp	r2, #37	; 0x25
 8006f3c:	d1f9      	bne.n	8006f32 <_vfiprintf_r+0x96>
 8006f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f42:	d00b      	beq.n	8006f5c <_vfiprintf_r+0xc0>
 8006f44:	465b      	mov	r3, fp
 8006f46:	4622      	mov	r2, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff ff93 	bl	8006e76 <__sfputs_r>
 8006f50:	3001      	adds	r0, #1
 8006f52:	f000 80aa 	beq.w	80070aa <_vfiprintf_r+0x20e>
 8006f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f58:	445a      	add	r2, fp
 8006f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80a2 	beq.w	80070aa <_vfiprintf_r+0x20e>
 8006f66:	2300      	movs	r3, #0
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f70:	f10a 0a01 	add.w	sl, sl, #1
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f7e:	4654      	mov	r4, sl
 8006f80:	2205      	movs	r2, #5
 8006f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f86:	4858      	ldr	r0, [pc, #352]	; (80070e8 <_vfiprintf_r+0x24c>)
 8006f88:	f7f9 f95a 	bl	8000240 <memchr>
 8006f8c:	9a04      	ldr	r2, [sp, #16]
 8006f8e:	b9d8      	cbnz	r0, 8006fc8 <_vfiprintf_r+0x12c>
 8006f90:	06d1      	lsls	r1, r2, #27
 8006f92:	bf44      	itt	mi
 8006f94:	2320      	movmi	r3, #32
 8006f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f9a:	0713      	lsls	r3, r2, #28
 8006f9c:	bf44      	itt	mi
 8006f9e:	232b      	movmi	r3, #43	; 0x2b
 8006fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8006faa:	d015      	beq.n	8006fd8 <_vfiprintf_r+0x13c>
 8006fac:	9a07      	ldr	r2, [sp, #28]
 8006fae:	4654      	mov	r4, sl
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	f04f 0c0a 	mov.w	ip, #10
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fbc:	3b30      	subs	r3, #48	; 0x30
 8006fbe:	2b09      	cmp	r3, #9
 8006fc0:	d94e      	bls.n	8007060 <_vfiprintf_r+0x1c4>
 8006fc2:	b1b0      	cbz	r0, 8006ff2 <_vfiprintf_r+0x156>
 8006fc4:	9207      	str	r2, [sp, #28]
 8006fc6:	e014      	b.n	8006ff2 <_vfiprintf_r+0x156>
 8006fc8:	eba0 0308 	sub.w	r3, r0, r8
 8006fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	46a2      	mov	sl, r4
 8006fd6:	e7d2      	b.n	8006f7e <_vfiprintf_r+0xe2>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	1d19      	adds	r1, r3, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	9103      	str	r1, [sp, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfbb      	ittet	lt
 8006fe4:	425b      	neglt	r3, r3
 8006fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8006fea:	9307      	strge	r3, [sp, #28]
 8006fec:	9307      	strlt	r3, [sp, #28]
 8006fee:	bfb8      	it	lt
 8006ff0:	9204      	strlt	r2, [sp, #16]
 8006ff2:	7823      	ldrb	r3, [r4, #0]
 8006ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ff6:	d10c      	bne.n	8007012 <_vfiprintf_r+0x176>
 8006ff8:	7863      	ldrb	r3, [r4, #1]
 8006ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8006ffc:	d135      	bne.n	800706a <_vfiprintf_r+0x1ce>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	1d1a      	adds	r2, r3, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	9203      	str	r2, [sp, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfb8      	it	lt
 800700a:	f04f 33ff 	movlt.w	r3, #4294967295
 800700e:	3402      	adds	r4, #2
 8007010:	9305      	str	r3, [sp, #20]
 8007012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80070f8 <_vfiprintf_r+0x25c>
 8007016:	7821      	ldrb	r1, [r4, #0]
 8007018:	2203      	movs	r2, #3
 800701a:	4650      	mov	r0, sl
 800701c:	f7f9 f910 	bl	8000240 <memchr>
 8007020:	b140      	cbz	r0, 8007034 <_vfiprintf_r+0x198>
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	eba0 000a 	sub.w	r0, r0, sl
 8007028:	fa03 f000 	lsl.w	r0, r3, r0
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	4303      	orrs	r3, r0
 8007030:	3401      	adds	r4, #1
 8007032:	9304      	str	r3, [sp, #16]
 8007034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007038:	482c      	ldr	r0, [pc, #176]	; (80070ec <_vfiprintf_r+0x250>)
 800703a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800703e:	2206      	movs	r2, #6
 8007040:	f7f9 f8fe 	bl	8000240 <memchr>
 8007044:	2800      	cmp	r0, #0
 8007046:	d03f      	beq.n	80070c8 <_vfiprintf_r+0x22c>
 8007048:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <_vfiprintf_r+0x254>)
 800704a:	bb1b      	cbnz	r3, 8007094 <_vfiprintf_r+0x1f8>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	3307      	adds	r3, #7
 8007050:	f023 0307 	bic.w	r3, r3, #7
 8007054:	3308      	adds	r3, #8
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705a:	443b      	add	r3, r7
 800705c:	9309      	str	r3, [sp, #36]	; 0x24
 800705e:	e767      	b.n	8006f30 <_vfiprintf_r+0x94>
 8007060:	fb0c 3202 	mla	r2, ip, r2, r3
 8007064:	460c      	mov	r4, r1
 8007066:	2001      	movs	r0, #1
 8007068:	e7a5      	b.n	8006fb6 <_vfiprintf_r+0x11a>
 800706a:	2300      	movs	r3, #0
 800706c:	3401      	adds	r4, #1
 800706e:	9305      	str	r3, [sp, #20]
 8007070:	4619      	mov	r1, r3
 8007072:	f04f 0c0a 	mov.w	ip, #10
 8007076:	4620      	mov	r0, r4
 8007078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800707c:	3a30      	subs	r2, #48	; 0x30
 800707e:	2a09      	cmp	r2, #9
 8007080:	d903      	bls.n	800708a <_vfiprintf_r+0x1ee>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0c5      	beq.n	8007012 <_vfiprintf_r+0x176>
 8007086:	9105      	str	r1, [sp, #20]
 8007088:	e7c3      	b.n	8007012 <_vfiprintf_r+0x176>
 800708a:	fb0c 2101 	mla	r1, ip, r1, r2
 800708e:	4604      	mov	r4, r0
 8007090:	2301      	movs	r3, #1
 8007092:	e7f0      	b.n	8007076 <_vfiprintf_r+0x1da>
 8007094:	ab03      	add	r3, sp, #12
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	462a      	mov	r2, r5
 800709a:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <_vfiprintf_r+0x258>)
 800709c:	a904      	add	r1, sp, #16
 800709e:	4630      	mov	r0, r6
 80070a0:	f3af 8000 	nop.w
 80070a4:	4607      	mov	r7, r0
 80070a6:	1c78      	adds	r0, r7, #1
 80070a8:	d1d6      	bne.n	8007058 <_vfiprintf_r+0x1bc>
 80070aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ac:	07d9      	lsls	r1, r3, #31
 80070ae:	d405      	bmi.n	80070bc <_vfiprintf_r+0x220>
 80070b0:	89ab      	ldrh	r3, [r5, #12]
 80070b2:	059a      	lsls	r2, r3, #22
 80070b4:	d402      	bmi.n	80070bc <_vfiprintf_r+0x220>
 80070b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b8:	f000 fc45 	bl	8007946 <__retarget_lock_release_recursive>
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	065b      	lsls	r3, r3, #25
 80070c0:	f53f af12 	bmi.w	8006ee8 <_vfiprintf_r+0x4c>
 80070c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c6:	e711      	b.n	8006eec <_vfiprintf_r+0x50>
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	462a      	mov	r2, r5
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <_vfiprintf_r+0x258>)
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4630      	mov	r0, r6
 80070d4:	f000 f880 	bl	80071d8 <_printf_i>
 80070d8:	e7e4      	b.n	80070a4 <_vfiprintf_r+0x208>
 80070da:	bf00      	nop
 80070dc:	08008294 	.word	0x08008294
 80070e0:	080082b4 	.word	0x080082b4
 80070e4:	08008274 	.word	0x08008274
 80070e8:	08008241 	.word	0x08008241
 80070ec:	0800824b 	.word	0x0800824b
 80070f0:	00000000 	.word	0x00000000
 80070f4:	08006e77 	.word	0x08006e77
 80070f8:	08008247 	.word	0x08008247

080070fc <_printf_common>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	4616      	mov	r6, r2
 8007102:	4699      	mov	r9, r3
 8007104:	688a      	ldr	r2, [r1, #8]
 8007106:	690b      	ldr	r3, [r1, #16]
 8007108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800710c:	4293      	cmp	r3, r2
 800710e:	bfb8      	it	lt
 8007110:	4613      	movlt	r3, r2
 8007112:	6033      	str	r3, [r6, #0]
 8007114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007118:	4607      	mov	r7, r0
 800711a:	460c      	mov	r4, r1
 800711c:	b10a      	cbz	r2, 8007122 <_printf_common+0x26>
 800711e:	3301      	adds	r3, #1
 8007120:	6033      	str	r3, [r6, #0]
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	0699      	lsls	r1, r3, #26
 8007126:	bf42      	ittt	mi
 8007128:	6833      	ldrmi	r3, [r6, #0]
 800712a:	3302      	addmi	r3, #2
 800712c:	6033      	strmi	r3, [r6, #0]
 800712e:	6825      	ldr	r5, [r4, #0]
 8007130:	f015 0506 	ands.w	r5, r5, #6
 8007134:	d106      	bne.n	8007144 <_printf_common+0x48>
 8007136:	f104 0a19 	add.w	sl, r4, #25
 800713a:	68e3      	ldr	r3, [r4, #12]
 800713c:	6832      	ldr	r2, [r6, #0]
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	42ab      	cmp	r3, r5
 8007142:	dc26      	bgt.n	8007192 <_printf_common+0x96>
 8007144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007148:	1e13      	subs	r3, r2, #0
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	bf18      	it	ne
 800714e:	2301      	movne	r3, #1
 8007150:	0692      	lsls	r2, r2, #26
 8007152:	d42b      	bmi.n	80071ac <_printf_common+0xb0>
 8007154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007158:	4649      	mov	r1, r9
 800715a:	4638      	mov	r0, r7
 800715c:	47c0      	blx	r8
 800715e:	3001      	adds	r0, #1
 8007160:	d01e      	beq.n	80071a0 <_printf_common+0xa4>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	68e5      	ldr	r5, [r4, #12]
 8007166:	6832      	ldr	r2, [r6, #0]
 8007168:	f003 0306 	and.w	r3, r3, #6
 800716c:	2b04      	cmp	r3, #4
 800716e:	bf08      	it	eq
 8007170:	1aad      	subeq	r5, r5, r2
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	bf0c      	ite	eq
 8007178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800717c:	2500      	movne	r5, #0
 800717e:	4293      	cmp	r3, r2
 8007180:	bfc4      	itt	gt
 8007182:	1a9b      	subgt	r3, r3, r2
 8007184:	18ed      	addgt	r5, r5, r3
 8007186:	2600      	movs	r6, #0
 8007188:	341a      	adds	r4, #26
 800718a:	42b5      	cmp	r5, r6
 800718c:	d11a      	bne.n	80071c4 <_printf_common+0xc8>
 800718e:	2000      	movs	r0, #0
 8007190:	e008      	b.n	80071a4 <_printf_common+0xa8>
 8007192:	2301      	movs	r3, #1
 8007194:	4652      	mov	r2, sl
 8007196:	4649      	mov	r1, r9
 8007198:	4638      	mov	r0, r7
 800719a:	47c0      	blx	r8
 800719c:	3001      	adds	r0, #1
 800719e:	d103      	bne.n	80071a8 <_printf_common+0xac>
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a8:	3501      	adds	r5, #1
 80071aa:	e7c6      	b.n	800713a <_printf_common+0x3e>
 80071ac:	18e1      	adds	r1, r4, r3
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	2030      	movs	r0, #48	; 0x30
 80071b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071b6:	4422      	add	r2, r4
 80071b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c0:	3302      	adds	r3, #2
 80071c2:	e7c7      	b.n	8007154 <_printf_common+0x58>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4622      	mov	r2, r4
 80071c8:	4649      	mov	r1, r9
 80071ca:	4638      	mov	r0, r7
 80071cc:	47c0      	blx	r8
 80071ce:	3001      	adds	r0, #1
 80071d0:	d0e6      	beq.n	80071a0 <_printf_common+0xa4>
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7d9      	b.n	800718a <_printf_common+0x8e>
	...

080071d8 <_printf_i>:
 80071d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	7e0f      	ldrb	r7, [r1, #24]
 80071de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071e0:	2f78      	cmp	r7, #120	; 0x78
 80071e2:	4691      	mov	r9, r2
 80071e4:	4680      	mov	r8, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	469a      	mov	sl, r3
 80071ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ee:	d807      	bhi.n	8007200 <_printf_i+0x28>
 80071f0:	2f62      	cmp	r7, #98	; 0x62
 80071f2:	d80a      	bhi.n	800720a <_printf_i+0x32>
 80071f4:	2f00      	cmp	r7, #0
 80071f6:	f000 80d8 	beq.w	80073aa <_printf_i+0x1d2>
 80071fa:	2f58      	cmp	r7, #88	; 0x58
 80071fc:	f000 80a3 	beq.w	8007346 <_printf_i+0x16e>
 8007200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007208:	e03a      	b.n	8007280 <_printf_i+0xa8>
 800720a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800720e:	2b15      	cmp	r3, #21
 8007210:	d8f6      	bhi.n	8007200 <_printf_i+0x28>
 8007212:	a101      	add	r1, pc, #4	; (adr r1, 8007218 <_printf_i+0x40>)
 8007214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007218:	08007271 	.word	0x08007271
 800721c:	08007285 	.word	0x08007285
 8007220:	08007201 	.word	0x08007201
 8007224:	08007201 	.word	0x08007201
 8007228:	08007201 	.word	0x08007201
 800722c:	08007201 	.word	0x08007201
 8007230:	08007285 	.word	0x08007285
 8007234:	08007201 	.word	0x08007201
 8007238:	08007201 	.word	0x08007201
 800723c:	08007201 	.word	0x08007201
 8007240:	08007201 	.word	0x08007201
 8007244:	08007391 	.word	0x08007391
 8007248:	080072b5 	.word	0x080072b5
 800724c:	08007373 	.word	0x08007373
 8007250:	08007201 	.word	0x08007201
 8007254:	08007201 	.word	0x08007201
 8007258:	080073b3 	.word	0x080073b3
 800725c:	08007201 	.word	0x08007201
 8007260:	080072b5 	.word	0x080072b5
 8007264:	08007201 	.word	0x08007201
 8007268:	08007201 	.word	0x08007201
 800726c:	0800737b 	.word	0x0800737b
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	602a      	str	r2, [r5, #0]
 8007278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800727c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007280:	2301      	movs	r3, #1
 8007282:	e0a3      	b.n	80073cc <_printf_i+0x1f4>
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	6829      	ldr	r1, [r5, #0]
 8007288:	0606      	lsls	r6, r0, #24
 800728a:	f101 0304 	add.w	r3, r1, #4
 800728e:	d50a      	bpl.n	80072a6 <_printf_i+0xce>
 8007290:	680e      	ldr	r6, [r1, #0]
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	2e00      	cmp	r6, #0
 8007296:	da03      	bge.n	80072a0 <_printf_i+0xc8>
 8007298:	232d      	movs	r3, #45	; 0x2d
 800729a:	4276      	negs	r6, r6
 800729c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a0:	485e      	ldr	r0, [pc, #376]	; (800741c <_printf_i+0x244>)
 80072a2:	230a      	movs	r3, #10
 80072a4:	e019      	b.n	80072da <_printf_i+0x102>
 80072a6:	680e      	ldr	r6, [r1, #0]
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ae:	bf18      	it	ne
 80072b0:	b236      	sxthne	r6, r6
 80072b2:	e7ef      	b.n	8007294 <_printf_i+0xbc>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	1d19      	adds	r1, r3, #4
 80072ba:	6029      	str	r1, [r5, #0]
 80072bc:	0601      	lsls	r1, r0, #24
 80072be:	d501      	bpl.n	80072c4 <_printf_i+0xec>
 80072c0:	681e      	ldr	r6, [r3, #0]
 80072c2:	e002      	b.n	80072ca <_printf_i+0xf2>
 80072c4:	0646      	lsls	r6, r0, #25
 80072c6:	d5fb      	bpl.n	80072c0 <_printf_i+0xe8>
 80072c8:	881e      	ldrh	r6, [r3, #0]
 80072ca:	4854      	ldr	r0, [pc, #336]	; (800741c <_printf_i+0x244>)
 80072cc:	2f6f      	cmp	r7, #111	; 0x6f
 80072ce:	bf0c      	ite	eq
 80072d0:	2308      	moveq	r3, #8
 80072d2:	230a      	movne	r3, #10
 80072d4:	2100      	movs	r1, #0
 80072d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072da:	6865      	ldr	r5, [r4, #4]
 80072dc:	60a5      	str	r5, [r4, #8]
 80072de:	2d00      	cmp	r5, #0
 80072e0:	bfa2      	ittt	ge
 80072e2:	6821      	ldrge	r1, [r4, #0]
 80072e4:	f021 0104 	bicge.w	r1, r1, #4
 80072e8:	6021      	strge	r1, [r4, #0]
 80072ea:	b90e      	cbnz	r6, 80072f0 <_printf_i+0x118>
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	d04d      	beq.n	800738c <_printf_i+0x1b4>
 80072f0:	4615      	mov	r5, r2
 80072f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80072f6:	fb03 6711 	mls	r7, r3, r1, r6
 80072fa:	5dc7      	ldrb	r7, [r0, r7]
 80072fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007300:	4637      	mov	r7, r6
 8007302:	42bb      	cmp	r3, r7
 8007304:	460e      	mov	r6, r1
 8007306:	d9f4      	bls.n	80072f2 <_printf_i+0x11a>
 8007308:	2b08      	cmp	r3, #8
 800730a:	d10b      	bne.n	8007324 <_printf_i+0x14c>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	07de      	lsls	r6, r3, #31
 8007310:	d508      	bpl.n	8007324 <_printf_i+0x14c>
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	6861      	ldr	r1, [r4, #4]
 8007316:	4299      	cmp	r1, r3
 8007318:	bfde      	ittt	le
 800731a:	2330      	movle	r3, #48	; 0x30
 800731c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007324:	1b52      	subs	r2, r2, r5
 8007326:	6122      	str	r2, [r4, #16]
 8007328:	f8cd a000 	str.w	sl, [sp]
 800732c:	464b      	mov	r3, r9
 800732e:	aa03      	add	r2, sp, #12
 8007330:	4621      	mov	r1, r4
 8007332:	4640      	mov	r0, r8
 8007334:	f7ff fee2 	bl	80070fc <_printf_common>
 8007338:	3001      	adds	r0, #1
 800733a:	d14c      	bne.n	80073d6 <_printf_i+0x1fe>
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	b004      	add	sp, #16
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	4835      	ldr	r0, [pc, #212]	; (800741c <_printf_i+0x244>)
 8007348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800734c:	6829      	ldr	r1, [r5, #0]
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	f851 6b04 	ldr.w	r6, [r1], #4
 8007354:	6029      	str	r1, [r5, #0]
 8007356:	061d      	lsls	r5, r3, #24
 8007358:	d514      	bpl.n	8007384 <_printf_i+0x1ac>
 800735a:	07df      	lsls	r7, r3, #31
 800735c:	bf44      	itt	mi
 800735e:	f043 0320 	orrmi.w	r3, r3, #32
 8007362:	6023      	strmi	r3, [r4, #0]
 8007364:	b91e      	cbnz	r6, 800736e <_printf_i+0x196>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	f023 0320 	bic.w	r3, r3, #32
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	2310      	movs	r3, #16
 8007370:	e7b0      	b.n	80072d4 <_printf_i+0xfc>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	f043 0320 	orr.w	r3, r3, #32
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	2378      	movs	r3, #120	; 0x78
 800737c:	4828      	ldr	r0, [pc, #160]	; (8007420 <_printf_i+0x248>)
 800737e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007382:	e7e3      	b.n	800734c <_printf_i+0x174>
 8007384:	0659      	lsls	r1, r3, #25
 8007386:	bf48      	it	mi
 8007388:	b2b6      	uxthmi	r6, r6
 800738a:	e7e6      	b.n	800735a <_printf_i+0x182>
 800738c:	4615      	mov	r5, r2
 800738e:	e7bb      	b.n	8007308 <_printf_i+0x130>
 8007390:	682b      	ldr	r3, [r5, #0]
 8007392:	6826      	ldr	r6, [r4, #0]
 8007394:	6961      	ldr	r1, [r4, #20]
 8007396:	1d18      	adds	r0, r3, #4
 8007398:	6028      	str	r0, [r5, #0]
 800739a:	0635      	lsls	r5, r6, #24
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	d501      	bpl.n	80073a4 <_printf_i+0x1cc>
 80073a0:	6019      	str	r1, [r3, #0]
 80073a2:	e002      	b.n	80073aa <_printf_i+0x1d2>
 80073a4:	0670      	lsls	r0, r6, #25
 80073a6:	d5fb      	bpl.n	80073a0 <_printf_i+0x1c8>
 80073a8:	8019      	strh	r1, [r3, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	4615      	mov	r5, r2
 80073b0:	e7ba      	b.n	8007328 <_printf_i+0x150>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	1d1a      	adds	r2, r3, #4
 80073b6:	602a      	str	r2, [r5, #0]
 80073b8:	681d      	ldr	r5, [r3, #0]
 80073ba:	6862      	ldr	r2, [r4, #4]
 80073bc:	2100      	movs	r1, #0
 80073be:	4628      	mov	r0, r5
 80073c0:	f7f8 ff3e 	bl	8000240 <memchr>
 80073c4:	b108      	cbz	r0, 80073ca <_printf_i+0x1f2>
 80073c6:	1b40      	subs	r0, r0, r5
 80073c8:	6060      	str	r0, [r4, #4]
 80073ca:	6863      	ldr	r3, [r4, #4]
 80073cc:	6123      	str	r3, [r4, #16]
 80073ce:	2300      	movs	r3, #0
 80073d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d4:	e7a8      	b.n	8007328 <_printf_i+0x150>
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	462a      	mov	r2, r5
 80073da:	4649      	mov	r1, r9
 80073dc:	4640      	mov	r0, r8
 80073de:	47d0      	blx	sl
 80073e0:	3001      	adds	r0, #1
 80073e2:	d0ab      	beq.n	800733c <_printf_i+0x164>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	079b      	lsls	r3, r3, #30
 80073e8:	d413      	bmi.n	8007412 <_printf_i+0x23a>
 80073ea:	68e0      	ldr	r0, [r4, #12]
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	4298      	cmp	r0, r3
 80073f0:	bfb8      	it	lt
 80073f2:	4618      	movlt	r0, r3
 80073f4:	e7a4      	b.n	8007340 <_printf_i+0x168>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4632      	mov	r2, r6
 80073fa:	4649      	mov	r1, r9
 80073fc:	4640      	mov	r0, r8
 80073fe:	47d0      	blx	sl
 8007400:	3001      	adds	r0, #1
 8007402:	d09b      	beq.n	800733c <_printf_i+0x164>
 8007404:	3501      	adds	r5, #1
 8007406:	68e3      	ldr	r3, [r4, #12]
 8007408:	9903      	ldr	r1, [sp, #12]
 800740a:	1a5b      	subs	r3, r3, r1
 800740c:	42ab      	cmp	r3, r5
 800740e:	dcf2      	bgt.n	80073f6 <_printf_i+0x21e>
 8007410:	e7eb      	b.n	80073ea <_printf_i+0x212>
 8007412:	2500      	movs	r5, #0
 8007414:	f104 0619 	add.w	r6, r4, #25
 8007418:	e7f5      	b.n	8007406 <_printf_i+0x22e>
 800741a:	bf00      	nop
 800741c:	08008252 	.word	0x08008252
 8007420:	08008263 	.word	0x08008263

08007424 <_sbrk_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d06      	ldr	r5, [pc, #24]	; (8007440 <_sbrk_r+0x1c>)
 8007428:	2300      	movs	r3, #0
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7f9 fd2a 	bl	8000e88 <_sbrk>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_sbrk_r+0x1a>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_sbrk_r+0x1a>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	20000280 	.word	0x20000280

08007444 <__swbuf_r>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	460e      	mov	r6, r1
 8007448:	4614      	mov	r4, r2
 800744a:	4605      	mov	r5, r0
 800744c:	b118      	cbz	r0, 8007456 <__swbuf_r+0x12>
 800744e:	6983      	ldr	r3, [r0, #24]
 8007450:	b90b      	cbnz	r3, 8007456 <__swbuf_r+0x12>
 8007452:	f000 f9d9 	bl	8007808 <__sinit>
 8007456:	4b21      	ldr	r3, [pc, #132]	; (80074dc <__swbuf_r+0x98>)
 8007458:	429c      	cmp	r4, r3
 800745a:	d12b      	bne.n	80074b4 <__swbuf_r+0x70>
 800745c:	686c      	ldr	r4, [r5, #4]
 800745e:	69a3      	ldr	r3, [r4, #24]
 8007460:	60a3      	str	r3, [r4, #8]
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	071a      	lsls	r2, r3, #28
 8007466:	d52f      	bpl.n	80074c8 <__swbuf_r+0x84>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	b36b      	cbz	r3, 80074c8 <__swbuf_r+0x84>
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	1ac0      	subs	r0, r0, r3
 8007472:	6963      	ldr	r3, [r4, #20]
 8007474:	b2f6      	uxtb	r6, r6
 8007476:	4283      	cmp	r3, r0
 8007478:	4637      	mov	r7, r6
 800747a:	dc04      	bgt.n	8007486 <__swbuf_r+0x42>
 800747c:	4621      	mov	r1, r4
 800747e:	4628      	mov	r0, r5
 8007480:	f000 f92e 	bl	80076e0 <_fflush_r>
 8007484:	bb30      	cbnz	r0, 80074d4 <__swbuf_r+0x90>
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	6022      	str	r2, [r4, #0]
 8007492:	701e      	strb	r6, [r3, #0]
 8007494:	6963      	ldr	r3, [r4, #20]
 8007496:	3001      	adds	r0, #1
 8007498:	4283      	cmp	r3, r0
 800749a:	d004      	beq.n	80074a6 <__swbuf_r+0x62>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	07db      	lsls	r3, r3, #31
 80074a0:	d506      	bpl.n	80074b0 <__swbuf_r+0x6c>
 80074a2:	2e0a      	cmp	r6, #10
 80074a4:	d104      	bne.n	80074b0 <__swbuf_r+0x6c>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f919 	bl	80076e0 <_fflush_r>
 80074ae:	b988      	cbnz	r0, 80074d4 <__swbuf_r+0x90>
 80074b0:	4638      	mov	r0, r7
 80074b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <__swbuf_r+0x9c>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	d101      	bne.n	80074be <__swbuf_r+0x7a>
 80074ba:	68ac      	ldr	r4, [r5, #8]
 80074bc:	e7cf      	b.n	800745e <__swbuf_r+0x1a>
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <__swbuf_r+0xa0>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	bf08      	it	eq
 80074c4:	68ec      	ldreq	r4, [r5, #12]
 80074c6:	e7ca      	b.n	800745e <__swbuf_r+0x1a>
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f80c 	bl	80074e8 <__swsetup_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d0cb      	beq.n	800746c <__swbuf_r+0x28>
 80074d4:	f04f 37ff 	mov.w	r7, #4294967295
 80074d8:	e7ea      	b.n	80074b0 <__swbuf_r+0x6c>
 80074da:	bf00      	nop
 80074dc:	08008294 	.word	0x08008294
 80074e0:	080082b4 	.word	0x080082b4
 80074e4:	08008274 	.word	0x08008274

080074e8 <__swsetup_r>:
 80074e8:	4b32      	ldr	r3, [pc, #200]	; (80075b4 <__swsetup_r+0xcc>)
 80074ea:	b570      	push	{r4, r5, r6, lr}
 80074ec:	681d      	ldr	r5, [r3, #0]
 80074ee:	4606      	mov	r6, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	b125      	cbz	r5, 80074fe <__swsetup_r+0x16>
 80074f4:	69ab      	ldr	r3, [r5, #24]
 80074f6:	b913      	cbnz	r3, 80074fe <__swsetup_r+0x16>
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 f985 	bl	8007808 <__sinit>
 80074fe:	4b2e      	ldr	r3, [pc, #184]	; (80075b8 <__swsetup_r+0xd0>)
 8007500:	429c      	cmp	r4, r3
 8007502:	d10f      	bne.n	8007524 <__swsetup_r+0x3c>
 8007504:	686c      	ldr	r4, [r5, #4]
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800750c:	0719      	lsls	r1, r3, #28
 800750e:	d42c      	bmi.n	800756a <__swsetup_r+0x82>
 8007510:	06dd      	lsls	r5, r3, #27
 8007512:	d411      	bmi.n	8007538 <__swsetup_r+0x50>
 8007514:	2309      	movs	r3, #9
 8007516:	6033      	str	r3, [r6, #0]
 8007518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	f04f 30ff 	mov.w	r0, #4294967295
 8007522:	e03e      	b.n	80075a2 <__swsetup_r+0xba>
 8007524:	4b25      	ldr	r3, [pc, #148]	; (80075bc <__swsetup_r+0xd4>)
 8007526:	429c      	cmp	r4, r3
 8007528:	d101      	bne.n	800752e <__swsetup_r+0x46>
 800752a:	68ac      	ldr	r4, [r5, #8]
 800752c:	e7eb      	b.n	8007506 <__swsetup_r+0x1e>
 800752e:	4b24      	ldr	r3, [pc, #144]	; (80075c0 <__swsetup_r+0xd8>)
 8007530:	429c      	cmp	r4, r3
 8007532:	bf08      	it	eq
 8007534:	68ec      	ldreq	r4, [r5, #12]
 8007536:	e7e6      	b.n	8007506 <__swsetup_r+0x1e>
 8007538:	0758      	lsls	r0, r3, #29
 800753a:	d512      	bpl.n	8007562 <__swsetup_r+0x7a>
 800753c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800753e:	b141      	cbz	r1, 8007552 <__swsetup_r+0x6a>
 8007540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007544:	4299      	cmp	r1, r3
 8007546:	d002      	beq.n	800754e <__swsetup_r+0x66>
 8007548:	4630      	mov	r0, r6
 800754a:	f7ff fa41 	bl	80069d0 <_free_r>
 800754e:	2300      	movs	r3, #0
 8007550:	6363      	str	r3, [r4, #52]	; 0x34
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	2300      	movs	r3, #0
 800755c:	6063      	str	r3, [r4, #4]
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f043 0308 	orr.w	r3, r3, #8
 8007568:	81a3      	strh	r3, [r4, #12]
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	b94b      	cbnz	r3, 8007582 <__swsetup_r+0x9a>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007578:	d003      	beq.n	8007582 <__swsetup_r+0x9a>
 800757a:	4621      	mov	r1, r4
 800757c:	4630      	mov	r0, r6
 800757e:	f000 fa09 	bl	8007994 <__smakebuf_r>
 8007582:	89a0      	ldrh	r0, [r4, #12]
 8007584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007588:	f010 0301 	ands.w	r3, r0, #1
 800758c:	d00a      	beq.n	80075a4 <__swsetup_r+0xbc>
 800758e:	2300      	movs	r3, #0
 8007590:	60a3      	str	r3, [r4, #8]
 8007592:	6963      	ldr	r3, [r4, #20]
 8007594:	425b      	negs	r3, r3
 8007596:	61a3      	str	r3, [r4, #24]
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	b943      	cbnz	r3, 80075ae <__swsetup_r+0xc6>
 800759c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075a0:	d1ba      	bne.n	8007518 <__swsetup_r+0x30>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	0781      	lsls	r1, r0, #30
 80075a6:	bf58      	it	pl
 80075a8:	6963      	ldrpl	r3, [r4, #20]
 80075aa:	60a3      	str	r3, [r4, #8]
 80075ac:	e7f4      	b.n	8007598 <__swsetup_r+0xb0>
 80075ae:	2000      	movs	r0, #0
 80075b0:	e7f7      	b.n	80075a2 <__swsetup_r+0xba>
 80075b2:	bf00      	nop
 80075b4:	2000000c 	.word	0x2000000c
 80075b8:	08008294 	.word	0x08008294
 80075bc:	080082b4 	.word	0x080082b4
 80075c0:	08008274 	.word	0x08008274

080075c4 <abort>:
 80075c4:	b508      	push	{r3, lr}
 80075c6:	2006      	movs	r0, #6
 80075c8:	f000 fab0 	bl	8007b2c <raise>
 80075cc:	2001      	movs	r0, #1
 80075ce:	f7f9 fbe3 	bl	8000d98 <_exit>
	...

080075d4 <__sflush_r>:
 80075d4:	898a      	ldrh	r2, [r1, #12]
 80075d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075da:	4605      	mov	r5, r0
 80075dc:	0710      	lsls	r0, r2, #28
 80075de:	460c      	mov	r4, r1
 80075e0:	d458      	bmi.n	8007694 <__sflush_r+0xc0>
 80075e2:	684b      	ldr	r3, [r1, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dc05      	bgt.n	80075f4 <__sflush_r+0x20>
 80075e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dc02      	bgt.n	80075f4 <__sflush_r+0x20>
 80075ee:	2000      	movs	r0, #0
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	d0f9      	beq.n	80075ee <__sflush_r+0x1a>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007600:	682f      	ldr	r7, [r5, #0]
 8007602:	602b      	str	r3, [r5, #0]
 8007604:	d032      	beq.n	800766c <__sflush_r+0x98>
 8007606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	075a      	lsls	r2, r3, #29
 800760c:	d505      	bpl.n	800761a <__sflush_r+0x46>
 800760e:	6863      	ldr	r3, [r4, #4]
 8007610:	1ac0      	subs	r0, r0, r3
 8007612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007614:	b10b      	cbz	r3, 800761a <__sflush_r+0x46>
 8007616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007618:	1ac0      	subs	r0, r0, r3
 800761a:	2300      	movs	r3, #0
 800761c:	4602      	mov	r2, r0
 800761e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007620:	6a21      	ldr	r1, [r4, #32]
 8007622:	4628      	mov	r0, r5
 8007624:	47b0      	blx	r6
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	d106      	bne.n	800763a <__sflush_r+0x66>
 800762c:	6829      	ldr	r1, [r5, #0]
 800762e:	291d      	cmp	r1, #29
 8007630:	d82c      	bhi.n	800768c <__sflush_r+0xb8>
 8007632:	4a2a      	ldr	r2, [pc, #168]	; (80076dc <__sflush_r+0x108>)
 8007634:	40ca      	lsrs	r2, r1
 8007636:	07d6      	lsls	r6, r2, #31
 8007638:	d528      	bpl.n	800768c <__sflush_r+0xb8>
 800763a:	2200      	movs	r2, #0
 800763c:	6062      	str	r2, [r4, #4]
 800763e:	04d9      	lsls	r1, r3, #19
 8007640:	6922      	ldr	r2, [r4, #16]
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	d504      	bpl.n	8007650 <__sflush_r+0x7c>
 8007646:	1c42      	adds	r2, r0, #1
 8007648:	d101      	bne.n	800764e <__sflush_r+0x7a>
 800764a:	682b      	ldr	r3, [r5, #0]
 800764c:	b903      	cbnz	r3, 8007650 <__sflush_r+0x7c>
 800764e:	6560      	str	r0, [r4, #84]	; 0x54
 8007650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007652:	602f      	str	r7, [r5, #0]
 8007654:	2900      	cmp	r1, #0
 8007656:	d0ca      	beq.n	80075ee <__sflush_r+0x1a>
 8007658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800765c:	4299      	cmp	r1, r3
 800765e:	d002      	beq.n	8007666 <__sflush_r+0x92>
 8007660:	4628      	mov	r0, r5
 8007662:	f7ff f9b5 	bl	80069d0 <_free_r>
 8007666:	2000      	movs	r0, #0
 8007668:	6360      	str	r0, [r4, #52]	; 0x34
 800766a:	e7c1      	b.n	80075f0 <__sflush_r+0x1c>
 800766c:	6a21      	ldr	r1, [r4, #32]
 800766e:	2301      	movs	r3, #1
 8007670:	4628      	mov	r0, r5
 8007672:	47b0      	blx	r6
 8007674:	1c41      	adds	r1, r0, #1
 8007676:	d1c7      	bne.n	8007608 <__sflush_r+0x34>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0c4      	beq.n	8007608 <__sflush_r+0x34>
 800767e:	2b1d      	cmp	r3, #29
 8007680:	d001      	beq.n	8007686 <__sflush_r+0xb2>
 8007682:	2b16      	cmp	r3, #22
 8007684:	d101      	bne.n	800768a <__sflush_r+0xb6>
 8007686:	602f      	str	r7, [r5, #0]
 8007688:	e7b1      	b.n	80075ee <__sflush_r+0x1a>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	e7ad      	b.n	80075f0 <__sflush_r+0x1c>
 8007694:	690f      	ldr	r7, [r1, #16]
 8007696:	2f00      	cmp	r7, #0
 8007698:	d0a9      	beq.n	80075ee <__sflush_r+0x1a>
 800769a:	0793      	lsls	r3, r2, #30
 800769c:	680e      	ldr	r6, [r1, #0]
 800769e:	bf08      	it	eq
 80076a0:	694b      	ldreq	r3, [r1, #20]
 80076a2:	600f      	str	r7, [r1, #0]
 80076a4:	bf18      	it	ne
 80076a6:	2300      	movne	r3, #0
 80076a8:	eba6 0807 	sub.w	r8, r6, r7
 80076ac:	608b      	str	r3, [r1, #8]
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	dd9c      	ble.n	80075ee <__sflush_r+0x1a>
 80076b4:	6a21      	ldr	r1, [r4, #32]
 80076b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b8:	4643      	mov	r3, r8
 80076ba:	463a      	mov	r2, r7
 80076bc:	4628      	mov	r0, r5
 80076be:	47b0      	blx	r6
 80076c0:	2800      	cmp	r0, #0
 80076c2:	dc06      	bgt.n	80076d2 <__sflush_r+0xfe>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	e78e      	b.n	80075f0 <__sflush_r+0x1c>
 80076d2:	4407      	add	r7, r0
 80076d4:	eba8 0800 	sub.w	r8, r8, r0
 80076d8:	e7e9      	b.n	80076ae <__sflush_r+0xda>
 80076da:	bf00      	nop
 80076dc:	20400001 	.word	0x20400001

080076e0 <_fflush_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	4605      	mov	r5, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	b913      	cbnz	r3, 80076f0 <_fflush_r+0x10>
 80076ea:	2500      	movs	r5, #0
 80076ec:	4628      	mov	r0, r5
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	b118      	cbz	r0, 80076fa <_fflush_r+0x1a>
 80076f2:	6983      	ldr	r3, [r0, #24]
 80076f4:	b90b      	cbnz	r3, 80076fa <_fflush_r+0x1a>
 80076f6:	f000 f887 	bl	8007808 <__sinit>
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <_fflush_r+0x6c>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d11b      	bne.n	8007738 <_fflush_r+0x58>
 8007700:	686c      	ldr	r4, [r5, #4]
 8007702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0ef      	beq.n	80076ea <_fflush_r+0xa>
 800770a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800770c:	07d0      	lsls	r0, r2, #31
 800770e:	d404      	bmi.n	800771a <_fflush_r+0x3a>
 8007710:	0599      	lsls	r1, r3, #22
 8007712:	d402      	bmi.n	800771a <_fflush_r+0x3a>
 8007714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007716:	f000 f915 	bl	8007944 <__retarget_lock_acquire_recursive>
 800771a:	4628      	mov	r0, r5
 800771c:	4621      	mov	r1, r4
 800771e:	f7ff ff59 	bl	80075d4 <__sflush_r>
 8007722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007724:	07da      	lsls	r2, r3, #31
 8007726:	4605      	mov	r5, r0
 8007728:	d4e0      	bmi.n	80076ec <_fflush_r+0xc>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	059b      	lsls	r3, r3, #22
 800772e:	d4dd      	bmi.n	80076ec <_fflush_r+0xc>
 8007730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007732:	f000 f908 	bl	8007946 <__retarget_lock_release_recursive>
 8007736:	e7d9      	b.n	80076ec <_fflush_r+0xc>
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <_fflush_r+0x70>)
 800773a:	429c      	cmp	r4, r3
 800773c:	d101      	bne.n	8007742 <_fflush_r+0x62>
 800773e:	68ac      	ldr	r4, [r5, #8]
 8007740:	e7df      	b.n	8007702 <_fflush_r+0x22>
 8007742:	4b04      	ldr	r3, [pc, #16]	; (8007754 <_fflush_r+0x74>)
 8007744:	429c      	cmp	r4, r3
 8007746:	bf08      	it	eq
 8007748:	68ec      	ldreq	r4, [r5, #12]
 800774a:	e7da      	b.n	8007702 <_fflush_r+0x22>
 800774c:	08008294 	.word	0x08008294
 8007750:	080082b4 	.word	0x080082b4
 8007754:	08008274 	.word	0x08008274

08007758 <std>:
 8007758:	2300      	movs	r3, #0
 800775a:	b510      	push	{r4, lr}
 800775c:	4604      	mov	r4, r0
 800775e:	e9c0 3300 	strd	r3, r3, [r0]
 8007762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007766:	6083      	str	r3, [r0, #8]
 8007768:	8181      	strh	r1, [r0, #12]
 800776a:	6643      	str	r3, [r0, #100]	; 0x64
 800776c:	81c2      	strh	r2, [r0, #14]
 800776e:	6183      	str	r3, [r0, #24]
 8007770:	4619      	mov	r1, r3
 8007772:	2208      	movs	r2, #8
 8007774:	305c      	adds	r0, #92	; 0x5c
 8007776:	f7fe ffcf 	bl	8006718 <memset>
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <std+0x38>)
 800777c:	6263      	str	r3, [r4, #36]	; 0x24
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std+0x3c>)
 8007780:	62a3      	str	r3, [r4, #40]	; 0x28
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <std+0x40>)
 8007784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <std+0x44>)
 8007788:	6224      	str	r4, [r4, #32]
 800778a:	6323      	str	r3, [r4, #48]	; 0x30
 800778c:	bd10      	pop	{r4, pc}
 800778e:	bf00      	nop
 8007790:	08007b65 	.word	0x08007b65
 8007794:	08007b87 	.word	0x08007b87
 8007798:	08007bbf 	.word	0x08007bbf
 800779c:	08007be3 	.word	0x08007be3

080077a0 <_cleanup_r>:
 80077a0:	4901      	ldr	r1, [pc, #4]	; (80077a8 <_cleanup_r+0x8>)
 80077a2:	f000 b8af 	b.w	8007904 <_fwalk_reent>
 80077a6:	bf00      	nop
 80077a8:	080076e1 	.word	0x080076e1

080077ac <__sfmoreglue>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	2268      	movs	r2, #104	; 0x68
 80077b0:	1e4d      	subs	r5, r1, #1
 80077b2:	4355      	muls	r5, r2
 80077b4:	460e      	mov	r6, r1
 80077b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077ba:	f7ff f975 	bl	8006aa8 <_malloc_r>
 80077be:	4604      	mov	r4, r0
 80077c0:	b140      	cbz	r0, 80077d4 <__sfmoreglue+0x28>
 80077c2:	2100      	movs	r1, #0
 80077c4:	e9c0 1600 	strd	r1, r6, [r0]
 80077c8:	300c      	adds	r0, #12
 80077ca:	60a0      	str	r0, [r4, #8]
 80077cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077d0:	f7fe ffa2 	bl	8006718 <memset>
 80077d4:	4620      	mov	r0, r4
 80077d6:	bd70      	pop	{r4, r5, r6, pc}

080077d8 <__sfp_lock_acquire>:
 80077d8:	4801      	ldr	r0, [pc, #4]	; (80077e0 <__sfp_lock_acquire+0x8>)
 80077da:	f000 b8b3 	b.w	8007944 <__retarget_lock_acquire_recursive>
 80077de:	bf00      	nop
 80077e0:	2000027d 	.word	0x2000027d

080077e4 <__sfp_lock_release>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__sfp_lock_release+0x8>)
 80077e6:	f000 b8ae 	b.w	8007946 <__retarget_lock_release_recursive>
 80077ea:	bf00      	nop
 80077ec:	2000027d 	.word	0x2000027d

080077f0 <__sinit_lock_acquire>:
 80077f0:	4801      	ldr	r0, [pc, #4]	; (80077f8 <__sinit_lock_acquire+0x8>)
 80077f2:	f000 b8a7 	b.w	8007944 <__retarget_lock_acquire_recursive>
 80077f6:	bf00      	nop
 80077f8:	2000027e 	.word	0x2000027e

080077fc <__sinit_lock_release>:
 80077fc:	4801      	ldr	r0, [pc, #4]	; (8007804 <__sinit_lock_release+0x8>)
 80077fe:	f000 b8a2 	b.w	8007946 <__retarget_lock_release_recursive>
 8007802:	bf00      	nop
 8007804:	2000027e 	.word	0x2000027e

08007808 <__sinit>:
 8007808:	b510      	push	{r4, lr}
 800780a:	4604      	mov	r4, r0
 800780c:	f7ff fff0 	bl	80077f0 <__sinit_lock_acquire>
 8007810:	69a3      	ldr	r3, [r4, #24]
 8007812:	b11b      	cbz	r3, 800781c <__sinit+0x14>
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007818:	f7ff bff0 	b.w	80077fc <__sinit_lock_release>
 800781c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007820:	6523      	str	r3, [r4, #80]	; 0x50
 8007822:	4b13      	ldr	r3, [pc, #76]	; (8007870 <__sinit+0x68>)
 8007824:	4a13      	ldr	r2, [pc, #76]	; (8007874 <__sinit+0x6c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	62a2      	str	r2, [r4, #40]	; 0x28
 800782a:	42a3      	cmp	r3, r4
 800782c:	bf04      	itt	eq
 800782e:	2301      	moveq	r3, #1
 8007830:	61a3      	streq	r3, [r4, #24]
 8007832:	4620      	mov	r0, r4
 8007834:	f000 f820 	bl	8007878 <__sfp>
 8007838:	6060      	str	r0, [r4, #4]
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f81c 	bl	8007878 <__sfp>
 8007840:	60a0      	str	r0, [r4, #8]
 8007842:	4620      	mov	r0, r4
 8007844:	f000 f818 	bl	8007878 <__sfp>
 8007848:	2200      	movs	r2, #0
 800784a:	60e0      	str	r0, [r4, #12]
 800784c:	2104      	movs	r1, #4
 800784e:	6860      	ldr	r0, [r4, #4]
 8007850:	f7ff ff82 	bl	8007758 <std>
 8007854:	68a0      	ldr	r0, [r4, #8]
 8007856:	2201      	movs	r2, #1
 8007858:	2109      	movs	r1, #9
 800785a:	f7ff ff7d 	bl	8007758 <std>
 800785e:	68e0      	ldr	r0, [r4, #12]
 8007860:	2202      	movs	r2, #2
 8007862:	2112      	movs	r1, #18
 8007864:	f7ff ff78 	bl	8007758 <std>
 8007868:	2301      	movs	r3, #1
 800786a:	61a3      	str	r3, [r4, #24]
 800786c:	e7d2      	b.n	8007814 <__sinit+0xc>
 800786e:	bf00      	nop
 8007870:	0800808c 	.word	0x0800808c
 8007874:	080077a1 	.word	0x080077a1

08007878 <__sfp>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	4607      	mov	r7, r0
 800787c:	f7ff ffac 	bl	80077d8 <__sfp_lock_acquire>
 8007880:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <__sfp+0x84>)
 8007882:	681e      	ldr	r6, [r3, #0]
 8007884:	69b3      	ldr	r3, [r6, #24]
 8007886:	b913      	cbnz	r3, 800788e <__sfp+0x16>
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff ffbd 	bl	8007808 <__sinit>
 800788e:	3648      	adds	r6, #72	; 0x48
 8007890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007894:	3b01      	subs	r3, #1
 8007896:	d503      	bpl.n	80078a0 <__sfp+0x28>
 8007898:	6833      	ldr	r3, [r6, #0]
 800789a:	b30b      	cbz	r3, 80078e0 <__sfp+0x68>
 800789c:	6836      	ldr	r6, [r6, #0]
 800789e:	e7f7      	b.n	8007890 <__sfp+0x18>
 80078a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078a4:	b9d5      	cbnz	r5, 80078dc <__sfp+0x64>
 80078a6:	4b16      	ldr	r3, [pc, #88]	; (8007900 <__sfp+0x88>)
 80078a8:	60e3      	str	r3, [r4, #12]
 80078aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078ae:	6665      	str	r5, [r4, #100]	; 0x64
 80078b0:	f000 f847 	bl	8007942 <__retarget_lock_init_recursive>
 80078b4:	f7ff ff96 	bl	80077e4 <__sfp_lock_release>
 80078b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078c0:	6025      	str	r5, [r4, #0]
 80078c2:	61a5      	str	r5, [r4, #24]
 80078c4:	2208      	movs	r2, #8
 80078c6:	4629      	mov	r1, r5
 80078c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078cc:	f7fe ff24 	bl	8006718 <memset>
 80078d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078d8:	4620      	mov	r0, r4
 80078da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078dc:	3468      	adds	r4, #104	; 0x68
 80078de:	e7d9      	b.n	8007894 <__sfp+0x1c>
 80078e0:	2104      	movs	r1, #4
 80078e2:	4638      	mov	r0, r7
 80078e4:	f7ff ff62 	bl	80077ac <__sfmoreglue>
 80078e8:	4604      	mov	r4, r0
 80078ea:	6030      	str	r0, [r6, #0]
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d1d5      	bne.n	800789c <__sfp+0x24>
 80078f0:	f7ff ff78 	bl	80077e4 <__sfp_lock_release>
 80078f4:	230c      	movs	r3, #12
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	e7ee      	b.n	80078d8 <__sfp+0x60>
 80078fa:	bf00      	nop
 80078fc:	0800808c 	.word	0x0800808c
 8007900:	ffff0001 	.word	0xffff0001

08007904 <_fwalk_reent>:
 8007904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007908:	4606      	mov	r6, r0
 800790a:	4688      	mov	r8, r1
 800790c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007910:	2700      	movs	r7, #0
 8007912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007916:	f1b9 0901 	subs.w	r9, r9, #1
 800791a:	d505      	bpl.n	8007928 <_fwalk_reent+0x24>
 800791c:	6824      	ldr	r4, [r4, #0]
 800791e:	2c00      	cmp	r4, #0
 8007920:	d1f7      	bne.n	8007912 <_fwalk_reent+0xe>
 8007922:	4638      	mov	r0, r7
 8007924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007928:	89ab      	ldrh	r3, [r5, #12]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d907      	bls.n	800793e <_fwalk_reent+0x3a>
 800792e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007932:	3301      	adds	r3, #1
 8007934:	d003      	beq.n	800793e <_fwalk_reent+0x3a>
 8007936:	4629      	mov	r1, r5
 8007938:	4630      	mov	r0, r6
 800793a:	47c0      	blx	r8
 800793c:	4307      	orrs	r7, r0
 800793e:	3568      	adds	r5, #104	; 0x68
 8007940:	e7e9      	b.n	8007916 <_fwalk_reent+0x12>

08007942 <__retarget_lock_init_recursive>:
 8007942:	4770      	bx	lr

08007944 <__retarget_lock_acquire_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_release_recursive>:
 8007946:	4770      	bx	lr

08007948 <__swhatbuf_r>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	460e      	mov	r6, r1
 800794c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007950:	2900      	cmp	r1, #0
 8007952:	b096      	sub	sp, #88	; 0x58
 8007954:	4614      	mov	r4, r2
 8007956:	461d      	mov	r5, r3
 8007958:	da08      	bge.n	800796c <__swhatbuf_r+0x24>
 800795a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	602a      	str	r2, [r5, #0]
 8007962:	061a      	lsls	r2, r3, #24
 8007964:	d410      	bmi.n	8007988 <__swhatbuf_r+0x40>
 8007966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796a:	e00e      	b.n	800798a <__swhatbuf_r+0x42>
 800796c:	466a      	mov	r2, sp
 800796e:	f000 f95f 	bl	8007c30 <_fstat_r>
 8007972:	2800      	cmp	r0, #0
 8007974:	dbf1      	blt.n	800795a <__swhatbuf_r+0x12>
 8007976:	9a01      	ldr	r2, [sp, #4]
 8007978:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800797c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007980:	425a      	negs	r2, r3
 8007982:	415a      	adcs	r2, r3
 8007984:	602a      	str	r2, [r5, #0]
 8007986:	e7ee      	b.n	8007966 <__swhatbuf_r+0x1e>
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	2000      	movs	r0, #0
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	b016      	add	sp, #88	; 0x58
 8007990:	bd70      	pop	{r4, r5, r6, pc}
	...

08007994 <__smakebuf_r>:
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007998:	079d      	lsls	r5, r3, #30
 800799a:	4606      	mov	r6, r0
 800799c:	460c      	mov	r4, r1
 800799e:	d507      	bpl.n	80079b0 <__smakebuf_r+0x1c>
 80079a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	2301      	movs	r3, #1
 80079aa:	6163      	str	r3, [r4, #20]
 80079ac:	b002      	add	sp, #8
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	ab01      	add	r3, sp, #4
 80079b2:	466a      	mov	r2, sp
 80079b4:	f7ff ffc8 	bl	8007948 <__swhatbuf_r>
 80079b8:	9900      	ldr	r1, [sp, #0]
 80079ba:	4605      	mov	r5, r0
 80079bc:	4630      	mov	r0, r6
 80079be:	f7ff f873 	bl	8006aa8 <_malloc_r>
 80079c2:	b948      	cbnz	r0, 80079d8 <__smakebuf_r+0x44>
 80079c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c8:	059a      	lsls	r2, r3, #22
 80079ca:	d4ef      	bmi.n	80079ac <__smakebuf_r+0x18>
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	f043 0302 	orr.w	r3, r3, #2
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	e7e3      	b.n	80079a0 <__smakebuf_r+0xc>
 80079d8:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <__smakebuf_r+0x7c>)
 80079da:	62b3      	str	r3, [r6, #40]	; 0x28
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	6020      	str	r0, [r4, #0]
 80079e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	6163      	str	r3, [r4, #20]
 80079ea:	9b01      	ldr	r3, [sp, #4]
 80079ec:	6120      	str	r0, [r4, #16]
 80079ee:	b15b      	cbz	r3, 8007a08 <__smakebuf_r+0x74>
 80079f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079f4:	4630      	mov	r0, r6
 80079f6:	f000 f92d 	bl	8007c54 <_isatty_r>
 80079fa:	b128      	cbz	r0, 8007a08 <__smakebuf_r+0x74>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	89a0      	ldrh	r0, [r4, #12]
 8007a0a:	4305      	orrs	r5, r0
 8007a0c:	81a5      	strh	r5, [r4, #12]
 8007a0e:	e7cd      	b.n	80079ac <__smakebuf_r+0x18>
 8007a10:	080077a1 	.word	0x080077a1

08007a14 <memcpy>:
 8007a14:	440a      	add	r2, r1
 8007a16:	4291      	cmp	r1, r2
 8007a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a1c:	d100      	bne.n	8007a20 <memcpy+0xc>
 8007a1e:	4770      	bx	lr
 8007a20:	b510      	push	{r4, lr}
 8007a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a2a:	4291      	cmp	r1, r2
 8007a2c:	d1f9      	bne.n	8007a22 <memcpy+0xe>
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <memmove>:
 8007a30:	4288      	cmp	r0, r1
 8007a32:	b510      	push	{r4, lr}
 8007a34:	eb01 0402 	add.w	r4, r1, r2
 8007a38:	d902      	bls.n	8007a40 <memmove+0x10>
 8007a3a:	4284      	cmp	r4, r0
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	d807      	bhi.n	8007a50 <memmove+0x20>
 8007a40:	1e43      	subs	r3, r0, #1
 8007a42:	42a1      	cmp	r1, r4
 8007a44:	d008      	beq.n	8007a58 <memmove+0x28>
 8007a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a4e:	e7f8      	b.n	8007a42 <memmove+0x12>
 8007a50:	4402      	add	r2, r0
 8007a52:	4601      	mov	r1, r0
 8007a54:	428a      	cmp	r2, r1
 8007a56:	d100      	bne.n	8007a5a <memmove+0x2a>
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a62:	e7f7      	b.n	8007a54 <memmove+0x24>

08007a64 <__malloc_lock>:
 8007a64:	4801      	ldr	r0, [pc, #4]	; (8007a6c <__malloc_lock+0x8>)
 8007a66:	f7ff bf6d 	b.w	8007944 <__retarget_lock_acquire_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	2000027c 	.word	0x2000027c

08007a70 <__malloc_unlock>:
 8007a70:	4801      	ldr	r0, [pc, #4]	; (8007a78 <__malloc_unlock+0x8>)
 8007a72:	f7ff bf68 	b.w	8007946 <__retarget_lock_release_recursive>
 8007a76:	bf00      	nop
 8007a78:	2000027c 	.word	0x2000027c

08007a7c <_realloc_r>:
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	4680      	mov	r8, r0
 8007a82:	4614      	mov	r4, r2
 8007a84:	460e      	mov	r6, r1
 8007a86:	b921      	cbnz	r1, 8007a92 <_realloc_r+0x16>
 8007a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	f7ff b80b 	b.w	8006aa8 <_malloc_r>
 8007a92:	b92a      	cbnz	r2, 8007aa0 <_realloc_r+0x24>
 8007a94:	f7fe ff9c 	bl	80069d0 <_free_r>
 8007a98:	4625      	mov	r5, r4
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa0:	f000 f8fa 	bl	8007c98 <_malloc_usable_size_r>
 8007aa4:	4284      	cmp	r4, r0
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	d802      	bhi.n	8007ab0 <_realloc_r+0x34>
 8007aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007aae:	d812      	bhi.n	8007ad6 <_realloc_r+0x5a>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	f7fe fff8 	bl	8006aa8 <_malloc_r>
 8007ab8:	4605      	mov	r5, r0
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d0ed      	beq.n	8007a9a <_realloc_r+0x1e>
 8007abe:	42bc      	cmp	r4, r7
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	bf28      	it	cs
 8007ac6:	463a      	movcs	r2, r7
 8007ac8:	f7ff ffa4 	bl	8007a14 <memcpy>
 8007acc:	4631      	mov	r1, r6
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f7fe ff7e 	bl	80069d0 <_free_r>
 8007ad4:	e7e1      	b.n	8007a9a <_realloc_r+0x1e>
 8007ad6:	4635      	mov	r5, r6
 8007ad8:	e7df      	b.n	8007a9a <_realloc_r+0x1e>

08007ada <_raise_r>:
 8007ada:	291f      	cmp	r1, #31
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4604      	mov	r4, r0
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	d904      	bls.n	8007aee <_raise_r+0x14>
 8007ae4:	2316      	movs	r3, #22
 8007ae6:	6003      	str	r3, [r0, #0]
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	bd38      	pop	{r3, r4, r5, pc}
 8007aee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007af0:	b112      	cbz	r2, 8007af8 <_raise_r+0x1e>
 8007af2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007af6:	b94b      	cbnz	r3, 8007b0c <_raise_r+0x32>
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 f831 	bl	8007b60 <_getpid_r>
 8007afe:	462a      	mov	r2, r5
 8007b00:	4601      	mov	r1, r0
 8007b02:	4620      	mov	r0, r4
 8007b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b08:	f000 b818 	b.w	8007b3c <_kill_r>
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d00a      	beq.n	8007b26 <_raise_r+0x4c>
 8007b10:	1c59      	adds	r1, r3, #1
 8007b12:	d103      	bne.n	8007b1c <_raise_r+0x42>
 8007b14:	2316      	movs	r3, #22
 8007b16:	6003      	str	r3, [r0, #0]
 8007b18:	2001      	movs	r0, #1
 8007b1a:	e7e7      	b.n	8007aec <_raise_r+0x12>
 8007b1c:	2400      	movs	r4, #0
 8007b1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b22:	4628      	mov	r0, r5
 8007b24:	4798      	blx	r3
 8007b26:	2000      	movs	r0, #0
 8007b28:	e7e0      	b.n	8007aec <_raise_r+0x12>
	...

08007b2c <raise>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <raise+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f7ff bfd2 	b.w	8007ada <_raise_r>
 8007b36:	bf00      	nop
 8007b38:	2000000c 	.word	0x2000000c

08007b3c <_kill_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	; (8007b5c <_kill_r+0x20>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	f7f9 f915 	bl	8000d78 <_kill>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	d102      	bne.n	8007b58 <_kill_r+0x1c>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	b103      	cbz	r3, 8007b58 <_kill_r+0x1c>
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	bd38      	pop	{r3, r4, r5, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000280 	.word	0x20000280

08007b60 <_getpid_r>:
 8007b60:	f7f9 b902 	b.w	8000d68 <_getpid>

08007b64 <__sread>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	460c      	mov	r4, r1
 8007b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6c:	f000 f89c 	bl	8007ca8 <_read_r>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	bfab      	itete	ge
 8007b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b76:	89a3      	ldrhlt	r3, [r4, #12]
 8007b78:	181b      	addge	r3, r3, r0
 8007b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b7e:	bfac      	ite	ge
 8007b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b82:	81a3      	strhlt	r3, [r4, #12]
 8007b84:	bd10      	pop	{r4, pc}

08007b86 <__swrite>:
 8007b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	898b      	ldrh	r3, [r1, #12]
 8007b8e:	05db      	lsls	r3, r3, #23
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4616      	mov	r6, r2
 8007b96:	d505      	bpl.n	8007ba4 <__swrite+0x1e>
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f000 f868 	bl	8007c74 <_lseek_r>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	f000 b817 	b.w	8007bec <_write_r>

08007bbe <__sseek>:
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc6:	f000 f855 	bl	8007c74 <_lseek_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	bf15      	itete	ne
 8007bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bda:	81a3      	strheq	r3, [r4, #12]
 8007bdc:	bf18      	it	ne
 8007bde:	81a3      	strhne	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__sclose>:
 8007be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be6:	f000 b813 	b.w	8007c10 <_close_r>
	...

08007bec <_write_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	; (8007c0c <_write_r+0x20>)
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	602a      	str	r2, [r5, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f7f9 f8f3 	bl	8000de6 <_write>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_write_r+0x1e>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_write_r+0x1e>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	20000280 	.word	0x20000280

08007c10 <_close_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d06      	ldr	r5, [pc, #24]	; (8007c2c <_close_r+0x1c>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	f7f9 f8ff 	bl	8000e1e <_close>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_close_r+0x1a>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_close_r+0x1a>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20000280 	.word	0x20000280

08007c30 <_fstat_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	; (8007c50 <_fstat_r+0x20>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	f7f9 f8fa 	bl	8000e36 <_fstat>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	d102      	bne.n	8007c4c <_fstat_r+0x1c>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	b103      	cbz	r3, 8007c4c <_fstat_r+0x1c>
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000280 	.word	0x20000280

08007c54 <_isatty_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_isatty_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7f9 f8f9 	bl	8000e56 <_isatty>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_isatty_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_isatty_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	20000280 	.word	0x20000280

08007c74 <_lseek_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	; (8007c94 <_lseek_r+0x20>)
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	602a      	str	r2, [r5, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7f9 f8f2 	bl	8000e6c <_lseek>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_lseek_r+0x1e>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_lseek_r+0x1e>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	20000280 	.word	0x20000280

08007c98 <_malloc_usable_size_r>:
 8007c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9c:	1f18      	subs	r0, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfbc      	itt	lt
 8007ca2:	580b      	ldrlt	r3, [r1, r0]
 8007ca4:	18c0      	addlt	r0, r0, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_read_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	; (8007cc8 <_read_r+0x20>)
 8007cac:	4604      	mov	r4, r0
 8007cae:	4608      	mov	r0, r1
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	602a      	str	r2, [r5, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f7f9 f878 	bl	8000dac <_read>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_read_r+0x1e>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_read_r+0x1e>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000280 	.word	0x20000280

08007ccc <_init>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr

08007cd8 <_fini>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr
